(()=>{"use strict";var t={221:(t,e,o)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.DataBase=void 0;const s=o(51);e.DataBase=class{constructor(){this._books=new Array,this._stocks=new Array,this._customers=new Array,this._sales=new Array,this._rents=new Array,this._bookSpecifications=new Array,this._cancelSales=new Array,this._saleCart=new s.SaleCart}get getBooksList(){return this._books}get getStocksList(){return this._stocks}get getCustomersList(){return this._customers}get getSalesList(){return this._sales}get getRents(){return this._rents}get getBookSpecifications(){return this._bookSpecifications}get getCancaledSales(){return this._cancelSales}get getSaleCart(){return this._saleCart}set setSaleCart(t){this._saleCart=t}}},39:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.BookSpecification=void 0,e.BookSpecification=class{constructor(t,e,o,s){this._isbn=t,this._price=e,this._startDate=o,this._endDate=s}get isbn(){return this._isbn}get price(){return this._price}get startDate(){return this._startDate}get endDate(){return this._endDate}set isbn(t){this._isbn=t}set price(t){this._price=t}set startDate(t){this._startDate=t}set endDate(t){this._endDate=t}}},934:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Book=void 0,e.Book=class{constructor(t,e,o,s,i,n){this._name=e,this._author=o,this._isbn=t,this._publishYear=s,this._pages=i,this._bookSpec=n}get isbn(){return this._isbn}get name(){return this._name}get author(){return this._author}get publishYear(){return this._publishYear}get pages(){return this._pages}get bookSpec(){return this._bookSpec}set isbn(t){this._isbn=t}set name(t){this._name=t}set author(t){this._author=t}set publishYear(t){this._publishYear=t}set pages(t){this._pages=t}set bookSpec(t){this._bookSpec=t}}},916:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Customer=void 0,e.Customer=class{constructor(t,e,o,s){this._id=t,this._name=e,this._surName=o,this._phoneNumber=s}get id(){return this._id}get name(){return this._name}get surName(){return this._surName}get phoneNumber(){return this._phoneNumber}set id(t){this._id=t}set name(t){this._name=t}set surName(t){this._surName=t}set phoneNumber(t){this._phoneNumber=t}}},51:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SaleCart=void 0,e.SaleCart=class{constructor(){this.bookAndQuantityMap=new Map}}},354:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Sale=void 0,e.Sale=class{constructor(t,e,o,s,i){this._bookAndQuantityMap=new Map,this._bookAndQuantityMap=t,this._operationDateTime=e,this._customerId=o,this._operationNumber=s,this._total=i}get bookAndQuantityMap(){return this._bookAndQuantityMap}get operationDateTime(){return this._operationDateTime}get customerId(){return this._customerId}get operationNumber(){return this._operationNumber}get total(){return this._total}set bookAndQuantityMap(t){this._bookAndQuantityMap=t}set operationDateTime(t){this._operationDateTime=t}set customerId(t){this._customerId=t}set operationNumber(t){this._operationNumber=t}set total(t){this._total=t}}},72:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Stock=void 0,e.Stock=class{constructor(t,e,o){this._isbn=t,this._quantity=e,this._shelfNumber=o}get isbn(){return this._isbn}get quantity(){return this._quantity}get shelfNumber(){return this._shelfNumber}set isbn(t){this._isbn=t}set quantity(t){this._quantity=t}set shelfNumber(t){this._shelfNumber=t}}},607:function(t,e,o){var s=this&&this.__awaiter||function(t,e,o,s){return new(o||(o=Promise))((function(i,n){function a(t){try{c(s.next(t))}catch(t){n(t)}}function r(t){try{c(s.throw(t))}catch(t){n(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(a,r)}c((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.stockService=e.saleService=e.rentService=e.cancelSaleService=e.customerService=e.bookService=void 0;const i=o(221),n=o(934),a=o(39),r=o(916),c=o(72),l=o(946),u=o(609),d=o(709),h=o(148),m=o(478),p=o(214);let k=new i.DataBase;function S(t,e){const o=document.getElementById(e),s=document.getElementById(t);o&&s&&s.addEventListener("click",(()=>{"none"===o.style.display?o.style.display="block":o.style.display="none"}))}!function(t){e.bookService=new l.BookService(t.getBooksList,t.getBookSpecifications),e.customerService=new d.CustomerService(t.getCustomersList),e.cancelSaleService=new u.CancelSaleService(t.getCancaledSales),e.rentService=new h.RentService(t.getRents),e.saleService=new m.SaleService(t.getSalesList,t.getSaleCart),e.stockService=new p.StockService(t.getStocksList),console.log("Services intiliazed."),e.customerService.addCustomer(new r.Customer(1,"","","")),e.customerService.addCustomer(new r.Customer(2,"","","")),e.stockService.addStock("123-45","A45-52",10),e.stockService.addStock("123-46","A45-52",10)}(k),e.bookService.initializeBooksDataMock(),S("addBookMenuItem","addBookSection"),S("showBooksMenuItem","listBooksSection"),S("addCustomerMenuItem","addCustomerSection"),S("addStockMenuItem","addStockSection"),S("saleBookMenuItem","saleBookSection");const b=document.getElementById("add-book-form");null!=b&&(b.onsubmit=()=>{const t=new FormData(b),o=t.get("bookTitle"),s=t.get("bookAuthor"),i=t.get("bookIsbn"),r=t.get("bookPublishYear"),c=t.get("bookPages"),l=t.get("bookPrice"),u=new Date,d=new Date("Dec 31, 9999 23:59:59"),h=new a.BookSpecification(i,l,u,d),m=new n.Book(i,o,s,r,c,h);return e.bookService.addBookMock(m),alert(m.isbn+" numaralı kitap Ekleme İşlemi Başarı İle Tamamlanmıştır."),b.reset(),!1});const g=document.getElementById("add-stock-form");g&&(g.onsubmit=()=>{const t=new FormData(g),o=t.get("bookIsbnForAddStock"),s=t.get("stockQuantity"),i=t.get("shelfNumber"),n=new c.Stock(o,s,i);return k.getBooksList.some((t=>t.isbn==o)),alert(o+" isbn numaralı kitaptan, "+s+" kadar sisteme stok eklenmiştir."),e.stockService.addStockMock(n),g.reset(),!1});const _=document.getElementById("add-customer-form");_&&(_.onsubmit=()=>s(void 0,void 0,void 0,(function*(){const t=new FormData(_),o=t.get("customerName"),s=t.get("customerSurname"),i=t.get("customerPhoneNumber"),n=new r.Customer(e.customerService.getNewCustomerId(),o,s,i);return yield e.customerService.addCustomerMock(n),alert("Müşteri Ekleme İşlemi Başarı İle Tamamlanmıştır. "),_.reset(),!1})));const f=document.getElementById("sale-book-form");f&&(f.onsubmit=()=>{const t=new FormData(f),o=t.get("isbnForSale"),s=e.bookService.getBook(o),i=parseInt(t.get("customerIdForSale")),n=e.customerService.isValidCustomer(i),a=parseInt(t.get("quantityForSale")),r=e.stockService.getStock(o);try{return s?r?r.quantity>=a?n?e.saleService.addBookToCart(s,a,i):alert(i+" numaralı müşteri kayıtlı değildir."):alert(a+" kadar kitap dükkanda mevcut değildir."):alert(`Dükkanda ${o} numaralı kitabın stoğu mevcut değildir.`):alert(o+" numaralı kitap yoktur."),f.reset(),!1}catch(t){alert(t)}}),document.getElementById("btnBuy").addEventListener("click",(()=>{0===e.saleService.saleCart.bookAndQuantityMap.size?alert("Sepette ürün yok. Lütfen önce ürün ekleyiniz"):e.saleService.cartToSale()})),document.getElementById("showBooksMenuItem").addEventListener("click",(()=>{e.bookService.initializeBooksDataMock()}))},946:function(t,e,o){var s=this&&this.__awaiter||function(t,e,o,s){return new(o||(o=Promise))((function(i,n){function a(t){try{c(s.next(t))}catch(t){n(t)}}function r(t){try{c(s.throw(t))}catch(t){n(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(a,r)}c((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.BookService=void 0;const i=o(607);e.BookService=class{constructor(t,e){this._bookList=t,this._bookSpecList=e}get bookList(){return this._bookList}set bookList(t){this._bookList=t}get bookSpecList(){return this._bookSpecList}set bookSpecList(t){this._bookSpecList=t}getBook(t){return this.bookList.find((e=>e.isbn===t))}addBook(t){try{this.bookList.push(t),this._bookSpecList.push(t.bookSpec)}catch(t){console.log("Kitap eklenirken bir hata meydana geldi.")}}isValidBook(t){const e=this.getBook(t);return this.bookList.includes(e)}initializeBooksDataMock(){return s(this,void 0,void 0,(function*(){try{const t=yield fetch("http://localhost:3002/api/books",{method:"GET",headers:{Accept:"application/json"}});if(!t.ok)throw new Error(`Hata oluştu, hata kodu: ${t.status} `);const e=yield t.json(),o=JSON.parse(JSON.stringify(e,null,4));this.bookList=o,this.listBooks()}catch(t){console.error(t)}}))}listBooks(){const t=document.getElementById("listBooks");if(t){let e,o;for(;t.lastChild&&t.children.length>1;)t.removeChild(t.lastChild);this.bookList.forEach((s=>{e=document.createElement("div"),e.className="row-list-book",o=document.createElement("div"),o.className="column-list-book",o.textContent=s.isbn.toString(),e.appendChild(o),o=document.createElement("div"),o.className="column-list-book",o.textContent=s.name.toString(),e.appendChild(o),o=document.createElement("div"),o.className="column-list-book",o.textContent=s.author.toString(),e.appendChild(o),o=document.createElement("div"),o.className="column-list-book",o.textContent=i.stockService.getStockQuantity(s.isbn).toString(),e.appendChild(o),o=document.createElement("div"),o.className="column-list-book",o.textContent=s.bookSpec.price.toString()+" ₺",e.appendChild(o),t.appendChild(e)}))}}addBookMock(t){return s(this,void 0,void 0,(function*(){try{const e=yield fetch("http://localhost:3002/api/books/",{method:"POST",body:JSON.stringify({isbn:t.isbn,name:t.name,author:t.author,pages:t.pages,publishYear:t.publishYear}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(!e.ok)throw new Error(`Hata oluştu, hata kodu: ${e.status} `);const o=yield e.json();console.log(o)}catch(t){console.log("Hata Oluştu.")}}))}}},609:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.CancelSaleService=void 0,e.CancelSaleService=class{constructor(t){this._cancelledSalesList=t}get cancelledSalesList(){return this._cancelledSalesList}set cancelledSalesList(t){this._cancelledSalesList=t}cancelSale(t){this.cancelledSalesList.push(t);let e=this.calculateRefund(t);t.refund=e}calculateRefund(t){let e;return e=this.calculateDiffHours(t.canceledDateTime,t.sale.operationDateTime)>24?.75*t.sale.total:t.sale.total,e}calculateDiffHours(t,e){let o=t.getTime()-e.getTime();return Math.floor(o/1e3/60/60)}}},709:function(t,e){var o=this&&this.__awaiter||function(t,e,o,s){return new(o||(o=Promise))((function(i,n){function a(t){try{c(s.next(t))}catch(t){n(t)}}function r(t){try{c(s.throw(t))}catch(t){n(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(a,r)}c((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.CustomerService=void 0,e.CustomerService=class{constructor(t){this.customerApi="http://localhost:3002/api/customers/",this._customerList=t}get customerList(){return this._customerList}set customerList(t){this._customerList=t}addCustomer(t){this.customerList.push(t)}getNewCustomerId(){let t=0;return this.customerList.length>0&&(t=this.customerList.at(this.customerList.length-1).id),t+=1,t}getCustomerInfo(t){return this.customerList.find((e=>e.id===t))||void 0}isValidCustomer(t){return!!this.customerList.some((e=>e.id===t))}addCustomerMock(t){return o(this,void 0,void 0,(function*(){try{const e=yield fetch(this.customerApi,{method:"POST",body:JSON.stringify({id:t.id,name:t.name,surName:t.surName,phoneNumber:t.phoneNumber}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(!e.ok)throw new Error(`Hata oluştu, hata kodu: ${e.status} `);const o=yield e.json();console.log(o)}catch(t){console.log("Hata Oluştu.")}}))}}},148:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.RentService=void 0,e.RentService=class{constructor(t){this._rentList=t,this.refundPercent=.75}get rentList(){return this._rentList}set rentList(t){this._rentList=t}addRent(t){this.rentList.push(t)}calculateTotal(t){t.bookAndQuantityMap;let e=0;for(let o of t.bookAndQuantityMap)e+=o[0].bookSpec.price*o[1];return e}generateRentNumber(t){let e=new Date;return"R"+e.getDay().toString+e.getMonth().toString+e.getFullYear().toString+e.getHours().toString+e.getMinutes().toString+e.getSeconds().toString+t.toString}calculateRefund(t){t.refund=t.total*this.refundPercent}}},478:function(t,e,o){var s=this&&this.__awaiter||function(t,e,o,s){return new(o||(o=Promise))((function(i,n){function a(t){try{c(s.next(t))}catch(t){n(t)}}function r(t){try{c(s.throw(t))}catch(t){n(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(a,r)}c((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.SaleService=void 0;const i=o(607),n=o(354),a=o(51);e.SaleService=class{constructor(t,e){this.addSaleApi="http://localhost:3002/api/sales/",this._saleList=t,this._saleCart=e}get saleList(){return this._saleList}set saleList(t){this._saleList=t}get saleCart(){return this._saleCart}set saleCart(t){this._saleCart=t}addSale(t){this.saleList.push(t)}calculateTotal(t){let e=0;for(let o of t.bookAndQuantityMap.entries())e+=o[0].bookSpec.price*o[1];return e}generateSaleNumber(t){let e=new Date;return"S"+e.getDay().toString()+e.getMonth().toString()+e.getFullYear().toString()+e.getHours().toString()+e.getMinutes().toString()+e.getSeconds().toString()+t.toString()}getSale(t){let e=this.saleList.find((e=>e.operationNumber===t));if(e)return e;throw new Error}removeSale(t){let e=this.saleList.indexOf(t);this.saleList.splice(e,1)}addBookToCart(t,e,o){if(0===this.saleCart.bookAndQuantityMap.size)this.saleCart.customerId=o;else if(this.saleCart.bookAndQuantityMap.size>0&&this.saleCart.customerId!==o)return alert("Farklı müşteriye kitap satılmaya çalışılıyor. Lütfen tek müşteri için işlem yapınız"),!1;this.saleCart.bookAndQuantityMap.set(t,e),this.updateSaleCart()}updateSaleCart(){const t=document.getElementById("saleCart"),e=document.getElementById("totalAmountTl");if(t){let o,s,i=0;for(;t.lastChild&&t.children.length>1;)t.removeChild(t.lastChild);e.textContent="";for(let t=0;t<this.saleCart.bookAndQuantityMap.size;t++){o=document.createElement("div"),o.className="row-cart";for(let t of this.saleCart.bookAndQuantityMap.entries())s=document.createElement("div"),s.className="column-cart",s.textContent=this.saleCart.customerId.toString(),o.appendChild(s),s=document.createElement("div"),s.className="column-cart",s.textContent=t[0].name,o.appendChild(s),s=document.createElement("div"),s.className="column-cart",s.textContent=t[1].toString(),o.appendChild(s),s=document.createElement("div"),s.className="column-cart",s.textContent=(t[0].bookSpec.price*t[1]).toString(),o.appendChild(s)}if(o&&e){for(let t of this.saleCart.bookAndQuantityMap)i+=t[0].bookSpec.price*t[1];t.appendChild(o),e.textContent=i.toString()+" TL"}}}cartToSale(){let t=this.saleCart,e=new n.Sale;e.bookAndQuantityMap=t.bookAndQuantityMap,e.customerId=t.customerId,e.operationNumber=this.generateSaleNumber(t.customerId),e.operationDateTime=new Date,e.total=this.calculateTotal(e);for(let t of e.bookAndQuantityMap)i.stockService.increaseStock(t[0].isbn,-t[1]);this.addSaleMock(e),this.saleCart=new a.SaleCart,this.updateSaleCart()}addSaleMock(t){return s(this,void 0,void 0,(function*(){try{const e=yield fetch(this.addSaleApi,{method:"POST",body:JSON.stringify({bookAndQuantity:t.bookAndQuantityMap,customerId:t.customerId,operationDateTime:t.operationDateTime,operationNumber:t.operationNumber,total:t.total}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(!e.ok)throw new Error(`Hata oluştu, hata kodu: ${e.status} `);const o=yield e.json();console.log(o),alert(o.message+" "+o.saleNumber)}catch(t){console.log("Hata Oluştu.")}}))}}},214:function(t,e,o){var s=this&&this.__awaiter||function(t,e,o,s){return new(o||(o=Promise))((function(i,n){function a(t){try{c(s.next(t))}catch(t){n(t)}}function r(t){try{c(s.throw(t))}catch(t){n(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(a,r)}c((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.StockService=void 0;const i=o(72);e.StockService=class{constructor(t){this._stockList=t}get stockList(){return this._stockList}set stockList(t){this._stockList=t}addStock(t,e,o){try{let s=new i.Stock(t,o,e);return this.stockList.push(s),!0}catch(t){return console.error(t),!1}}increaseStock(t,e){let o=this.getStock(t);return!!o&&(o.quantity=o.quantity+e,!0)}getStock(t){let e=this.stockList.find((e=>e.isbn===t));if(e)return e}getStockQuantity(t){let e=this.getStock(t);return e?e.quantity:0}addStockMock(t){!function(t){s(this,void 0,void 0,(function*(){try{const e=yield fetch("http://localhost:3002/api/stocks/"+t.isbn,{method:"POST",body:JSON.stringify({isbn:t.isbn,quantity:t.quantity}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(!e.ok)throw new Error(`Hata oluştu, hata kodu: ${e.status} `);const o=yield e.json();console.log(o)}catch(t){console.log("Hata Oluştu.")}}))}(t)}}}},e={};!function o(s){var i=e[s];if(void 0!==i)return i.exports;var n=e[s]={exports:{}};return t[s].call(n.exports,n,n.exports,o),n.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LENBR2pERyxRQUFTLENBQUMsR0FPWCxPQUhBRSxFQUFvQkwsR0FBVU0sS0FBS0YsRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0osR0FHcEVLLEVBQU9ELE9BQ2YsQ0NuQjBCSixDQUFvQixJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVudC1hLWJvb2stdHMvLi9zcmMvZGIvZGF0YWJhc2UudHMiLCJ3ZWJwYWNrOi8vcmVudC1hLWJvb2stdHMvLi9zcmMvZG9tYWluL2Jvb2stc3BlY2lmaWNhdGlvbi50cyIsIndlYnBhY2s6Ly9yZW50LWEtYm9vay10cy8uL3NyYy9kb21haW4vYm9vay50cyIsIndlYnBhY2s6Ly9yZW50LWEtYm9vay10cy8uL3NyYy9kb21haW4vY3VzdG9tZXIudHMiLCJ3ZWJwYWNrOi8vcmVudC1hLWJvb2stdHMvLi9zcmMvZG9tYWluL3NhbGUtY2FydC50cyIsIndlYnBhY2s6Ly9yZW50LWEtYm9vay10cy8uL3NyYy9kb21haW4vc2FsZS50cyIsIndlYnBhY2s6Ly9yZW50LWEtYm9vay10cy8uL3NyYy9kb21haW4vc3RvY2sudHMiLCJ3ZWJwYWNrOi8vcmVudC1hLWJvb2stdHMvLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vcmVudC1hLWJvb2stdHMvLi9zcmMvc2VydmljZS9ib29rLXNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vcmVudC1hLWJvb2stdHMvLi9zcmMvc2VydmljZS9jYW5jYWwtc2FsZS1zZXJ2aWNlLnRzIiwid2VicGFjazovL3JlbnQtYS1ib29rLXRzLy4vc3JjL3NlcnZpY2UvY3VzdG9tZXItc2VydmljZS50cyIsIndlYnBhY2s6Ly9yZW50LWEtYm9vay10cy8uL3NyYy9zZXJ2aWNlL3JlbnQtc2VydmljZS50cyIsIndlYnBhY2s6Ly9yZW50LWEtYm9vay10cy8uL3NyYy9zZXJ2aWNlL3NhbGUtc2VydmljZS50cyIsIndlYnBhY2s6Ly9yZW50LWEtYm9vay10cy8uL3NyYy9zZXJ2aWNlL3N0b2NrLXNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vcmVudC1hLWJvb2stdHMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vcmVudC1hLWJvb2stdHMvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJvb2sgfSBmcm9tIFwiLi4vZG9tYWluL2Jvb2tcIjtcbmltcG9ydCB7IEJvb2tTcGVjaWZpY2F0aW9uIH0gZnJvbSBcIi4uL2RvbWFpbi9ib29rLXNwZWNpZmljYXRpb25cIjtcbmltcG9ydCB7IENhbmNlbFNhbGUgfSBmcm9tIFwiLi4vZG9tYWluL2NhbmNhbC1zYWxlXCI7XG5pbXBvcnQgeyBDdXN0b21lciB9IGZyb20gXCIuLi9kb21haW4vY3VzdG9tZXJcIjtcbmltcG9ydCB7IFJlbnQgfSBmcm9tIFwiLi4vZG9tYWluL3JlbnRcIjtcbmltcG9ydCB7IFNhbGUgfSBmcm9tIFwiLi4vZG9tYWluL3NhbGVcIjtcbmltcG9ydCB7IFNhbGVDYXJ0IH0gZnJvbSBcIi4uL2RvbWFpbi9zYWxlLWNhcnRcIjtcbmltcG9ydCB7IFN0b2NrIH0gZnJvbSBcIi4uL2RvbWFpbi9zdG9ja1wiO1xuXG5leHBvcnQgY2xhc3MgRGF0YUJhc2Uge1xuXG4gICAgIHByaXZhdGUgX2Jvb2tzOiBBcnJheTxCb29rPjsvL1xuICAgICBwcml2YXRlIF9zdG9ja3M6IEFycmF5PFN0b2NrPjtcbiAgICAgcHJpdmF0ZSBfY3VzdG9tZXJzOiBBcnJheTxDdXN0b21lcj47Ly9cbiAgICAgcHJpdmF0ZSBfc2FsZXM6IEFycmF5PFNhbGU+Oy8vXG4gICAgIHByaXZhdGUgX3JlbnRzOiBBcnJheTxSZW50PjtcbiAgICAgcHJpdmF0ZSBfYm9va1NwZWNpZmljYXRpb25zOiBBcnJheTxCb29rU3BlY2lmaWNhdGlvbj47XG4gICAgIHByaXZhdGUgX2NhbmNlbFNhbGVzOiBBcnJheTxDYW5jZWxTYWxlPjsvL1xuICAgICBwcml2YXRlIF9zYWxlQ2FydDogU2FsZUNhcnQ7XG5cbiAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgICAgdGhpcy5fYm9va3MgPSBuZXcgQXJyYXk8Qm9vaz4oKTtcbiAgICAgICAgICB0aGlzLl9zdG9ja3MgPSBuZXcgQXJyYXk8U3RvY2s+KCk7XG4gICAgICAgICAgdGhpcy5fY3VzdG9tZXJzID0gbmV3IEFycmF5PEN1c3RvbWVyPigpO1xuICAgICAgICAgIHRoaXMuX3NhbGVzID0gbmV3IEFycmF5PFNhbGU+KCk7XG4gICAgICAgICAgdGhpcy5fcmVudHMgPSBuZXcgQXJyYXk8UmVudD4oKTtcbiAgICAgICAgICB0aGlzLl9ib29rU3BlY2lmaWNhdGlvbnMgPSBuZXcgQXJyYXk8Qm9va1NwZWNpZmljYXRpb24+KCk7XG4gICAgICAgICAgdGhpcy5fY2FuY2VsU2FsZXMgPSBuZXcgQXJyYXk8Q2FuY2VsU2FsZT4oKTtcbiAgICAgICAgICB0aGlzLl9zYWxlQ2FydCA9IG5ldyBTYWxlQ2FydDtcblxuICAgICB9XG5cbiAgICAgLyoqXG4gICAgICAqIEdldHRlciBib29rc1xuICAgICAgKiBAcmV0dXJuIHtBcnJheTxCb29rPn1cbiAgICAgICovXG4gICAgIHB1YmxpYyBnZXQgZ2V0Qm9va3NMaXN0KCk6IEFycmF5PEJvb2s+IHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fYm9va3M7XG4gICAgIH1cblxuICAgICAvKipcbiAgICAgICogR2V0dGVyIHN0b2Nrc1xuICAgICAgKiBAcmV0dXJuIHtBcnJheTxTdG9jaz59XG4gICAgICAqL1xuICAgICBwdWJsaWMgZ2V0IGdldFN0b2Nrc0xpc3QoKTogQXJyYXk8U3RvY2s+IHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fc3RvY2tzO1xuICAgICB9XG5cbiAgICAgLyoqXG4gICAgICAqIEdldHRlciBjdXN0b21lcnNcbiAgICAgICogQHJldHVybiB7QXJyYXk8Q3VzdG9tZXI+fVxuICAgICAgKi9cbiAgICAgcHVibGljIGdldCBnZXRDdXN0b21lcnNMaXN0KCk6IEFycmF5PEN1c3RvbWVyPiB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2N1c3RvbWVycztcbiAgICAgfVxuXG4gICAgIC8qKlxuICAgICAgKiBHZXR0ZXIgc2FsZXNcbiAgICAgICogQHJldHVybiB7QXJyYXk8U2FsZT59XG4gICAgICAqL1xuICAgICBwdWJsaWMgZ2V0IGdldFNhbGVzTGlzdCgpOiBBcnJheTxTYWxlPiB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX3NhbGVzO1xuICAgICB9XG5cbiAgICAgLyoqXG4gICAgICAqIEdldHRlciByZW50c1xuICAgICAgKiBAcmV0dXJuIHtBcnJheTxSZW50Pn1cbiAgICAgICovXG4gICAgIHB1YmxpYyBnZXQgZ2V0UmVudHMoKTogQXJyYXk8UmVudD4ge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9yZW50cztcbiAgICAgfVxuXG4gICAgIC8qKlxuICAgICAgKiBHZXR0ZXIgYm9va1NwZWNpZmljYXRpb25zXG4gICAgICAqIEByZXR1cm4ge0FycmF5PEJvb2tTcGVjaWZpY2F0aW9uPn1cbiAgICAgICovXG4gICAgIHB1YmxpYyBnZXQgZ2V0Qm9va1NwZWNpZmljYXRpb25zKCk6IEFycmF5PEJvb2tTcGVjaWZpY2F0aW9uPiB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2Jvb2tTcGVjaWZpY2F0aW9ucztcbiAgICAgfVxuXG4gICAgIC8qKlxuICAgICAgKiBHZXR0ZXIgY2FuY2VsU2FsZXNcbiAgICAgICogQHJldHVybiB7QXJyYXk8Q2FuY2VsU2FsZT59XG4gICAgICAqL1xuICAgICBwdWJsaWMgZ2V0IGdldENhbmNhbGVkU2FsZXMoKTogQXJyYXk8Q2FuY2VsU2FsZT4ge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9jYW5jZWxTYWxlcztcbiAgICAgfVxuXG4gICAgIC8qKlxuICAgICAgKiBHZXR0ZXIgc2FsZUNhcnRcbiAgICAgICogQHJldHVybiB7QXJyYXk8U2FsZUNhcnQ+fVxuICAgICAgKi9cbiAgICAgcHVibGljIGdldCBnZXRTYWxlQ2FydCgpOiBTYWxlQ2FydCB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX3NhbGVDYXJ0O1xuICAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXR0ZXIgc2FsZUNhcnRcbiAgICAgKiBAcGFyYW0ge1NhbGVDYXJ0fSB2YWx1ZVxuICAgICAqL1xuXHRwdWJsaWMgc2V0IHNldFNhbGVDYXJ0KHZhbHVlOiBTYWxlQ2FydCkge1xuXHRcdHRoaXMuX3NhbGVDYXJ0ID0gdmFsdWU7XG5cdH1cblxuXG59XG4iLCJleHBvcnQgY2xhc3MgQm9va1NwZWNpZmljYXRpb24ge1xuICAgIHByaXZhdGUgX2lzYm46IHN0cmluZztcbiAgICBwcml2YXRlIF9wcmljZTogbnVtYmVyO1xuICAgIHByaXZhdGUgX3N0YXJ0RGF0ZTogRGF0ZTtcbiAgICBwcml2YXRlIF9lbmREYXRlOiBEYXRlO1xuXG4gICAgY29uc3RydWN0b3IoaXNibjogc3RyaW5nLCBwcmljZTogbnVtYmVyLCBzdGFydERhdGU6IERhdGUsIGVuZERhdGU6IERhdGUpIHtcbiAgICAgICAgdGhpcy5faXNibiA9IGlzYm47XG4gICAgICAgIHRoaXMuX3ByaWNlID0gcHJpY2U7XG4gICAgICAgIHRoaXMuX3N0YXJ0RGF0ZSA9IHN0YXJ0RGF0ZTtcbiAgICAgICAgdGhpcy5fZW5kRGF0ZSA9IGVuZERhdGU7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBHZXR0ZXIgaXNiblxuICAgICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICAgKi9cblx0cHVibGljIGdldCBpc2JuKCk6IHN0cmluZyB7XG5cdFx0cmV0dXJuIHRoaXMuX2lzYm47XG5cdH1cblxuICAgIC8qKlxuICAgICAqIEdldHRlciBwcmljZVxuICAgICAqIEByZXR1cm4ge251bWJlcn1cbiAgICAgKi9cblx0cHVibGljIGdldCBwcmljZSgpOiBudW1iZXIge1xuXHRcdHJldHVybiB0aGlzLl9wcmljZTtcblx0fVxuXG4gICAgLyoqXG4gICAgICogR2V0dGVyIHN0YXJ0RGF0ZVxuICAgICAqIEByZXR1cm4ge0RhdGV9XG4gICAgICovXG5cdHB1YmxpYyBnZXQgc3RhcnREYXRlKCk6IERhdGUge1xuXHRcdHJldHVybiB0aGlzLl9zdGFydERhdGU7XG5cdH1cblxuICAgIC8qKlxuICAgICAqIEdldHRlciBlbmREYXRlXG4gICAgICogQHJldHVybiB7RGF0ZX1cbiAgICAgKi9cblx0cHVibGljIGdldCBlbmREYXRlKCk6IERhdGUge1xuXHRcdHJldHVybiB0aGlzLl9lbmREYXRlO1xuXHR9XG5cbiAgICAvKipcbiAgICAgKiBTZXR0ZXIgaXNiblxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgICAqL1xuXHRwdWJsaWMgc2V0IGlzYm4odmFsdWU6IHN0cmluZykge1xuXHRcdHRoaXMuX2lzYm4gPSB2YWx1ZTtcblx0fVxuXG4gICAgLyoqXG4gICAgICogU2V0dGVyIHByaWNlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gICAgICovXG5cdHB1YmxpYyBzZXQgcHJpY2UodmFsdWU6IG51bWJlcikge1xuXHRcdHRoaXMuX3ByaWNlID0gdmFsdWU7XG5cdH1cblxuICAgIC8qKlxuICAgICAqIFNldHRlciBzdGFydERhdGVcbiAgICAgKiBAcGFyYW0ge0RhdGV9IHZhbHVlXG4gICAgICovXG5cdHB1YmxpYyBzZXQgc3RhcnREYXRlKHZhbHVlOiBEYXRlKSB7XG5cdFx0dGhpcy5fc3RhcnREYXRlID0gdmFsdWU7XG5cdH1cblxuICAgIC8qKlxuICAgICAqIFNldHRlciBlbmREYXRlXG4gICAgICogQHBhcmFtIHtEYXRlfSB2YWx1ZVxuICAgICAqL1xuXHRwdWJsaWMgc2V0IGVuZERhdGUodmFsdWU6IERhdGUpIHtcblx0XHR0aGlzLl9lbmREYXRlID0gdmFsdWU7XG5cdH1cbiAgICBcblxuICAgIFxufSIsImltcG9ydCB7IEJvb2tTcGVjaWZpY2F0aW9uIH0gZnJvbSBcIi4vYm9vay1zcGVjaWZpY2F0aW9uXCI7XG5cbmV4cG9ydCBjbGFzcyBCb29rIHtcbiAgcHJpdmF0ZSBfaXNibjogc3RyaW5nO1xuICBwcml2YXRlIF9uYW1lOiBzdHJpbmc7XG4gIHByaXZhdGUgX2F1dGhvcjogc3RyaW5nO1xuICBwcml2YXRlIF9wdWJsaXNoWWVhcjogc3RyaW5nO1xuICBwcml2YXRlIF9wYWdlczogbnVtYmVyO1xuICBwcml2YXRlIF9ib29rU3BlYzogQm9va1NwZWNpZmljYXRpb247XG5cbiAgY29uc3RydWN0b3IoaXNibjogc3RyaW5nLCBuYW1lOiBzdHJpbmcsIGF1dGhvcjogc3RyaW5nLCBwdWJsaXNoWWVhcjogc3RyaW5nLCBwYWdlczogbnVtYmVyLCBib29rU3BlYzogQm9va1NwZWNpZmljYXRpb24pIHtcbiAgICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgICB0aGlzLl9hdXRob3IgPSBhdXRob3I7XG4gICAgdGhpcy5faXNibiA9IGlzYm47XG4gICAgdGhpcy5fcHVibGlzaFllYXIgPSBwdWJsaXNoWWVhcjtcbiAgICB0aGlzLl9wYWdlcyA9IHBhZ2VzO1xuICAgIHRoaXMuX2Jvb2tTcGVjID0gYm9va1NwZWM7XG4gIH1cblxuXG4gICAgLyoqXG4gICAgICogR2V0dGVyIGlzYm5cbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAgICovXG5cdHB1YmxpYyBnZXQgaXNibigpOiBzdHJpbmcge1xuXHRcdHJldHVybiB0aGlzLl9pc2JuO1xuXHR9XG5cbiAgICAvKipcbiAgICAgKiBHZXR0ZXIgbmFtZVxuICAgICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICAgKi9cblx0cHVibGljIGdldCBuYW1lKCk6IHN0cmluZyB7XG5cdFx0cmV0dXJuIHRoaXMuX25hbWU7XG5cdH1cblxuICAgIC8qKlxuICAgICAqIEdldHRlciBhdXRob3JcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAgICovXG5cdHB1YmxpYyBnZXQgYXV0aG9yKCk6IHN0cmluZyB7XG5cdFx0cmV0dXJuIHRoaXMuX2F1dGhvcjtcblx0fVxuXG4gICAgLyoqXG4gICAgICogR2V0dGVyIHB1Ymxpc2hZZWFyXG4gICAgICogQHJldHVybiB7c3RyaW5nfVxuICAgICAqL1xuXHRwdWJsaWMgZ2V0IHB1Ymxpc2hZZWFyKCk6IHN0cmluZyB7XG5cdFx0cmV0dXJuIHRoaXMuX3B1Ymxpc2hZZWFyO1xuXHR9XG5cbiAgICAvKipcbiAgICAgKiBHZXR0ZXIgcGFnZXNcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAgICovXG5cdHB1YmxpYyBnZXQgcGFnZXMoKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gdGhpcy5fcGFnZXM7XG5cdH1cblxuICAgIC8qKlxuICAgICAqIEdldHRlciBib29rU3BlY1xuICAgICAqIEByZXR1cm4ge0Jvb2tTcGVjaWZpY2F0aW9ufVxuICAgICAqL1xuXHRwdWJsaWMgZ2V0IGJvb2tTcGVjKCk6IEJvb2tTcGVjaWZpY2F0aW9uIHtcblx0XHRyZXR1cm4gdGhpcy5fYm9va1NwZWM7XG5cdH1cblxuICAgIC8qKlxuICAgICAqIFNldHRlciBpc2JuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gICAgICovXG5cdHB1YmxpYyBzZXQgaXNibih2YWx1ZTogc3RyaW5nKSB7XG5cdFx0dGhpcy5faXNibiA9IHZhbHVlO1xuXHR9XG5cbiAgICAvKipcbiAgICAgKiBTZXR0ZXIgbmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgICAqL1xuXHRwdWJsaWMgc2V0IG5hbWUodmFsdWU6IHN0cmluZykge1xuXHRcdHRoaXMuX25hbWUgPSB2YWx1ZTtcblx0fVxuXG4gICAgLyoqXG4gICAgICogU2V0dGVyIGF1dGhvclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgICAqL1xuXHRwdWJsaWMgc2V0IGF1dGhvcih2YWx1ZTogc3RyaW5nKSB7XG5cdFx0dGhpcy5fYXV0aG9yID0gdmFsdWU7XG5cdH1cblxuICAgIC8qKlxuICAgICAqIFNldHRlciBwdWJsaXNoWWVhclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgICAqL1xuXHRwdWJsaWMgc2V0IHB1Ymxpc2hZZWFyKHZhbHVlOiBzdHJpbmcpIHtcblx0XHR0aGlzLl9wdWJsaXNoWWVhciA9IHZhbHVlO1xuXHR9XG5cbiAgICAvKipcbiAgICAgKiBTZXR0ZXIgcGFnZXNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAgICAgKi9cblx0cHVibGljIHNldCBwYWdlcyh2YWx1ZTogbnVtYmVyKSB7XG5cdFx0dGhpcy5fcGFnZXMgPSB2YWx1ZTtcblx0fVxuXG4gICAgLyoqXG4gICAgICogU2V0dGVyIGJvb2tTcGVjXG4gICAgICogQHBhcmFtIHtCb29rU3BlY2lmaWNhdGlvbn0gdmFsdWVcbiAgICAgKi9cblx0cHVibGljIHNldCBib29rU3BlYyh2YWx1ZTogQm9va1NwZWNpZmljYXRpb24pIHtcblx0XHR0aGlzLl9ib29rU3BlYyA9IHZhbHVlO1xuXHR9XG4gIFxuXG59XG4iLCJleHBvcnQgY2xhc3MgQ3VzdG9tZXIge1xuICBwcml2YXRlIF9pZDogbnVtYmVyO1xuICBwcml2YXRlIF9uYW1lOiBzdHJpbmc7XG4gIHByaXZhdGUgX3N1ck5hbWU6IHN0cmluZztcbiAgcHJpdmF0ZSBfcGhvbmVOdW1iZXI6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihpZDogbnVtYmVyLCBuYW1lOiBzdHJpbmcsIHN1ck5hbWU6IHN0cmluZywgcGhvbmVOdW1iZXI6IHN0cmluZykge1xuICAgIHRoaXMuX2lkID0gaWQ7XG4gICAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gICAgdGhpcy5fc3VyTmFtZSA9IHN1ck5hbWU7XG4gICAgdGhpcy5fcGhvbmVOdW1iZXIgPSBwaG9uZU51bWJlcjtcbiAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBHZXR0ZXIgaWRcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAgICovXG5cdHB1YmxpYyBnZXQgaWQoKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gdGhpcy5faWQ7XG5cdH1cblxuICAgIC8qKlxuICAgICAqIEdldHRlciBuYW1lXG4gICAgICogQHJldHVybiB7c3RyaW5nfVxuICAgICAqL1xuXHRwdWJsaWMgZ2V0IG5hbWUoKTogc3RyaW5nIHtcblx0XHRyZXR1cm4gdGhpcy5fbmFtZTtcblx0fVxuXG4gICAgLyoqXG4gICAgICogR2V0dGVyIHN1ck5hbWVcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAgICovXG5cdHB1YmxpYyBnZXQgc3VyTmFtZSgpOiBzdHJpbmcge1xuXHRcdHJldHVybiB0aGlzLl9zdXJOYW1lO1xuXHR9XG5cbiAgICAvKipcbiAgICAgKiBHZXR0ZXIgcGhvbmVOdW1iZXJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAgICovXG5cdHB1YmxpYyBnZXQgcGhvbmVOdW1iZXIoKTogc3RyaW5nIHtcblx0XHRyZXR1cm4gdGhpcy5fcGhvbmVOdW1iZXI7XG5cdH1cblxuICAgIC8qKlxuICAgICAqIFNldHRlciBpZFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICAgICAqL1xuXHRwdWJsaWMgc2V0IGlkKHZhbHVlOiBudW1iZXIpIHtcblx0XHR0aGlzLl9pZCA9IHZhbHVlO1xuXHR9XG5cbiAgICAvKipcbiAgICAgKiBTZXR0ZXIgbmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgICAqL1xuXHRwdWJsaWMgc2V0IG5hbWUodmFsdWU6IHN0cmluZykge1xuXHRcdHRoaXMuX25hbWUgPSB2YWx1ZTtcblx0fVxuXG4gICAgLyoqXG4gICAgICogU2V0dGVyIHN1ck5hbWVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICAgKi9cblx0cHVibGljIHNldCBzdXJOYW1lKHZhbHVlOiBzdHJpbmcpIHtcblx0XHR0aGlzLl9zdXJOYW1lID0gdmFsdWU7XG5cdH1cblxuICAgIC8qKlxuICAgICAqIFNldHRlciBwaG9uZU51bWJlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgICAqL1xuXHRwdWJsaWMgc2V0IHBob25lTnVtYmVyKHZhbHVlOiBzdHJpbmcpIHtcblx0XHR0aGlzLl9waG9uZU51bWJlciA9IHZhbHVlO1xuXHR9XG5cblxufVxuIiwiaW1wb3J0IHsgQm9vayB9IGZyb20gXCIuL2Jvb2tcIjtcblxuZXhwb3J0IGNsYXNzIFNhbGVDYXJ0IHtcbiAgICBjdXN0b21lcklkITogbnVtYmVyO1xuICAgIGJvb2tBbmRRdWFudGl0eU1hcDogTWFwPEJvb2ssIG51bWJlcj47XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5ib29rQW5kUXVhbnRpdHlNYXAgPSBuZXcgTWFwPEJvb2ssIG51bWJlcj4oKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgQm9vayB9IGZyb20gXCIuL2Jvb2tcIjtcblxuZXhwb3J0IGNsYXNzIFNhbGUge1xuXG4gICAgcHJpdmF0ZSBfYm9va0FuZFF1YW50aXR5TWFwPyA9IG5ldyBNYXA8Qm9vaywgbnVtYmVyPigpO1xuICAgIHByaXZhdGUgX2N1c3RvbWVySWQ/OiBudW1iZXI7XG4gICAgcHJpdmF0ZSBfb3BlcmF0aW9uRGF0ZVRpbWU/OiBEYXRlO1xuICAgIHByaXZhdGUgX29wZXJhdGlvbk51bWJlcj86IHN0cmluZztcbiAgICBwcml2YXRlIF90b3RhbD86IG51bWJlcjtcblxuXG4gICAgY29uc3RydWN0b3IoYm9va0FuZFF1YW50aXR5TWFwPzogTWFwPEJvb2ssIG51bWJlcj4sIG9wZXJhdGlvbkRhdGVUaW1lPzogRGF0ZSwgY3VzdG9tZXJJZD86IG51bWJlciwgb3BlcmF0aW9uTnVtYmVyPzogc3RyaW5nLCB0b3RhbD86IG51bWJlcikge1xuICAgICAgICB0aGlzLl9ib29rQW5kUXVhbnRpdHlNYXAgPSBib29rQW5kUXVhbnRpdHlNYXA7XG4gICAgICAgIHRoaXMuX29wZXJhdGlvbkRhdGVUaW1lID0gb3BlcmF0aW9uRGF0ZVRpbWU7XG4gICAgICAgIHRoaXMuX2N1c3RvbWVySWQgPSBjdXN0b21lcklkO1xuICAgICAgICB0aGlzLl9vcGVyYXRpb25OdW1iZXIgPSBvcGVyYXRpb25OdW1iZXI7XG4gICAgICAgIHRoaXMuX3RvdGFsID0gdG90YWw7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBHZXR0ZXIgYm9va0FuZFF1YW50aXR5TWFwXG4gICAgICogQHJldHVybiB7TWFwPEJvb2ssIG51bWJlcj4oKX1cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IGJvb2tBbmRRdWFudGl0eU1hcCgpOiBNYXA8Qm9vaywgbnVtYmVyPiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ib29rQW5kUXVhbnRpdHlNYXAhO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogR2V0dGVyIG9wZXJhdGlvbkRhdGVUaW1lXG4gICAgICogQHJldHVybiB7RGF0ZX1cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IG9wZXJhdGlvbkRhdGVUaW1lKCk6IERhdGUge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3BlcmF0aW9uRGF0ZVRpbWUhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHRlciBjdXN0b21lcklkXG4gICAgICogQHJldHVybiB7bnVtYmVyfVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgY3VzdG9tZXJJZCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fY3VzdG9tZXJJZCE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0dGVyIG9wZXJhdGlvbk51bWJlclxuICAgICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IG9wZXJhdGlvbk51bWJlcigpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3BlcmF0aW9uTnVtYmVyITtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXR0ZXIgdG90YWxcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAgICovXG4gICAgcHVibGljIGdldCB0b3RhbCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fdG90YWwhO1xuICAgIH1cblxuXG5cbiAgICAvKipcbiAgICAgKiBTZXR0ZXIgYm9va0FuZFF1YW50aXR5TWFwXG4gICAgICogQHBhcmFtIHtNYXB9IHZhbHVlXG4gICAgICovXG4gICAgcHVibGljIHNldCBib29rQW5kUXVhbnRpdHlNYXAodmFsdWU6IE1hcDxCb29rLCBudW1iZXI+KSB7XG4gICAgICAgIHRoaXMuX2Jvb2tBbmRRdWFudGl0eU1hcCA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHRlciBvcGVyYXRpb25EYXRlVGltZVxuICAgICAqIEBwYXJhbSB7RGF0ZX0gdmFsdWVcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0IG9wZXJhdGlvbkRhdGVUaW1lKHZhbHVlOiBEYXRlKSB7XG4gICAgICAgIHRoaXMuX29wZXJhdGlvbkRhdGVUaW1lID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0dGVyIGN1c3RvbWVySWRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0IGN1c3RvbWVySWQodmFsdWU6IG51bWJlcikge1xuICAgICAgICB0aGlzLl9jdXN0b21lcklkID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0dGVyIG9wZXJhdGlvbk51bWJlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgICAqL1xuICAgIHB1YmxpYyBzZXQgb3BlcmF0aW9uTnVtYmVyKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fb3BlcmF0aW9uTnVtYmVyID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0dGVyIHRvdGFsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gICAgICovXG4gICAgcHVibGljIHNldCB0b3RhbCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuX3RvdGFsID0gdmFsdWU7XG4gICAgfVxuXG5cbn0iLCJleHBvcnQgY2xhc3MgU3RvY2sge1xuICAgIHByaXZhdGUgX2lzYm46IHN0cmluZztcbiAgICBwcml2YXRlIF9xdWFudGl0eTogbnVtYmVyO1xuICAgIHByaXZhdGUgX3NoZWxmTnVtYmVyOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3Rvcihpc2JuPzogc3RyaW5nLCBxdWFudGl0eT86IG51bWJlciwgc2hlbGZOdW1iZXI/OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5faXNibiA9IGlzYm4hO1xuICAgICAgICB0aGlzLl9xdWFudGl0eSA9IHF1YW50aXR5ITtcbiAgICAgICAgdGhpcy5fc2hlbGZOdW1iZXIgPSBzaGVsZk51bWJlciE7XG4gICAgfVxuXG5cblxuICAgIC8qKlxuICAgICAqIEdldHRlciBpc2JuXG4gICAgICogQHJldHVybiB7c3RyaW5nfVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgaXNibigpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNibjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXR0ZXIgcXVhbnRpdHlcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAgICovXG4gICAgcHVibGljIGdldCBxdWFudGl0eSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fcXVhbnRpdHk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0dGVyIHNoZWxmTnVtYmVyXG4gICAgICogQHJldHVybiB7c3RyaW5nfVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgc2hlbGZOdW1iZXIoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NoZWxmTnVtYmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHRlciBpc2JuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gICAgICovXG4gICAgcHVibGljIHNldCBpc2JuKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5faXNibiA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHRlciBxdWFudGl0eVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICAgICAqL1xuICAgIHB1YmxpYyBzZXQgcXVhbnRpdHkodmFsdWU6IG51bWJlcikge1xuICAgICAgICB0aGlzLl9xdWFudGl0eSA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHRlciBzaGVsZk51bWJlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgICAqL1xuICAgIHB1YmxpYyBzZXQgc2hlbGZOdW1iZXIodmFsdWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9zaGVsZk51bWJlciA9IHZhbHVlO1xuICAgIH1cblxuXG59IiwiLy8gZXhwb3J0IE5PREVfT1BUSU9OUz0tLW9wZW5zc2wtbGVnYWN5LXByb3ZpZGVyXG5pbXBvcnQgeyBEYXRhQmFzZSB9IGZyb20gXCIuL2RiL2RhdGFiYXNlXCI7XG5pbXBvcnQgeyBCb29rIH0gZnJvbSBcIi4vZG9tYWluL2Jvb2tcIjtcbmltcG9ydCB7IEJvb2tTcGVjaWZpY2F0aW9uIH0gZnJvbSBcIi4vZG9tYWluL2Jvb2stc3BlY2lmaWNhdGlvblwiO1xuaW1wb3J0IHsgQ3VzdG9tZXIgfSBmcm9tIFwiLi9kb21haW4vY3VzdG9tZXJcIjtcbmltcG9ydCB7IFN0b2NrIH0gZnJvbSBcIi4vZG9tYWluL3N0b2NrXCI7XG5pbXBvcnQgeyBCb29rU2VydmljZSB9IGZyb20gXCIuL3NlcnZpY2UvYm9vay1zZXJ2aWNlXCI7XG5pbXBvcnQgeyBDYW5jZWxTYWxlU2VydmljZSB9IGZyb20gXCIuL3NlcnZpY2UvY2FuY2FsLXNhbGUtc2VydmljZVwiO1xuaW1wb3J0IHsgQ3VzdG9tZXJTZXJ2aWNlIH0gZnJvbSBcIi4vc2VydmljZS9jdXN0b21lci1zZXJ2aWNlXCI7XG5pbXBvcnQgeyBSZW50U2VydmljZSB9IGZyb20gXCIuL3NlcnZpY2UvcmVudC1zZXJ2aWNlXCI7XG5pbXBvcnQgeyBTYWxlU2VydmljZSB9IGZyb20gXCIuL3NlcnZpY2Uvc2FsZS1zZXJ2aWNlXCI7XG5pbXBvcnQgeyBTdG9ja1NlcnZpY2UgfSBmcm9tIFwiLi9zZXJ2aWNlL3N0b2NrLXNlcnZpY2VcIjtcblxuZXhwb3J0IGxldCBib29rU2VydmljZTogQm9va1NlcnZpY2U7XG5leHBvcnQgbGV0IGN1c3RvbWVyU2VydmljZTogQ3VzdG9tZXJTZXJ2aWNlO1xuZXhwb3J0IGxldCBjYW5jZWxTYWxlU2VydmljZTogQ2FuY2VsU2FsZVNlcnZpY2U7XG5leHBvcnQgbGV0IHJlbnRTZXJ2aWNlOiBSZW50U2VydmljZTtcbmV4cG9ydCBsZXQgc2FsZVNlcnZpY2U6IFNhbGVTZXJ2aWNlO1xuZXhwb3J0IGxldCBzdG9ja1NlcnZpY2U6IFN0b2NrU2VydmljZTtcblxubGV0IGRiOiBEYXRhQmFzZSA9IG5ldyBEYXRhQmFzZSgpO1xuaW5pdGlsaWF6ZVNlcnZpY2VzKGRiKTtcbmluaXRpbGlhemVEYXRhKCk7XG5hZGRMaXN0ZW5lckZvck1lbnVJdGVtcygpO1xuXG4gZnVuY3Rpb24gaW5pdGlsaWF6ZURhdGEoKXtcbiBib29rU2VydmljZS5pbml0aWFsaXplQm9va3NEYXRhTW9jaygpO1xufVxuXG5mdW5jdGlvbiBpbml0aWxpYXplU2VydmljZXMoZGI6IERhdGFCYXNlKSB7XG4gIGJvb2tTZXJ2aWNlID0gbmV3IEJvb2tTZXJ2aWNlKGRiLmdldEJvb2tzTGlzdCwgZGIuZ2V0Qm9va1NwZWNpZmljYXRpb25zKTtcbiAgY3VzdG9tZXJTZXJ2aWNlID0gbmV3IEN1c3RvbWVyU2VydmljZShkYi5nZXRDdXN0b21lcnNMaXN0KTtcbiAgY2FuY2VsU2FsZVNlcnZpY2UgPSBuZXcgQ2FuY2VsU2FsZVNlcnZpY2UoZGIuZ2V0Q2FuY2FsZWRTYWxlcyk7XG4gIHJlbnRTZXJ2aWNlID0gbmV3IFJlbnRTZXJ2aWNlKGRiLmdldFJlbnRzKTtcbiAgc2FsZVNlcnZpY2UgPSBuZXcgU2FsZVNlcnZpY2UoZGIuZ2V0U2FsZXNMaXN0LCBkYi5nZXRTYWxlQ2FydCk7XG4gIHN0b2NrU2VydmljZSA9IG5ldyBTdG9ja1NlcnZpY2UoZGIuZ2V0U3RvY2tzTGlzdCk7XG4gIGNvbnNvbGUubG9nKFwiU2VydmljZXMgaW50aWxpYXplZC5cIik7XG5cbiAgY3VzdG9tZXJTZXJ2aWNlLmFkZEN1c3RvbWVyKG5ldyBDdXN0b21lcigxLCBcIlwiLCBcIlwiLCBcIlwiKSk7XG4gIGN1c3RvbWVyU2VydmljZS5hZGRDdXN0b21lcihuZXcgQ3VzdG9tZXIoMiwgXCJcIiwgXCJcIiwgXCJcIikpO1xuXG4gIHN0b2NrU2VydmljZS5hZGRTdG9jayhcIjEyMy00NVwiLCBcIkE0NS01MlwiLCAxMCk7XG4gIHN0b2NrU2VydmljZS5hZGRTdG9jayhcIjEyMy00NlwiLCBcIkE0NS01MlwiLCAxMCk7XG59XG5cbmZ1bmN0aW9uIGFkZExpc3RlbmVyRm9yTWVudUl0ZW1zKCkge1xuICAvL3NhbGVTZXJ2aWNlLnVwZGF0ZVNhbGVDYXJ0KCk7XG4gIHNob3dBbmRIaWRlKFwiYWRkQm9va01lbnVJdGVtXCIsIFwiYWRkQm9va1NlY3Rpb25cIik7XG4gIHNob3dBbmRIaWRlKFwic2hvd0Jvb2tzTWVudUl0ZW1cIiwgXCJsaXN0Qm9va3NTZWN0aW9uXCIpO1xuICBzaG93QW5kSGlkZShcImFkZEN1c3RvbWVyTWVudUl0ZW1cIiwgXCJhZGRDdXN0b21lclNlY3Rpb25cIik7XG4gIHNob3dBbmRIaWRlKFwiYWRkU3RvY2tNZW51SXRlbVwiLCBcImFkZFN0b2NrU2VjdGlvblwiKTtcbiAgc2hvd0FuZEhpZGUoXCJzYWxlQm9va01lbnVJdGVtXCIsIFwic2FsZUJvb2tTZWN0aW9uXCIpO1xufVxuXG5mdW5jdGlvbiBzaG93QW5kSGlkZShidG5JZDogc3RyaW5nLCBlbGVtZW50SWQ6IHN0cmluZykge1xuICAvL3NhbGVTZXJ2aWNlLnVwZGF0ZVNhbGVDYXJ0KCk7XG5cbiAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1lbnRJZCk7XG4gIGNvbnN0IGJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGJ0bklkKTtcblxuICBpZiAoZWxlbWVudCAmJiBidG4pIHtcbiAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIGlmIChlbGVtZW50LnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiKSB7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmNvbnN0IGFkZEJvb2tGb3JtID0gPEhUTUxGb3JtRWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFkZC1ib29rLWZvcm1cIik7XG5pZiAoYWRkQm9va0Zvcm0gIT0gbnVsbCkge1xuICBhZGRCb29rRm9ybS5vbnN1Ym1pdCA9ICgpID0+IHtcbiAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShhZGRCb29rRm9ybSk7XG5cbiAgICBjb25zdCB0aXRsZSA9IGZvcm1EYXRhLmdldChcImJvb2tUaXRsZVwiKSBhcyBzdHJpbmc7XG4gICAgY29uc3QgYXV0aG9yID0gZm9ybURhdGEuZ2V0KFwiYm9va0F1dGhvclwiKSBhcyBzdHJpbmc7XG4gICAgY29uc3QgaXNibiA9IGZvcm1EYXRhLmdldChcImJvb2tJc2JuXCIpIGFzIHN0cmluZztcbiAgICBjb25zdCBwdWJsaXNoWWVhciA9IGZvcm1EYXRhLmdldChcImJvb2tQdWJsaXNoWWVhclwiKSBhcyBzdHJpbmc7XG4gICAgY29uc3QgcGFnZXMgPSBmb3JtRGF0YS5nZXQoXCJib29rUGFnZXNcIikgYXMgdW5rbm93biBhcyBudW1iZXI7XG4gICAgY29uc3QgcHJpY2UgPSBmb3JtRGF0YS5nZXQoXCJib29rUHJpY2VcIikgYXMgdW5rbm93biBhcyBudW1iZXI7XG4gICAgY29uc3Qgc3RhcnREYXRlID0gbmV3IERhdGUoKTtcbiAgICBjb25zdCBlbmREYXRlID0gbmV3IERhdGUoJ0RlYyAzMSwgOTk5OSAyMzo1OTo1OScpO1xuXG4gICAgY29uc3QgYm9va1NwZWMgPSBuZXcgQm9va1NwZWNpZmljYXRpb24oaXNibiwgcHJpY2UsIHN0YXJ0RGF0ZSwgZW5kRGF0ZSk7XG5cbiAgICBjb25zdCBib29rID0gbmV3IEJvb2soaXNibiwgdGl0bGUsIGF1dGhvciwgcHVibGlzaFllYXIsIHBhZ2VzLCBib29rU3BlYyk7XG4gICAgLy9ib29rU2VydmljZS5hZGRCb29rKGJvb2spO1xuXG4gICAgYm9va1NlcnZpY2UuYWRkQm9va01vY2soYm9vayk7XG4gICAgYWxlcnQoYm9vay5pc2JuICsgXCIgbnVtYXJhbMSxIGtpdGFwIEVrbGVtZSDEsMWfbGVtaSBCYcWfYXLEsSDEsGxlIFRhbWFtbGFubcSxxZ90xLFyLlwiKTtcbiAgICBhZGRCb29rRm9ybS5yZXNldCgpO1xuXG4gICAgcmV0dXJuIGZhbHNlOyAvLyBwcmV2ZW50IHJlbG9hZFxuICB9O1xufVxuXG5jb25zdCBhZGRTdG9ja0Zvcm0gPSA8SFRNTEZvcm1FbGVtZW50Pihkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFkZC1zdG9jay1mb3JtXCIpKTtcbmlmIChhZGRTdG9ja0Zvcm0pIHtcbiAgYWRkU3RvY2tGb3JtLm9uc3VibWl0ID0gKCkgPT4ge1xuXG4gICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoYWRkU3RvY2tGb3JtKTtcblxuICAgIGNvbnN0IGlzYm4gPSBmb3JtRGF0YS5nZXQoXCJib29rSXNibkZvckFkZFN0b2NrXCIpIGFzIHN0cmluZztcbiAgICBjb25zdCBxdWFudHRpeSA9IGZvcm1EYXRhLmdldChcInN0b2NrUXVhbnRpdHlcIikgYXMgdW5rbm93biBhcyBudW1iZXI7XG4gICAgY29uc3Qgc2hlbGZOdW1iZXIgPSBmb3JtRGF0YS5nZXQoXCJzaGVsZk51bWJlclwiKSBhcyBzdHJpbmc7XG5cbiAgICBjb25zdCBzdG9jayA9IG5ldyBTdG9jayhpc2JuLCBxdWFudHRpeSwgc2hlbGZOdW1iZXIpO1xuXG4gICAgY29uc3QgaXNDb250YWluc0Jvb2sgPSBkYi5nZXRCb29rc0xpc3Quc29tZShiID0+IGIuaXNibiA9PSBpc2JuKTtcblxuICAgIC8vIGlmICghaXNDb250YWluc0Jvb2spIHtcbiAgICAvLyAgIGFsZXJ0KFwiU3RvayBla2xlbm1leWUgw6dhbMSxxZ/EsWxhbiBraXRhcCwga2F5xLF0bMSxIGRlxJ9pbGRpci4gTMO8dGZlbiDDtm5jZSBraXRhcCBla2xleWluaXpcIik7XG4gICAgLy8gfVxuICAgIC8vIGVsc2Uge1xuICAgIC8vICAgc3RvY2tTZXJ2aWNlLmluY3JlYXNlU3RvY2soaXNibiwgcXVhbnR0aXkpO1xuICAgIC8vICAgYWxlcnQoaXNibiArIFwiIGlzYm4gbnVtYXJhbMSxIGtpdGFwdGFuLCBcIiArIHF1YW50dGl5ICsgXCIga2FkYXIgc2lzdGVtZSBzdG9rIGVrbGVubWnFn3Rpci5cIik7XG4gICAgLy8gfVxuXG4gICAgYWxlcnQoaXNibiArIFwiIGlzYm4gbnVtYXJhbMSxIGtpdGFwdGFuLCBcIiArIHF1YW50dGl5ICsgXCIga2FkYXIgc2lzdGVtZSBzdG9rIGVrbGVubWnFn3Rpci5cIik7XG4gICAgc3RvY2tTZXJ2aWNlLmFkZFN0b2NrTW9jayhzdG9jayk7XG4gICAgYWRkU3RvY2tGb3JtLnJlc2V0KCk7XG4gICAgcmV0dXJuIGZhbHNlOyAvLyBwcmV2ZW50IHJlbG9hZFxuICB9O1xufVxuXG5jb25zdCBhZGRDdXN0b21lckZvcm0gPSA8SFRNTEZvcm1FbGVtZW50Pihkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFkZC1jdXN0b21lci1mb3JtXCIpKTtcbmlmIChhZGRDdXN0b21lckZvcm0pIHtcbiAgYWRkQ3VzdG9tZXJGb3JtLm9uc3VibWl0ID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKGFkZEN1c3RvbWVyRm9ybSk7XG5cbiAgICBjb25zdCBuYW1lID0gZm9ybURhdGEuZ2V0KFwiY3VzdG9tZXJOYW1lXCIpIGFzIHN0cmluZztcbiAgICBjb25zdCBzdXJuYW1lID0gZm9ybURhdGEuZ2V0KFwiY3VzdG9tZXJTdXJuYW1lXCIpIGFzIHN0cmluZztcbiAgICBjb25zdCBwaG9uZU51bWJlciA9IGZvcm1EYXRhLmdldChcImN1c3RvbWVyUGhvbmVOdW1iZXJcIikgYXMgc3RyaW5nO1xuXG4gICAgY29uc3QgY3VzdG9tZXIgPSBuZXcgQ3VzdG9tZXIoY3VzdG9tZXJTZXJ2aWNlLmdldE5ld0N1c3RvbWVySWQoKSwgbmFtZSwgc3VybmFtZSwgcGhvbmVOdW1iZXIpO1xuICAgIGF3YWl0IGN1c3RvbWVyU2VydmljZS5hZGRDdXN0b21lck1vY2soY3VzdG9tZXIpO1xuXG4gICAgYWxlcnQoXCJNw7zFn3RlcmkgRWtsZW1lIMSwxZ9sZW1pIEJhxZ9hcsSxIMSwbGUgVGFtYW1sYW5txLHFn3TEsXIuIFwiKTtcbiAgICBhZGRDdXN0b21lckZvcm0ucmVzZXQoKTtcbiAgICByZXR1cm4gZmFsc2U7IC8vIHByZXZlbnQgcmVsb2FkXG4gIH07XG59XG5cbmNvbnN0IHNhbGVCb29rRm9ybSA9IDxIVE1MRm9ybUVsZW1lbnQ+KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2FsZS1ib29rLWZvcm1cIikpO1xuaWYgKHNhbGVCb29rRm9ybSkge1xuICBzYWxlQm9va0Zvcm0ub25zdWJtaXQgPSAoKSA9PiB7XG5cbiAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShzYWxlQm9va0Zvcm0pO1xuXG4gICAgY29uc3QgaXNibiA9IGZvcm1EYXRhLmdldChcImlzYm5Gb3JTYWxlXCIpIGFzIHN0cmluZztcbiAgICBjb25zdCBib29rID0gYm9va1NlcnZpY2UuZ2V0Qm9vayhpc2JuKTtcbiAgICBjb25zdCBjdXN0b21lcklkID0gcGFyc2VJbnQoZm9ybURhdGEuZ2V0KFwiY3VzdG9tZXJJZEZvclNhbGVcIikgYXMgc3RyaW5nKTtcbiAgICBjb25zdCBjdXN0b21lcjogYm9vbGVhbiA9IGN1c3RvbWVyU2VydmljZS5pc1ZhbGlkQ3VzdG9tZXIoY3VzdG9tZXJJZCk7XG4gICAgY29uc3QgcXVhbnRpdHkgPSBwYXJzZUludChmb3JtRGF0YS5nZXQoXCJxdWFudGl0eUZvclNhbGVcIikgYXMgc3RyaW5nKTtcblxuICAgIGNvbnN0IHN0b2NrID0gc3RvY2tTZXJ2aWNlLmdldFN0b2NrKGlzYm4pITtcblxuICAgIHRyeSB7XG4gICAgICBpZiAoYm9vaykge1xuICAgICAgICBpZiAoc3RvY2spIHtcbiAgICAgICAgICBpZiAoc3RvY2sucXVhbnRpdHkgPj0gcXVhbnRpdHkpIHtcbiAgICAgICAgICAgIGlmIChjdXN0b21lcikge1xuICAgICAgICAgICAgICBzYWxlU2VydmljZS5hZGRCb29rVG9DYXJ0KGJvb2ssIHF1YW50aXR5LCBjdXN0b21lcklkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGFsZXJ0KGN1c3RvbWVySWQgKyBcIiBudW1hcmFsxLEgbcO8xZ90ZXJpIGthecSxdGzEsSBkZcSfaWxkaXIuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGFsZXJ0KHF1YW50aXR5ICsgXCIga2FkYXIga2l0YXAgZMO8a2thbmRhIG1ldmN1dCBkZcSfaWxkaXIuXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhbGVydChgRMO8a2thbmRhICR7aXNibn0gbnVtYXJhbMSxIGtpdGFixLFuIHN0b8SfdSBtZXZjdXQgZGXEn2lsZGlyLmApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhbGVydChpc2JuICsgXCIgbnVtYXJhbMSxIGtpdGFwIHlva3R1ci5cIik7XG4gICAgICB9XG5cbiAgICAgIHNhbGVCb29rRm9ybS5yZXNldCgpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGFsZXJ0KGVycm9yKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBLaXRhcCBzYXTEscWfxLEgacOnaW4gacWfbGVtIHlhcMSxbMSxcmtlbiBraXRhcGxhciBzZXBldGUgZWtsZW5peW9yLlxuICogRWtsZW1lIGnFn2xlbWkgYml0dGlrdGVuIHNvbnJhIHNhdMSxbiBhbG0gaWnDp2luIGJ1IGJ1dG9uYSB0xLFrbGFuZMSxxJ/EsW5kYSBzZXJ2aXNlIGdpZGlwIHNlcGV0dGVraSBraXRhcGxhcsSxbiBzYXTEscWfxLEgZ2Vyw6dla2xlxZ9peW9yXG4gKiBCdXJhZGEgZGnEn2VyIGJ1dG9ubGFyZGEgb2xkdcSfdSBnaWJpIGRpcmVrIG1vY2sgc2VydmlzaW5lIGJhxJ9sYW5tYWsgeWVyaW5lIHNlcnZpc2UgZ2l0bWVrIGR1cnVtdW5kYXnEsXouIFxuICogw4fDvG5rw7wgc2VydmlzdGUgU2FsZSBuZXNuZXNpbmkgb2x1xZ90dXJ1cCBtb2NrIHNlcnZpc2luZSBwYXJhbWV0cmUgb2xhcmsgZ2XDp2l5b3J1ei5cbiAqL1xuY29uc3QgYnRuQnV5ID0gPEhUTUxCdXR0b25FbGVtZW50Pihkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ0bkJ1eVwiKSk7XG5idG5CdXkuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgaWYgKHNhbGVTZXJ2aWNlLnNhbGVDYXJ0LmJvb2tBbmRRdWFudGl0eU1hcC5zaXplID09PSAwKSB7XG4gICAgYWxlcnQoXCJTZXBldHRlIMO8csO8biB5b2suIEzDvHRmZW4gw7ZuY2Ugw7xyw7xuIGVrbGV5aW5pelwiKTtcbiAgfSBlbHNlIHtcbiAgICBzYWxlU2VydmljZS5jYXJ0VG9TYWxlKCk7XG4gIH1cblxufSk7XG5cbmNvbnN0IGJ0blNob3dCb29rc01lbnVJdGVtID0gPEhUTUxFbGVtZW50Pihkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNob3dCb29rc01lbnVJdGVtXCIpKTtcbmJ0blNob3dCb29rc01lbnVJdGVtLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gIGJvb2tTZXJ2aWNlLmluaXRpYWxpemVCb29rc0RhdGFNb2NrKCk7XG59KSIsIlxuaW1wb3J0IHsgc3RvY2tTZXJ2aWNlIH0gZnJvbSBcIi4uXCI7XG5pbXBvcnQgeyBCb29rIH0gZnJvbSBcIi4uL2RvbWFpbi9ib29rXCI7XG5pbXBvcnQgeyBCb29rU3BlY2lmaWNhdGlvbiB9IGZyb20gXCIuLi9kb21haW4vYm9vay1zcGVjaWZpY2F0aW9uXCI7XG5cbmV4cG9ydCBjbGFzcyBCb29rU2VydmljZSB7XG4gICAgcHJpdmF0ZSBfYm9va0xpc3Q6IEFycmF5PEJvb2s+O1xuICAgIHByaXZhdGUgX2Jvb2tTcGVjTGlzdDogQXJyYXk8Qm9va1NwZWNpZmljYXRpb24+O1xuXG4gICAgY29uc3RydWN0b3IoYm9va0xpc3Q6IEFycmF5PEJvb2s+LCBib29rU3BlY0xpc3Q6IEFycmF5PEJvb2tTcGVjaWZpY2F0aW9uPikge1xuICAgICAgICB0aGlzLl9ib29rTGlzdCA9IGJvb2tMaXN0O1xuICAgICAgICB0aGlzLl9ib29rU3BlY0xpc3QgPSBib29rU3BlY0xpc3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0dGVyIGRhdGFCYXNlXG4gICAgICogQHJldHVybiB7RGF0YUJhc2V9XG4gICAgICovXG4gICAgcHVibGljIGdldCBib29rTGlzdCgpOiBBcnJheTxCb29rPiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ib29rTGlzdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXR0ZXIgZGF0YUJhc2VcbiAgICAgKiBAcGFyYW0ge0RhdGFCYXNlfSB2YWx1ZVxuICAgICAqL1xuICAgIHB1YmxpYyBzZXQgYm9va0xpc3QodmFsdWU6IEFycmF5PEJvb2s+KSB7XG4gICAgICAgIHRoaXMuX2Jvb2tMaXN0ID0gdmFsdWU7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBHZXR0ZXIgYm9va1NwZWNMaXN0XG4gICAgICogQHJldHVybiB7QXJyYXk8Qm9va1NwZWNpZmljYXRpb24+fVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgYm9va1NwZWNMaXN0KCk6IEFycmF5PEJvb2tTcGVjaWZpY2F0aW9uPiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ib29rU3BlY0xpc3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0dGVyIGJvb2tTcGVjTGlzdFxuICAgICAqIEBwYXJhbSB7QXJyYXk8Qm9va1NwZWNpZmljYXRpb24+fSB2YWx1ZVxuICAgICAqL1xuICAgIHB1YmxpYyBzZXQgYm9va1NwZWNMaXN0KHZhbHVlOiBBcnJheTxCb29rU3BlY2lmaWNhdGlvbj4pIHtcbiAgICAgICAgdGhpcy5fYm9va1NwZWNMaXN0ID0gdmFsdWU7XG4gICAgfVxuXG5cbiAgICBwdWJsaWMgZ2V0Qm9vayhpc2JuOiBzdHJpbmcpOiBCb29rIHtcbiAgICAgICAgLy9CdXJhZGFuIG51bGwgYmlyIGRlxJ9lciBkZSBkw7ZuZWJpbGVjZcSfaSBpw6dpbiBoYXRhIHZlcml5b3JcbiAgICAgICAgLy9hbWEgYml6IHNvbmRha2kgISBvcGVyYXTDtnLDvCBpbGUgbnVsbCBkZcSfZXIgZMO2bm1leWVjZWsgZGl5ZSBnYXJhbnRpIHZlcml5b3J1elxuICAgICAgICByZXR1cm4gdGhpcy5ib29rTGlzdC5maW5kKGIgPT4gYi5pc2JuID09PSBpc2JuKSE7XG4gICAgfVxuXG4gICAgcHVibGljIGFkZEJvb2sobmV3Qm9vazogQm9vaykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5ib29rTGlzdC5wdXNoKG5ld0Jvb2spO1xuICAgICAgICAgICAgdGhpcy5fYm9va1NwZWNMaXN0LnB1c2gobmV3Qm9vay5ib29rU3BlYyk7XG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJLaXRhcCBla2xlbmlya2VuIGJpciBoYXRhIG1leWRhbmEgZ2VsZGkuXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGlzVmFsaWRCb29rKGlzYm46IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBiID0gdGhpcy5nZXRCb29rKGlzYm4pO1xuICAgICAgICByZXR1cm4gdGhpcy5ib29rTGlzdC5pbmNsdWRlcyhiKVxuICAgIH1cblxuICAgIGFzeW5jIGluaXRpYWxpemVCb29rc0RhdGFNb2NrKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnaHR0cDovL2xvY2FsaG9zdDozMDAyL2FwaS9ib29rcycsIHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEhhdGEgb2x1xZ90dSwgaGF0YSBrb2R1OiAke3Jlc3BvbnNlLnN0YXR1c30gYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSAoYXdhaXQgcmVzcG9uc2UuanNvbigpKTtcbiAgICAgICAgICAgIGNvbnN0IGdldFJlc3VsdCA9IDxCb29rW10+SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShyZXN1bHQsIG51bGwsIDQpKTtcbiAgICAgICAgICAgIHRoaXMuYm9va0xpc3QgPSBnZXRSZXN1bHQgYXMgQXJyYXk8Qm9vaz47XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMubGlzdEJvb2tzKCk7XG5cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGxpc3RCb29rcygpIHtcbiAgICAgICAgY29uc3QgbGlzdEJvb2tzRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsaXN0Qm9va3NcIik7XG5cbiAgICAgICAgaWYgKGxpc3RCb29rc0Rpdikge1xuICAgICAgICAgICAgbGV0IHJvdywgY29sdW1uO1xuXG4gICAgICAgICAgICB3aGlsZSAobGlzdEJvb2tzRGl2Lmxhc3RDaGlsZCAmJiBsaXN0Qm9va3NEaXYuY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGxpc3RCb29rc0Rpdi5yZW1vdmVDaGlsZChsaXN0Qm9va3NEaXYubGFzdENoaWxkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5ib29rTGlzdC5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgICAgIHJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICAgICAgcm93LmNsYXNzTmFtZSA9IFwicm93LWxpc3QtYm9va1wiO1xuXG4gICAgICAgICAgICAgICAgY29sdW1uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgICAgICBjb2x1bW4uY2xhc3NOYW1lID0gXCJjb2x1bW4tbGlzdC1ib29rXCI7XG4gICAgICAgICAgICAgICAgY29sdW1uLnRleHRDb250ZW50ID0gZWxlbWVudC5pc2JuLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKGNvbHVtbik7XG5cbiAgICAgICAgICAgICAgICBjb2x1bW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgICAgIGNvbHVtbi5jbGFzc05hbWUgPSBcImNvbHVtbi1saXN0LWJvb2tcIjtcbiAgICAgICAgICAgICAgICBjb2x1bW4udGV4dENvbnRlbnQgPSBlbGVtZW50Lm5hbWUudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQoY29sdW1uKTtcblxuICAgICAgICAgICAgICAgIGNvbHVtbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICAgICAgY29sdW1uLmNsYXNzTmFtZSA9IFwiY29sdW1uLWxpc3QtYm9va1wiO1xuICAgICAgICAgICAgICAgIGNvbHVtbi50ZXh0Q29udGVudCA9IGVsZW1lbnQuYXV0aG9yLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKGNvbHVtbik7XG5cbiAgICAgICAgICAgICAgICBjb2x1bW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgICAgIGNvbHVtbi5jbGFzc05hbWUgPSBcImNvbHVtbi1saXN0LWJvb2tcIjtcbiAgICAgICAgICAgICAgICBjb2x1bW4udGV4dENvbnRlbnQgPSBzdG9ja1NlcnZpY2UuZ2V0U3RvY2tRdWFudGl0eShlbGVtZW50LmlzYm4pLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKGNvbHVtbik7XG5cbiAgICAgICAgICAgICAgICBjb2x1bW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgICAgIGNvbHVtbi5jbGFzc05hbWUgPSBcImNvbHVtbi1saXN0LWJvb2tcIjtcbiAgICAgICAgICAgICAgICBjb2x1bW4udGV4dENvbnRlbnQgPSBlbGVtZW50LmJvb2tTcGVjLnByaWNlLnRvU3RyaW5nKCkgKyBcIiDigrpcIjtcbiAgICAgICAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQoY29sdW1uKTtcblxuICAgICAgICAgICAgICAgIGxpc3RCb29rc0Rpdi5hcHBlbmRDaGlsZChyb3cpO1xuICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBhc3luYyBhZGRCb29rTW9jayhiOiBCb29rKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwOi8vbG9jYWxob3N0OjMwMDIvYXBpL2Jvb2tzLycsIHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgICAgIGlzYm46IGIuaXNibixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogYi5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBhdXRob3I6IGIuYXV0aG9yLFxuICAgICAgICAgICAgICAgICAgICBwYWdlczogYi5wYWdlcyxcbiAgICAgICAgICAgICAgICAgICAgcHVibGlzaFllYXI6IGIucHVibGlzaFllYXJcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSGF0YSBvbHXFn3R1LCBoYXRhIGtvZHU6ICR7cmVzcG9uc2Uuc3RhdHVzfSBgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gKGF3YWl0IHJlc3BvbnNlLmpzb24oKSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQpO1xuXG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0hhdGEgT2x1xZ90dS4nKTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCJpbXBvcnQgeyBEYXRhQmFzZSB9IGZyb20gXCIuLi9kYi9kYXRhYmFzZVwiO1xuaW1wb3J0IHsgQ2FuY2VsU2FsZSB9IGZyb20gXCIuLi9kb21haW4vY2FuY2FsLXNhbGVcIjtcblxuZXhwb3J0IGNsYXNzIENhbmNlbFNhbGVTZXJ2aWNlIHtcbiAgICBwcml2YXRlIF9jYW5jZWxsZWRTYWxlc0xpc3Q6IEFycmF5PENhbmNlbFNhbGU+O1xuXG5cblx0Y29uc3RydWN0b3IoY2FuY2VsbGVkU2FsZXNMaXN0OiBBcnJheTxDYW5jZWxTYWxlPikge1xuXHRcdHRoaXMuX2NhbmNlbGxlZFNhbGVzTGlzdCA9IGNhbmNlbGxlZFNhbGVzTGlzdDtcblx0fVxuICAgIFxuXG4gICAgLyoqXG4gICAgICogR2V0dGVyIGNhbmNlbGxlZFNhbGVzTGlzdFxuICAgICAqIEByZXR1cm4ge0FycmF5PENhbmNlbFNhbGU+fVxuICAgICAqL1xuXHRwdWJsaWMgZ2V0IGNhbmNlbGxlZFNhbGVzTGlzdCgpOiBBcnJheTxDYW5jZWxTYWxlPiB7XG5cdFx0cmV0dXJuIHRoaXMuX2NhbmNlbGxlZFNhbGVzTGlzdDtcblx0fVxuXG4gICAgLyoqXG4gICAgICogU2V0dGVyIGNhbmNlbGxlZFNhbGVzTGlzdFxuICAgICAqIEBwYXJhbSB7QXJyYXk8Q2FuY2VsU2FsZT59IHZhbHVlXG4gICAgICovXG5cdHB1YmxpYyBzZXQgY2FuY2VsbGVkU2FsZXNMaXN0KHZhbHVlOiBBcnJheTxDYW5jZWxTYWxlPikge1xuXHRcdHRoaXMuX2NhbmNlbGxlZFNhbGVzTGlzdCA9IHZhbHVlO1xuXHR9XG5cblxuXG4gICAgcHVibGljIGNhbmNlbFNhbGUoY2FuY2VsU2FsZTogQ2FuY2VsU2FsZSk6IHZvaWQge1xuICAgICAgICB0aGlzLmNhbmNlbGxlZFNhbGVzTGlzdC5wdXNoKGNhbmNlbFNhbGUpO1xuICAgICAgICBsZXQgcmVmdW5kOiBudW1iZXIgPSB0aGlzLmNhbGN1bGF0ZVJlZnVuZChjYW5jZWxTYWxlKTtcbiAgICAgICAgY2FuY2VsU2FsZS5yZWZ1bmQgPSByZWZ1bmQ7XG4gICAgfVxuXG4gICAgcHVibGljIGNhbGN1bGF0ZVJlZnVuZChjYW5jZWxTYWxlOiBDYW5jZWxTYWxlKTogbnVtYmVyIHtcblxuXG4gICAgICAgIGxldCBkaWZmID0gdGhpcy5jYWxjdWxhdGVEaWZmSG91cnMoY2FuY2VsU2FsZS5jYW5jZWxlZERhdGVUaW1lLCBjYW5jZWxTYWxlLnNhbGUub3BlcmF0aW9uRGF0ZVRpbWUpXG4gICAgICAgIGxldCByZWZ1bmQ6IG51bWJlcjtcblxuICAgICAgICBpZiAoZGlmZiA+IDI0KSB7XG4gICAgICAgICAgICByZWZ1bmQgPSBjYW5jZWxTYWxlLnNhbGUudG90YWwgKiAwLjc1O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVmdW5kID0gY2FuY2VsU2FsZS5zYWxlLnRvdGFsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWZ1bmQ7XG4gICAgfVxuXG4gICAgcHVibGljIGNhbGN1bGF0ZURpZmZIb3VycyhkMTogRGF0ZSwgZDI6IERhdGUpOiBudW1iZXIge1xuXG4gICAgICAgIGxldCBkaWZmTWlsaXM6IG51bWJlciA9IChkMS5nZXRUaW1lKCkgLSBkMi5nZXRUaW1lKCkpOy8vIG1pbGkgc2Vjb25kc1xuICAgICAgICBsZXQgZGlmZkhvdXIgPSBNYXRoLmZsb29yKGRpZmZNaWxpcyAvIDEwMDAgLyA2MCAvIDYwICk7IC8vIC8xMDAwID4gc2Vjb25kIC8gNjAgPiBtaW4gLyA2MCA+IGhvdXJcbiAgICAgICAgcmV0dXJuIGRpZmZIb3VyO1xuICAgIH1cblxufSIsImltcG9ydCB7IERhdGFCYXNlIH0gZnJvbSBcIi4uL2RiL2RhdGFiYXNlXCI7XG5pbXBvcnQgeyBDdXN0b21lciB9IGZyb20gXCIuLi9kb21haW4vY3VzdG9tZXJcIjtcblxuZXhwb3J0IGNsYXNzIEN1c3RvbWVyU2VydmljZSB7XG4gICAgcHJpdmF0ZSBfY3VzdG9tZXJMaXN0OiBBcnJheTxDdXN0b21lcj47XG4gICAgcHJpdmF0ZSBjdXN0b21lckFwaTogc3RyaW5nID0gXCJodHRwOi8vbG9jYWxob3N0OjMwMDIvYXBpL2N1c3RvbWVycy9cIjtcblxuICAgIGNvbnN0cnVjdG9yKGN1c3RvbWVyTGlzdDogQXJyYXk8Q3VzdG9tZXI+KSB7XG4gICAgICAgIHRoaXMuX2N1c3RvbWVyTGlzdCA9IGN1c3RvbWVyTGlzdDtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEdldHRlciBjdXN0b21lckxpc3RcbiAgICAgKiBAcmV0dXJuIHtBcnJheTxDdXN0b21lcj59XG4gICAgICovXG4gICAgcHVibGljIGdldCBjdXN0b21lckxpc3QoKTogQXJyYXk8Q3VzdG9tZXI+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2N1c3RvbWVyTGlzdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXR0ZXIgY3VzdG9tZXJMaXN0XG4gICAgICogQHBhcmFtIHtBcnJheTxDdXN0b21lcj59IHZhbHVlXG4gICAgICovXG4gICAgcHVibGljIHNldCBjdXN0b21lckxpc3QodmFsdWU6IEFycmF5PEN1c3RvbWVyPikge1xuICAgICAgICB0aGlzLl9jdXN0b21lckxpc3QgPSB2YWx1ZTtcbiAgICB9XG5cblxuICAgIHB1YmxpYyBhZGRDdXN0b21lcihuZXdDdXN0b21lcjogQ3VzdG9tZXIpIHtcbiAgICAgICAgdGhpcy5jdXN0b21lckxpc3QucHVzaChuZXdDdXN0b21lcik7XG4gICAgfVxuXG4gICAgcHVibGljIGdldE5ld0N1c3RvbWVySWQoKTogbnVtYmVyIHtcbiAgICAgICAgbGV0IGxhc3RDdXN0b21lcklkOiBudW1iZXIgPSAwO1xuXG4gICAgICAgIGlmICh0aGlzLmN1c3RvbWVyTGlzdC5sZW5ndGggPiAwKSB7XG5cbiAgICAgICAgICAgIGxhc3RDdXN0b21lcklkID0gdGhpcy5jdXN0b21lckxpc3QuYXQodGhpcy5jdXN0b21lckxpc3QubGVuZ3RoIC0gMSkhLmlkO1xuICAgICAgICB9XG5cbiAgICAgICAgbGFzdEN1c3RvbWVySWQgPSBsYXN0Q3VzdG9tZXJJZCArIDE7XG5cbiAgICAgICAgcmV0dXJuIGxhc3RDdXN0b21lcklkO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRDdXN0b21lckluZm8oaWQ6IG51bWJlcik6IEN1c3RvbWVyIHwgdW5kZWZpbmVkIHtcblxuICAgICAgICBsZXQgY3VzdG9tZXIgPSB0aGlzLmN1c3RvbWVyTGlzdC5maW5kKGN1c3RvbWVyID0+IGN1c3RvbWVyLmlkID09PSBpZCk7XG5cbiAgICAgICAgaWYgKGN1c3RvbWVyKSB7XG4gICAgICAgICAgICByZXR1cm4gY3VzdG9tZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGlzVmFsaWRDdXN0b21lcihjdXN0b21lcklkOiBudW1iZXIpOiBib29sZWFuIHtcblxuICAgICAgICBsZXQgaXNWYWxpZCA9IHRoaXMuY3VzdG9tZXJMaXN0LnNvbWUoY3VzdG9tZXIgPT4gY3VzdG9tZXIuaWQgPT09IGN1c3RvbWVySWQpO1xuXG4gICAgICAgIGlmIChpc1ZhbGlkKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGFkZEN1c3RvbWVyTW9jayhuZXdDdXN0b21lcjogQ3VzdG9tZXIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godGhpcy5jdXN0b21lckFwaSwge1xuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IG5ld0N1c3RvbWVyLmlkLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBuZXdDdXN0b21lci5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBzdXJOYW1lOiBuZXdDdXN0b21lci5zdXJOYW1lLFxuICAgICAgICAgICAgICAgICAgICBwaG9uZU51bWJlcjogbmV3Q3VzdG9tZXIucGhvbmVOdW1iZXJcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSGF0YSBvbHXFn3R1LCBoYXRhIGtvZHU6ICR7cmVzcG9uc2Uuc3RhdHVzfSBgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gKGF3YWl0IHJlc3BvbnNlLmpzb24oKSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQpO1xuXG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0hhdGEgT2x1xZ90dS4nKTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCJpbXBvcnQgeyBEYXRhQmFzZSB9IGZyb20gXCIuLi9kYi9kYXRhYmFzZVwiO1xuaW1wb3J0IHsgQm9vayB9IGZyb20gXCIuLi9kb21haW4vYm9va1wiO1xuaW1wb3J0IHsgUmVudCB9IGZyb20gXCIuLi9kb21haW4vcmVudFwiO1xuXG5leHBvcnQgY2xhc3MgUmVudFNlcnZpY2Uge1xuICAgIHByaXZhdGUgX3JlbnRMaXN0OiBBcnJheTxSZW50PjtcbiAgICByZWZ1bmRQZXJjZW50OiBudW1iZXI7XG5cblxuICAgIGNvbnN0cnVjdG9yKHJlbnRMaXN0OiBBcnJheTxSZW50Pikge1xuICAgICAgICB0aGlzLl9yZW50TGlzdCA9IHJlbnRMaXN0O1xuICAgICAgICB0aGlzLnJlZnVuZFBlcmNlbnQgPSAwLjc1O1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogR2V0dGVyIHJlbnRMaXN0XG4gICAgICogQHJldHVybiB7QXJyYXk8UmVudD59XG4gICAgICovXG5cdHB1YmxpYyBnZXQgcmVudExpc3QoKTogQXJyYXk8UmVudD4ge1xuXHRcdHJldHVybiB0aGlzLl9yZW50TGlzdDtcblx0fVxuXG4gICAgLyoqXG4gICAgICogU2V0dGVyIHJlbnRMaXN0XG4gICAgICogQHBhcmFtIHtBcnJheTxSZW50Pn0gdmFsdWVcbiAgICAgKi9cblx0cHVibGljIHNldCByZW50TGlzdCh2YWx1ZTogQXJyYXk8UmVudD4pIHtcblx0XHR0aGlzLl9yZW50TGlzdCA9IHZhbHVlO1xuXHR9XG5cblxuXG4gICAgcHVibGljIGFkZFJlbnQocmVudDogUmVudCk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlbnRMaXN0LnB1c2gocmVudCk7XG4gICAgfVxuXG4gICAgcHVibGljIGNhbGN1bGF0ZVRvdGFsKHJlbnQ6IFJlbnQpOiBudW1iZXIge1xuXG4gICAgICAgIGxldCBtYXA6IE1hcDxCb29rLCBudW1iZXI+ID0gcmVudC5ib29rQW5kUXVhbnRpdHlNYXA7XG5cbiAgICAgICAgbGV0IHN1YlRvdGFsOiBudW1iZXIgPSAwO1xuXG4gICAgICAgIC8vaXQgY2FuIGJlID0+IGxldCBlbnRyeSBvZiByZW50LmJvb2tBbmRRdWFudGl0eU1hcC5lbnRyaWVzKClcbiAgICAgICAgZm9yIChsZXQgZW50cnkgb2YgcmVudC5ib29rQW5kUXVhbnRpdHlNYXApIHtcbiAgICAgICAgICAgIHN1YlRvdGFsICs9IGVudHJ5WzBdLmJvb2tTcGVjLnByaWNlICogZW50cnlbMV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3ViVG90YWw7XG4gICAgfVxuXG4gICAgLy8gUjA1MTAyMjE0NTUwOSA9PiBkb21haW4uUmVudCAwNS4xMC4yMDIyIDE0OjU1LjA5XG4gICAgZ2VuZXJhdGVSZW50TnVtYmVyKGN1c3RvbWVySWQ6IG51bWJlcik6IHN0cmluZyB7XG4gICAgICAgIGxldCB0b2RheSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIGxldCByZWNlaXB0TnVtYmVyOiBzdHJpbmcgPSBcIlJcIiArIHRvZGF5LmdldERheSgpLnRvU3RyaW5nICsgdG9kYXkuZ2V0TW9udGgoKS50b1N0cmluZyArIHRvZGF5LmdldEZ1bGxZZWFyKCkudG9TdHJpbmcgKyB0b2RheS5nZXRIb3VycygpLnRvU3RyaW5nICsgdG9kYXkuZ2V0TWludXRlcygpLnRvU3RyaW5nICsgdG9kYXkuZ2V0U2Vjb25kcygpLnRvU3RyaW5nICsgY3VzdG9tZXJJZC50b1N0cmluZztcblxuICAgICAgICByZXR1cm4gcmVjZWlwdE51bWJlcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgY2FsY3VsYXRlUmVmdW5kKHJlbnQ6IFJlbnQpOiB2b2lkIHtcbiAgICAgICAgcmVudC5yZWZ1bmQgPSByZW50LnRvdGFsICogdGhpcy5yZWZ1bmRQZXJjZW50O1xuICAgIH1cblxuXG59IiwiaW1wb3J0IHsgc3RvY2tTZXJ2aWNlIH0gZnJvbSBcIi4uXCI7XG5pbXBvcnQgeyBCb29rIH0gZnJvbSBcIi4uL2RvbWFpbi9ib29rXCI7XG5pbXBvcnQgeyBTYWxlIH0gZnJvbSBcIi4uL2RvbWFpbi9zYWxlXCI7XG5pbXBvcnQgeyBTYWxlQ2FydCB9IGZyb20gXCIuLi9kb21haW4vc2FsZS1jYXJ0XCI7XG5cbmV4cG9ydCBjbGFzcyBTYWxlU2VydmljZSB7XG4gICAgcHJpdmF0ZSBfc2FsZUxpc3Q6IEFycmF5PFNhbGU+O1xuICAgIHByaXZhdGUgX3NhbGVDYXJ0OiBTYWxlQ2FydDtcbiAgICBwdWJsaWMgYWRkU2FsZUFwaSA9ICdodHRwOi8vbG9jYWxob3N0OjMwMDIvYXBpL3NhbGVzLyc7XG5cbiAgICBjb25zdHJ1Y3RvcihzYWxlTGlzdDogQXJyYXk8U2FsZT4sIHNhbGVDYXJ0OiBTYWxlQ2FydCkge1xuICAgICAgICB0aGlzLl9zYWxlTGlzdCA9IHNhbGVMaXN0O1xuICAgICAgICB0aGlzLl9zYWxlQ2FydCA9IHNhbGVDYXJ0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHRlciBzYWxlTGlzdFxuICAgICAqIEByZXR1cm4ge0FycmF5PFNhbGU+fVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgc2FsZUxpc3QoKTogQXJyYXk8U2FsZT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2FsZUxpc3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0dGVyIHNhbGVMaXN0XG4gICAgICogQHBhcmFtIHtBcnJheTxTYWxlPn0gdmFsdWVcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0IHNhbGVMaXN0KHZhbHVlOiBBcnJheTxTYWxlPikge1xuICAgICAgICB0aGlzLl9zYWxlTGlzdCA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHRlciBzYWxlQ2FydFxuICAgICAqIEByZXR1cm4ge0FycmF5PFNhbGVDYXJ0Pn1cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IHNhbGVDYXJ0KCk6IFNhbGVDYXJ0IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NhbGVDYXJ0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHRlciBzYWxlQ2FydFxuICAgICAqIEBwYXJhbSB7QXJyYXk8U2FsZUNhcnQ+fSB2YWx1ZVxuICAgICAqL1xuICAgIHB1YmxpYyBzZXQgc2FsZUNhcnQodmFsdWU6IFNhbGVDYXJ0KSB7XG4gICAgICAgIHRoaXMuX3NhbGVDYXJ0ID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcHVibGljIGFkZFNhbGUoc2FsZTogU2FsZSk6IHZvaWQge1xuICAgICAgICB0aGlzLnNhbGVMaXN0LnB1c2goc2FsZSk7XG5cbiAgICB9XG5cbiAgICBjYWxjdWxhdGVUb3RhbChzYWxlOiBTYWxlKTogbnVtYmVyIHtcbiAgICAgICAgbGV0IHN1YlRvdGFsID0gMC4wO1xuXG4gICAgICAgIGZvciAobGV0IGVudHJ5IG9mIHNhbGUuYm9va0FuZFF1YW50aXR5TWFwLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgc3ViVG90YWwgKz0gZW50cnlbMF0uYm9va1NwZWMucHJpY2UgKiBlbnRyeVsxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdWJUb3RhbDtcbiAgICB9XG5cbiAgICBnZW5lcmF0ZVNhbGVOdW1iZXIoY3VzdG9tZXJJZDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IHRvZGF5ID0gbmV3IERhdGUoKTtcbiAgICAgICAgbGV0IHJlY2VpcHROdW1iZXI6IHN0cmluZyA9IFwiU1wiICsgdG9kYXkuZ2V0RGF5KCkudG9TdHJpbmcoKSArIHRvZGF5LmdldE1vbnRoKCkudG9TdHJpbmcoKSArIHRvZGF5LmdldEZ1bGxZZWFyKCkudG9TdHJpbmcoKSArIHRvZGF5LmdldEhvdXJzKCkudG9TdHJpbmcoKSArIHRvZGF5LmdldE1pbnV0ZXMoKS50b1N0cmluZygpICsgdG9kYXkuZ2V0U2Vjb25kcygpLnRvU3RyaW5nKCkgKyBjdXN0b21lcklkLnRvU3RyaW5nKCk7XG5cbiAgICAgICAgcmV0dXJuIHJlY2VpcHROdW1iZXI7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFNhbGUoc2FsZU51bWJlcjogc3RyaW5nKTogU2FsZSB7XG5cbiAgICAgICAgbGV0IHNhbGUgPSB0aGlzLnNhbGVMaXN0LmZpbmQocyA9PiBzLm9wZXJhdGlvbk51bWJlciA9PT0gc2FsZU51bWJlcik7XG5cbiAgICAgICAgaWYgKHNhbGUpIHtcbiAgICAgICAgICAgIHJldHVybiBzYWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlbW92ZVNhbGUoc2FsZTogU2FsZSkge1xuICAgICAgICBsZXQgaW5kZXggPSB0aGlzLnNhbGVMaXN0LmluZGV4T2Yoc2FsZSk7XG4gICAgICAgIHRoaXMuc2FsZUxpc3Quc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkQm9va1RvQ2FydChib29rOiBCb29rLCBxdWFudGl0eTogbnVtYmVyLCBjdXN0b21lcklkOiBudW1iZXIpIHtcblxuICAgICAgICBpZiAodGhpcy5zYWxlQ2FydC5ib29rQW5kUXVhbnRpdHlNYXAuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5zYWxlQ2FydC5jdXN0b21lcklkID0gY3VzdG9tZXJJZDtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnNhbGVDYXJ0LmJvb2tBbmRRdWFudGl0eU1hcC5zaXplID4gMCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2FsZUNhcnQuY3VzdG9tZXJJZCAhPT0gY3VzdG9tZXJJZCkge1xuICAgICAgICAgICAgICAgIGFsZXJ0KFwiRmFya2zEsSBtw7zFn3Rlcml5ZSBraXRhcCBzYXTEsWxtYXlhIMOnYWzEscWfxLFsxLF5b3IuIEzDvHRmZW4gdGVrIG3DvMWfdGVyaSBpw6dpbiBpxZ9sZW0geWFwxLFuxLF6XCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2FsZUNhcnQuYm9va0FuZFF1YW50aXR5TWFwLnNldChib29rLCBxdWFudGl0eSk7XG4gICAgICAgIHRoaXMudXBkYXRlU2FsZUNhcnQoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdXBkYXRlU2FsZUNhcnQoKSB7XG4gICAgICAgIGNvbnN0IHNhbGVDYXJ0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzYWxlQ2FydFwiKTtcbiAgICAgICAgY29uc3Qgc3ViVG90YWxTcGFuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0b3RhbEFtb3VudFRsXCIpO1xuXG4gICAgICAgIGlmIChzYWxlQ2FydCkge1xuXG4gICAgICAgICAgICBsZXQgcm93LCBjb2x1bW4sIHN1YlRvdGFsOiBudW1iZXIgPSAwO1xuXG4gICAgICAgICAgICB3aGlsZSAoc2FsZUNhcnQubGFzdENoaWxkICYmIHNhbGVDYXJ0LmNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBzYWxlQ2FydC5yZW1vdmVDaGlsZChzYWxlQ2FydC5sYXN0Q2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3ViVG90YWxTcGFuIS50ZXh0Q29udGVudCA9IFwiXCI7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnNhbGVDYXJ0LmJvb2tBbmRRdWFudGl0eU1hcC5zaXplOyBpbmRleCsrKSB7XG5cbiAgICAgICAgICAgICAgICByb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgICAgIHJvdy5jbGFzc05hbWUgPSBcInJvdy1jYXJ0XCI7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBlbnRyeSBvZiB0aGlzLnNhbGVDYXJ0LmJvb2tBbmRRdWFudGl0eU1hcC5lbnRyaWVzKCkpIHtcblxuICAgICAgICAgICAgICAgICAgICBjb2x1bW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgICAgICAgICBjb2x1bW4uY2xhc3NOYW1lID0gXCJjb2x1bW4tY2FydFwiO1xuICAgICAgICAgICAgICAgICAgICBjb2x1bW4udGV4dENvbnRlbnQgPSB0aGlzLnNhbGVDYXJ0LmN1c3RvbWVySWQudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKGNvbHVtbik7XG5cbiAgICAgICAgICAgICAgICAgICAgY29sdW1uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uLmNsYXNzTmFtZSA9IFwiY29sdW1uLWNhcnRcIjtcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uLnRleHRDb250ZW50ID0gZW50cnlbMF0ubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKGNvbHVtbik7XG5cbiAgICAgICAgICAgICAgICAgICAgY29sdW1uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uLmNsYXNzTmFtZSA9IFwiY29sdW1uLWNhcnRcIjtcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uLnRleHRDb250ZW50ID0gZW50cnlbMV0udG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKGNvbHVtbik7XG5cbiAgICAgICAgICAgICAgICAgICAgY29sdW1uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uLmNsYXNzTmFtZSA9IFwiY29sdW1uLWNhcnRcIjtcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uLnRleHRDb250ZW50ID0gKGVudHJ5WzBdLmJvb2tTcGVjLnByaWNlICogZW50cnlbMV0pLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChjb2x1bW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHJvdyAmJiBzdWJUb3RhbFNwYW4pIHtcblxuICAgICAgICAgICAgICAgIGZvciAobGV0IHQgb2YgdGhpcy5zYWxlQ2FydC5ib29rQW5kUXVhbnRpdHlNYXApIHtcbiAgICAgICAgICAgICAgICAgICAgc3ViVG90YWwgKz0gdFswXS5ib29rU3BlYy5wcmljZSAqIHRbMV07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2FsZUNhcnQuYXBwZW5kQ2hpbGQocm93KTtcbiAgICAgICAgICAgICAgICBzdWJUb3RhbFNwYW4udGV4dENvbnRlbnQgPSBzdWJUb3RhbC50b1N0cmluZygpICsgXCIgVExcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cblxuICAgIH1cblxuICAgIHB1YmxpYyBjYXJ0VG9TYWxlKCkge1xuICAgICAgICBsZXQgc2FsZUNhcnQ6IFNhbGVDYXJ0ID0gdGhpcy5zYWxlQ2FydDtcbiAgICAgICAgbGV0IHNhbGUgPSBuZXcgU2FsZSgpO1xuXG4gICAgICAgIHNhbGUuYm9va0FuZFF1YW50aXR5TWFwID0gc2FsZUNhcnQuYm9va0FuZFF1YW50aXR5TWFwO1xuICAgICAgICBzYWxlLmN1c3RvbWVySWQgPSBzYWxlQ2FydC5jdXN0b21lcklkO1xuICAgICAgICBzYWxlLm9wZXJhdGlvbk51bWJlciA9IHRoaXMuZ2VuZXJhdGVTYWxlTnVtYmVyKHNhbGVDYXJ0LmN1c3RvbWVySWQpO1xuICAgICAgICBzYWxlLm9wZXJhdGlvbkRhdGVUaW1lID0gbmV3IERhdGUoKTtcbiAgICAgICAgc2FsZS50b3RhbCA9IHRoaXMuY2FsY3VsYXRlVG90YWwoc2FsZSk7XG5cbiAgICAgICAgZm9yIChsZXQgcSBvZiBzYWxlLmJvb2tBbmRRdWFudGl0eU1hcCkge1xuICAgICAgICAgICAgc3RvY2tTZXJ2aWNlLmluY3JlYXNlU3RvY2socVswXS5pc2JuLCAtcVsxXSlcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYWRkU2FsZU1vY2soc2FsZSk7XG4gICAgICAgIHRoaXMuc2FsZUNhcnQgPSBuZXcgU2FsZUNhcnQ7IC8vIHNlcGV0aSBib8WfYWx0XG4gICAgICAgIHRoaXMudXBkYXRlU2FsZUNhcnQoKTtcbiAgICB9XG5cbiAgICBhc3luYyBhZGRTYWxlTW9jayhzOiBTYWxlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHRoaXMuYWRkU2FsZUFwaSwge1xuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgYm9va0FuZFF1YW50aXR5OiBzLmJvb2tBbmRRdWFudGl0eU1hcCxcbiAgICAgICAgICAgICAgICAgICAgY3VzdG9tZXJJZDogcy5jdXN0b21lcklkLFxuICAgICAgICAgICAgICAgICAgICBvcGVyYXRpb25EYXRlVGltZTogcy5vcGVyYXRpb25EYXRlVGltZSxcbiAgICAgICAgICAgICAgICAgICAgb3BlcmF0aW9uTnVtYmVyOiBzLm9wZXJhdGlvbk51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgdG90YWw6IHMudG90YWxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSGF0YSBvbHXFn3R1LCBoYXRhIGtvZHU6ICR7cmVzcG9uc2Uuc3RhdHVzfSBgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gKGF3YWl0IHJlc3BvbnNlLmpzb24oKSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBhbGVydChyZXN1bHQubWVzc2FnZSArIFwiIFwiKyByZXN1bHQuc2FsZU51bWJlcik7XG5cbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnSGF0YSBPbHXFn3R1LicpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxuIiwiaW1wb3J0IHsgRGF0YUJhc2UgfSBmcm9tIFwiLi4vZGIvZGF0YWJhc2VcIjtcbmltcG9ydCB7IFN0b2NrIH0gZnJvbSBcIi4uL2RvbWFpbi9zdG9ja1wiO1xuXG5leHBvcnQgY2xhc3MgU3RvY2tTZXJ2aWNlIHtcbiAgICBwcml2YXRlIF9zdG9ja0xpc3Q6IEFycmF5PFN0b2NrPjtcblxuICAgIGNvbnN0cnVjdG9yKHN0b2NrTGlzdDogQXJyYXk8U3RvY2s+KSB7XG4gICAgICAgIHRoaXMuX3N0b2NrTGlzdCA9IHN0b2NrTGlzdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXR0ZXIgc3RvY2tMaXN0XG4gICAgICogQHJldHVybiB7QXJyYXk8U3RvY2s+fVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgc3RvY2tMaXN0KCk6IEFycmF5PFN0b2NrPiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdG9ja0xpc3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0dGVyIHN0b2NrTGlzdFxuICAgICAqIEBwYXJhbSB7QXJyYXk8U3RvY2s+fSB2YWx1ZVxuICAgICAqL1xuICAgIHB1YmxpYyBzZXQgc3RvY2tMaXN0KHZhbHVlOiBBcnJheTxTdG9jaz4pIHtcbiAgICAgICAgdGhpcy5fc3RvY2tMaXN0ID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogS2l0YXAgaGVuw7x6IGVrbGVuZGlrdGVuIHNvbnJhIGhlbWVuIGdpcml5b3IsXG4gICAgICogRWxpbWl6ZGUgaGnDpyBzdG9jayBrYXlkxLEvbmVzbmVzaSB5b2ssIHllbmkga2F5xLF0L25lc25lIG9sdcWfdHVydXlvcnV6XG4gICAgICogWWVuaSBla2xlbmVuIGtpdGFiYSBzdG9rIGVrbGVtZSBpxZ9sZW1pXG4gICAgICogQHBhcmFtIGlzYm4gIHN0b2sgZWtsZW5lY2VrIG9sYW4ga2l0YWLEsW4gaXNibiBudW1hcmFzxLFcbiAgICAgKiBAcGFyYW0gc2hlbGZOdW1iZXIgc3RvayBla2xlbmVjZWsgb2xhbiBraXRhYsSxbiByYWYgbnVtYXJhc8SxXG4gICAgICogQHBhcmFtIHF1YW50aXR5IGtpdGFwZGFuIGthw6cgYWRldCBzdG/En2EgZWtsZW5lY2VrXG4gICAgICovXG4gICAgcHVibGljIGFkZFN0b2NrKGlzYm46IHN0cmluZywgc2hlbGZOdW1iZXI6IHN0cmluZywgcXVhbnRpdHk6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgICB0cnkge1xuXG4gICAgICAgICAgICBsZXQgbmV3U3RvY2sgPSBuZXcgU3RvY2soaXNibiwgcXVhbnRpdHksIHNoZWxmTnVtYmVyKTtcbiAgICAgICAgICAgIHRoaXMuc3RvY2tMaXN0LnB1c2gobmV3U3RvY2spO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEtpdGFwIHphdGVuIGVrbGksIGhhbGloYXrEsXJkYSB2YXIsIGRhaGEgc29ucmEgeWVuaSBraXRhcGxhciBnZWxkaSxzdG9rIGFydMSxcm1hIGnFn2xlbWksXG4gICAgICogQHBhcmFtIGlzYm4gc3RvayBla2xlbmVjZWsgb2xhbiBraXRhYsSxbiBpc2JuIG51bWFyYXPEsVxuICAgICAqIEBwYXJhbSBxdWFudGl0eSBzdG9rIGVrbGVuZWNlayBvbGFuIGtpdGFixLFuIGFkZWRpXG4gICAgICogQHJldHVybnMgacWfbGVtIGdlcsOnZWtsZcWfbWVzaSBkdXJ1bXVuZGEgdHJ1ZSwgZGnEn2VyIGR1cnVtZGEgZmFsc2UgZMO2bmVyXG4gICAgICovXG4gICAgcHVibGljIGluY3JlYXNlU3RvY2soaXNibjogc3RyaW5nLCBxdWFudGl0eTogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICAgIGxldCBzdG9jayA9IHRoaXMuZ2V0U3RvY2soaXNibik7XG4gICAgICAgIGlmIChzdG9jaykge1xuICAgICAgICAgICAgc3RvY2sucXVhbnRpdHkgPSAoc3RvY2sucXVhbnRpdHkgKyBxdWFudGl0eSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHN0b2NrIG5lc25lc2luaSBnZXJpIGTDtm5kw7xyw7xyXG4gICAgICogQHBhcmFtIGlzYm4gc3RvY2sgbmVzbmVzaSBnZXRpcmlsZWNlayBvbGFuIG5lc25lbmluIGlzYm4gbm9zdSxcbiAgICAgKiBAcmV0dXJucyBkYiBvbGFuIHN0b2NrIG5lc25lbnNpIGdlcmkgZMO2bmVyLCBkYiBkZSB5b2sgaXNlIHRocm93IGlsZSBoYXRhIGbEsXJsYXTEsXJsxLFyXG4gICAgICovXG4gICAgcHVibGljIGdldFN0b2NrKGlzYm46IHN0cmluZykge1xuICAgICAgICBsZXQgc3RvY2sgPSB0aGlzLnN0b2NrTGlzdC5maW5kKHMgPT4gcy5pc2JuID09PSBpc2JuKTtcbiAgICAgICAgaWYgKHN0b2NrKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RvY2s7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0U3RvY2tRdWFudGl0eShpc2JuOiBzdHJpbmcpOiBudW1iZXIge1xuICAgICAgICBsZXQgczogU3RvY2sgPSB0aGlzLmdldFN0b2NrKGlzYm4pITtcblxuICAgICAgICBpZiAocykge1xuICAgICAgICAgICAgcmV0dXJuIHMucXVhbnRpdHk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBhZGRTdG9ja01vY2soczogU3RvY2spIHtcbiAgICAgICAgcG9zdEFkZFN0b2NrTW9jayhzKTtcbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHBvc3RBZGRTdG9ja01vY2soczogU3RvY2spIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwOi8vbG9jYWxob3N0OjMwMDIvYXBpL3N0b2Nrcy8nICsgcy5pc2JuLCB7XG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICBpc2JuOiBzLmlzYm4sXG4gICAgICAgICAgICAgICAgcXVhbnRpdHk6IHMucXVhbnRpdHlcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEhhdGEgb2x1xZ90dSwgaGF0YSBrb2R1OiAke3Jlc3BvbnNlLnN0YXR1c30gYCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZXN1bHQgPSAoYXdhaXQgcmVzcG9uc2UuanNvbigpKTtcbiAgICAgICAgY29uc29sZS5sb2cocmVzdWx0KTtcblxuICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbikge1xuICAgICAgICBjb25zb2xlLmxvZygnSGF0YSBPbHXFn3R1LicpO1xuICAgIH1cbn0iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYwNyk7XG4iXSwibmFtZXMiOlsiY29uc3RydWN0b3IiLCJ0aGlzIiwiX2Jvb2tzIiwiQXJyYXkiLCJfc3RvY2tzIiwiX2N1c3RvbWVycyIsIl9zYWxlcyIsIl9yZW50cyIsIl9ib29rU3BlY2lmaWNhdGlvbnMiLCJfY2FuY2VsU2FsZXMiLCJfc2FsZUNhcnQiLCJTYWxlQ2FydCIsImdldEJvb2tzTGlzdCIsImdldFN0b2Nrc0xpc3QiLCJnZXRDdXN0b21lcnNMaXN0IiwiZ2V0U2FsZXNMaXN0IiwiZ2V0UmVudHMiLCJnZXRCb29rU3BlY2lmaWNhdGlvbnMiLCJnZXRDYW5jYWxlZFNhbGVzIiwiZ2V0U2FsZUNhcnQiLCJzZXRTYWxlQ2FydCIsInZhbHVlIiwiaXNibiIsInByaWNlIiwic3RhcnREYXRlIiwiZW5kRGF0ZSIsIl9pc2JuIiwiX3ByaWNlIiwiX3N0YXJ0RGF0ZSIsIl9lbmREYXRlIiwibmFtZSIsImF1dGhvciIsInB1Ymxpc2hZZWFyIiwicGFnZXMiLCJib29rU3BlYyIsIl9uYW1lIiwiX2F1dGhvciIsIl9wdWJsaXNoWWVhciIsIl9wYWdlcyIsIl9ib29rU3BlYyIsImlkIiwic3VyTmFtZSIsInBob25lTnVtYmVyIiwiX2lkIiwiX3N1ck5hbWUiLCJfcGhvbmVOdW1iZXIiLCJib29rQW5kUXVhbnRpdHlNYXAiLCJNYXAiLCJvcGVyYXRpb25EYXRlVGltZSIsImN1c3RvbWVySWQiLCJvcGVyYXRpb25OdW1iZXIiLCJ0b3RhbCIsIl9ib29rQW5kUXVhbnRpdHlNYXAiLCJfb3BlcmF0aW9uRGF0ZVRpbWUiLCJfY3VzdG9tZXJJZCIsIl9vcGVyYXRpb25OdW1iZXIiLCJfdG90YWwiLCJxdWFudGl0eSIsInNoZWxmTnVtYmVyIiwiX3F1YW50aXR5IiwiX3NoZWxmTnVtYmVyIiwiZGIiLCJEYXRhQmFzZSIsInNob3dBbmRIaWRlIiwiYnRuSWQiLCJlbGVtZW50SWQiLCJlbGVtZW50IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImJ0biIsImFkZEV2ZW50TGlzdGVuZXIiLCJzdHlsZSIsImRpc3BsYXkiLCJib29rU2VydmljZSIsIkJvb2tTZXJ2aWNlIiwiY3VzdG9tZXJTZXJ2aWNlIiwiQ3VzdG9tZXJTZXJ2aWNlIiwiY2FuY2VsU2FsZVNlcnZpY2UiLCJDYW5jZWxTYWxlU2VydmljZSIsInJlbnRTZXJ2aWNlIiwiUmVudFNlcnZpY2UiLCJzYWxlU2VydmljZSIsIlNhbGVTZXJ2aWNlIiwic3RvY2tTZXJ2aWNlIiwiU3RvY2tTZXJ2aWNlIiwiY29uc29sZSIsImxvZyIsImFkZEN1c3RvbWVyIiwiQ3VzdG9tZXIiLCJhZGRTdG9jayIsImluaXRpbGlhemVTZXJ2aWNlcyIsImluaXRpYWxpemVCb29rc0RhdGFNb2NrIiwiYWRkQm9va0Zvcm0iLCJvbnN1Ym1pdCIsImZvcm1EYXRhIiwiRm9ybURhdGEiLCJ0aXRsZSIsImdldCIsIkRhdGUiLCJCb29rU3BlY2lmaWNhdGlvbiIsImJvb2siLCJCb29rIiwiYWRkQm9va01vY2siLCJhbGVydCIsInJlc2V0IiwiYWRkU3RvY2tGb3JtIiwicXVhbnR0aXkiLCJzdG9jayIsIlN0b2NrIiwic29tZSIsImIiLCJhZGRTdG9ja01vY2siLCJhZGRDdXN0b21lckZvcm0iLCJzdXJuYW1lIiwiY3VzdG9tZXIiLCJnZXROZXdDdXN0b21lcklkIiwiYWRkQ3VzdG9tZXJNb2NrIiwic2FsZUJvb2tGb3JtIiwiZ2V0Qm9vayIsInBhcnNlSW50IiwiaXNWYWxpZEN1c3RvbWVyIiwiZ2V0U3RvY2siLCJhZGRCb29rVG9DYXJ0IiwiZXJyb3IiLCJzYWxlQ2FydCIsInNpemUiLCJjYXJ0VG9TYWxlIiwiYm9va0xpc3QiLCJib29rU3BlY0xpc3QiLCJfYm9va0xpc3QiLCJfYm9va1NwZWNMaXN0IiwiZmluZCIsImFkZEJvb2siLCJuZXdCb29rIiwicHVzaCIsIkV4Y2VwdGlvbiIsImlzVmFsaWRCb29rIiwiaW5jbHVkZXMiLCJyZXNwb25zZSIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsIkFjY2VwdCIsIm9rIiwiRXJyb3IiLCJzdGF0dXMiLCJyZXN1bHQiLCJqc29uIiwiZ2V0UmVzdWx0IiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwibGlzdEJvb2tzIiwibGlzdEJvb2tzRGl2Iiwicm93IiwiY29sdW1uIiwibGFzdENoaWxkIiwiY2hpbGRyZW4iLCJsZW5ndGgiLCJyZW1vdmVDaGlsZCIsImZvckVhY2giLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwidGV4dENvbnRlbnQiLCJ0b1N0cmluZyIsImFwcGVuZENoaWxkIiwiZ2V0U3RvY2tRdWFudGl0eSIsImJvZHkiLCJjYW5jZWxsZWRTYWxlc0xpc3QiLCJfY2FuY2VsbGVkU2FsZXNMaXN0IiwiY2FuY2VsU2FsZSIsInJlZnVuZCIsImNhbGN1bGF0ZVJlZnVuZCIsImNhbGN1bGF0ZURpZmZIb3VycyIsImNhbmNlbGVkRGF0ZVRpbWUiLCJzYWxlIiwiZDEiLCJkMiIsImRpZmZNaWxpcyIsImdldFRpbWUiLCJNYXRoIiwiZmxvb3IiLCJjdXN0b21lckxpc3QiLCJjdXN0b21lckFwaSIsIl9jdXN0b21lckxpc3QiLCJuZXdDdXN0b21lciIsImxhc3RDdXN0b21lcklkIiwiYXQiLCJnZXRDdXN0b21lckluZm8iLCJyZW50TGlzdCIsIl9yZW50TGlzdCIsInJlZnVuZFBlcmNlbnQiLCJhZGRSZW50IiwicmVudCIsImNhbGN1bGF0ZVRvdGFsIiwic3ViVG90YWwiLCJlbnRyeSIsImdlbmVyYXRlUmVudE51bWJlciIsInRvZGF5IiwiZ2V0RGF5IiwiZ2V0TW9udGgiLCJnZXRGdWxsWWVhciIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJzYWxlTGlzdCIsImFkZFNhbGVBcGkiLCJfc2FsZUxpc3QiLCJhZGRTYWxlIiwiZW50cmllcyIsImdlbmVyYXRlU2FsZU51bWJlciIsImdldFNhbGUiLCJzYWxlTnVtYmVyIiwicyIsInJlbW92ZVNhbGUiLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCJzZXQiLCJ1cGRhdGVTYWxlQ2FydCIsInN1YlRvdGFsU3BhbiIsInQiLCJTYWxlIiwicSIsImluY3JlYXNlU3RvY2siLCJhZGRTYWxlTW9jayIsImJvb2tBbmRRdWFudGl0eSIsIm1lc3NhZ2UiLCJzdG9ja0xpc3QiLCJfc3RvY2tMaXN0IiwibmV3U3RvY2siLCJwb3N0QWRkU3RvY2tNb2NrIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiZXhwb3J0cyIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJjYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==