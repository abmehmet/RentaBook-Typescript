(()=>{"use strict";var t={221:(t,e,o)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.DataBase=void 0;const n=o(758),r=o(51);e.DataBase=class{constructor(){this._books=new Array,this._stocks=new Array,this._customers=new Array,this._sales=new Array,this._rents=new Array,this._bookSpecifications=new Array,this._cancels=new Array,this._saleCart=new r.SaleCart,this._rentCart=new n.RentCart}get getBooksList(){return this._books}get getStocksList(){return this._stocks}get getCustomersList(){return this._customers}get getSalesList(){return this._sales}get getRents(){return this._rents}get getBookSpecifications(){return this._bookSpecifications}get getCancaledSales(){return this._cancels}get getSaleCart(){return this._saleCart}get getRentCart(){return this._rentCart}set setSaleCart(t){this._saleCart=t}set setRentCart(t){this._rentCart=t}}},333:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.BookPrice=void 0,e.BookPrice=class{get id(){return this._id}set id(t){this._id=t}get price(){return this._price}get startDate(){return this._startDate}get endDate(){return this._endDate}set price(t){this._price=t}set startDate(t){this._startDate=t}set endDate(t){this._endDate=t}}},934:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Book=void 0,e.Book=class{constructor(t,e,o,n,r,i){this._name=e,this._author=o,this._isbn=t,this._publishYear=n,this._pages=r,this._bookPrice=i}get id(){return this._id}set id(t){this._id=t}get isbn(){return this._isbn}get name(){return this._name}get author(){return this._author}get publishYear(){return this._publishYear}get pages(){return this._pages}get bookPrice(){return this._bookPrice}set isbn(t){this._isbn=t}set name(t){this._name=t}set author(t){this._author=t}set publishYear(t){this._publishYear=t}set pages(t){this._pages=t}set bookPrice(t){this._bookPrice=t}}},916:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Customer=void 0,e.Customer=class{constructor(t,e,o){this._name=t,this._surName=e,this._phoneNumber=o}get id(){return this._id}set id(t){this._id=t}get name(){return this._name}get surName(){return this._surName}get phoneNumber(){return this._phoneNumber}set name(t){this._name=t}set surName(t){this._surName=t}set phoneNumber(t){this._phoneNumber=t}}},767:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OrderBookItems=void 0,e.OrderBookItems=class{constructor(t,e){this._book=t,this._quantity=e}get book(){return this._book}get quantity(){return this._quantity}set book(t){this._book=t}set quantity(t){this._quantity=t}toJSON(){return{book:this._book,quantity:this._quantity}}}},758:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.RentCart=void 0,e.RentCart=class{constructor(){this.orderBookItems=new Array}}},51:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SaleCart=void 0,e.SaleCart=class{constructor(){this.orderBookItems=new Array}}},72:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Stock=void 0,e.Stock=class{constructor(t,e,o){this._quantity=t,this._shelfNumber=e,this._book=o}get id(){return this._id}set id(t){this._id=t}get book(){return this._book}set book(t){this._book=t}get quantity(){return this._quantity}get shelfNumber(){return this._shelfNumber}set quantity(t){this._quantity=t}set shelfNumber(t){this._shelfNumber=t}}},607:function(t,e,o){var n=this&&this.__awaiter||function(t,e,o,n){return new(o||(o=Promise))((function(r,i){function a(t){try{c(n.next(t))}catch(t){i(t)}}function s(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(a,s)}c((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.stockService=e.saleService=e.rentService=e.cancelService=e.customerService=e.bookService=void 0;const r=o(221),i=o(934),a=o(333),s=o(916),c=o(72),l=o(946),u=o(943),d=o(709),h=o(148),m=o(478),k=o(214);function p(){return n(this,void 0,void 0,(function*(){e.bookService.bookList=yield e.bookService.getAllBooksData(),e.stockService.stockList=yield e.stockService.getAllStocksData(),e.customerService.customerList=yield e.customerService.getAllCustomersData(),console.table(e.bookService.bookList),console.table(e.stockService.stockList),console.table(e.customerService.customerList),console.log("Data intiliazed.")}))}function v(t,e){const o=document.getElementById(e),n=document.getElementById(t);o&&n&&n.addEventListener("click",(()=>{"none"===o.style.display?o.style.display="block":o.style.display="none"}))}var f;f=new r.DataBase,e.bookService=new l.BookService(f.getBooksList,f.getBookSpecifications),e.customerService=new d.CustomerService(f.getCustomersList),e.cancelService=new u.CancelService(f.getCancaledSales),e.rentService=new h.RentService(f.getRents,f.getRentCart),e.saleService=new m.SaleService(f.getSalesList,f.getSaleCart),e.stockService=new k.StockService(f.getStocksList),console.log("Services intiliazed."),p(),v("addBookMenuItem","addBookSection"),v("showBooksMenuItem","listBooksSection"),v("addCustomerMenuItem","addCustomerSection"),v("addStockMenuItem","addStockSection"),v("saleBookMenuItem","saleBookSection"),v("rentBookMenuItem","rentBookSection"),v("cancelSaleMenuItem","cancelSaleSection"),v("cancelRentMenuItem","cancelRentSection"),v("refundBookMenuItem","refundBookSection"),v("rentNow","rentBookSection");const y=document.getElementById("add-book-form");null!=y&&(y.onsubmit=t=>n(void 0,void 0,void 0,(function*(){t.preventDefault();const o=new FormData(y),n=o.get("bookTitle"),r=o.get("bookAuthor"),s=o.get("bookIsbn"),c=o.get("bookPublishYear"),l=o.get("bookPages"),u=o.get("bookPrice");let d=new a.BookPrice;d.price=u;let h=new i.Book(s,n,r,c,l,d);if(!1===e.bookService.bookList.some((t=>t.isbn===h.isbn))){try{yield e.bookService.createBook(h),alert(h.isbn+" numaralı kitap Ekleme İşlemi Başarı İle Tamamlanmıştır."),y.reset(),I()}catch(t){alert(h.isbn+" numaralı kitap Ekleme İşlemi Sırasında Bir Hata oluştu.")}return!1}alert("Aynı ISBN numrasına sahip ikinci bir kitap eklenemz.")})));const b=document.getElementById("add-stock-form");b&&(b.onsubmit=t=>n(void 0,void 0,void 0,(function*(){t.preventDefault();const o=new FormData(b),n=o.get("bookIsbnForAddStock"),r=o.get("stockQuantity"),i=o.get("shelfNumber"),a=e.bookService.bookList.find((t=>t.isbn===n));if(a){const t=new c.Stock(r,i,a);(yield e.stockService.createStock(t))&&(alert(n+" isbn numaralı kitaptan, "+r+" kadar sisteme stok eklenmiştir."),yield p(),yield I())}else alert("Stok eklenmeye çalışılan kitaba ait isbn numarası hatalıdır.");return b.reset(),!1})));const g=document.getElementById("add-customer-form");g&&(g.onsubmit=t=>n(void 0,void 0,void 0,(function*(){t.preventDefault();const o=new FormData(g),n=o.get("customerName"),r=o.get("customerSurname"),i=o.get("customerPhoneNumber"),a=new s.Customer(n,r,i);return(yield e.customerService.createCustomer(a))?(alert("Müşteri Ekleme İşlemi Başarı İle Tamamlanmıştır. "),g.reset()):alert("Müşteri Ekleme İşlemi Sırasında bir hata ile karşılıldı. "),!1})));const S=document.getElementById("sale-book-form");S&&(S.onsubmit=t=>n(void 0,void 0,void 0,(function*(){t.preventDefault();const o=new FormData(S),n=o.get("isbnForSale"),r=parseInt(o.get("customerIdForSale")),i=parseInt(o.get("quantityForSale"));try{let t=yield e.bookService.getBook(n);if(t){let o=yield e.stockService.getStockByBookId(t.id);o?o.quantity>=i?(yield e.customerService.getCustomer(r))?e.saleService.addBookToCart(t,i,r):alert(r+" numaralı müşteri kayıtlı değildir."):alert(i+" kadar kitap dükkanda mevcut değildir."):alert(`Dükkanda ${n} numaralı kitabın stoğu mevcut değildir.`)}else alert(n+" numaralı kitap dükkanda kayıtlı değildir.");return S.reset(),!1}catch(t){alert(t.message)}}))),document.getElementById("btnSale").addEventListener("click",(t=>n(void 0,void 0,void 0,(function*(){if(t.preventDefault(),0===e.saleService.saleCart.orderBookItems.length)alert("Sepette ürün yok. Lütfen önce ürün ekleyiniz");else try{let t=yield e.saleService.createSale();t?(I(),alert("Kitap satış işlemi başarıyla gerçekleşmiştir."),alert("Fişinizi kaybetmeyiniz. Fiş Numarası: "+t.operationNumber)):alert("Kitap satış işleminde hata meydana geldi")}catch(t){alert(t.message)}})))),document.getElementById("showBooksMenuItem").addEventListener("click",(()=>{I()}));const C=document.getElementById("cancel-sale-form");C&&(C.onsubmit=t=>n(void 0,void 0,void 0,(function*(){t.preventDefault();const o=new FormData(C).get("saleNumberforCancel");!0===(yield e.saleService.isExistSale(o))?(yield e.cancelService.cancelSale(o))?(I(),alert(o+" numaralı satış iptal edilmiştir.")):alert(o+" numaralı satış iptal edilirken hata meydana geldi."):alert(o+" numaralı satış bulunamamıştır. Tekrar deneyiniz.")})));const _=document.getElementById("cancel-rent-form");_&&(_.onsubmit=t=>n(void 0,void 0,void 0,(function*(){t.preventDefault();const o=new FormData(_).get("rentNumberforCancel");(yield e.cancelService.cancelRent(o))?(I(),alert(o+" numaralı kiralama iptal edilmiştir.")):alert(o+" numaralı kiralma bulunamamıştır. Tekrar deneyiniz.")})));const B=document.getElementById("rent-book-form");B&&(B.onsubmit=t=>n(void 0,void 0,void 0,(function*(){t.preventDefault();const o=new FormData(B),n=o.get("isbnForRent"),r=parseInt(o.get("customerIdForRent")),i=parseInt(o.get("quantityForRent"));try{let t=yield e.bookService.getBook(n);if(t){const o=yield e.stockService.getStockByBookId(t.id);o?o.quantity>=i?(yield e.customerService.getCustomer(r))?e.rentService.addBookToCart(t,i,r):alert(r+" numaralı müşteri kayıtlı değildir."):alert(i+" kadar kitap dükkanda mevcut değildir."):alert(`Dükkanda ${n} numaralı kitabın stoğu mevcut değildir. Önce stok ekleyiniz`)}else alert(n+" numaralı kitap yoktur.");return B.reset(),!1}catch(t){alert(t.message)}}))),document.getElementById("btnRent").addEventListener("click",(t=>n(void 0,void 0,void 0,(function*(){if(t.preventDefault(),0===e.rentService.rentCart.orderBookItems.length)alert("Sepette ürün yok. Lütfen önce ürün ekleyiniz");else try{let t=yield e.rentService.createRent();t&&(alert("Kitap kiralama işlemi başarıyla gerçekleşmiştir."),alert("Fişinizi kaybetneyiniz. Fiş numaranız: "+t.operationNumber),I())}catch(t){alert(t.message)}}))));const w=document.getElementById("refund-book-form");function I(){return n(this,void 0,void 0,(function*(){e.bookService.bookList=yield e.bookService.getAllBooksData(),e.stockService.stockList=yield e.stockService.getAllStocksData();const t=document.getElementById("listBooks");if(t){let o,n;for(;t.lastChild&&t.children.length>1;)t.removeChild(t.lastChild);e.bookService.bookList.forEach((r=>{o=document.createElement("div"),o.className="row-list-book",n=document.createElement("div"),n.className="column-list-book",n.textContent=r.isbn.toString(),o.appendChild(n),n=document.createElement("div"),n.className="column-list-book",n.textContent=r.name.toString(),o.appendChild(n),n=document.createElement("div"),n.className="column-list-book",n.textContent=r.author.toString(),o.appendChild(n),n=document.createElement("div"),n.className="column-list-book";let i=0;!0===e.stockService.stockList.some((t=>t.book.id===r.id))&&(i=e.stockService.stockList.find((t=>t.book.id===r.id)).quantity),n.textContent=i.toString(),o.appendChild(n),n=document.createElement("div"),n.className="column-list-book",n.textContent=r.bookPrice.price.toString()+" ₺",o.appendChild(n),t.appendChild(o)}))}}))}w&&(w.onsubmit=t=>n(void 0,void 0,void 0,(function*(){t.preventDefault();const o=new FormData(w).get("rentNumberforRefund");if(!0===(yield e.rentService.isExistRent(o))){let t=yield e.rentService.refundRent(o);t?(I(),alert(t.operationNumber+" numaralı kiralama geri alınmıştır."),alert("Geri ödeme miktarı:"+t.refund+" ₺ .")):alert(o+" numaralı kiralama iptal edilirken hata meydana geldi.")}else alert(o+" numaralı kiralama bulunamamıştır. Tekrar deneyiniz.")})))},946:function(t,e){var o=this&&this.__awaiter||function(t,e,o,n){return new(o||(o=Promise))((function(r,i){function a(t){try{c(n.next(t))}catch(t){i(t)}}function s(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(a,s)}c((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.BookService=void 0;const n="http://localhost:3002/api/v1/books";e.BookService=class{constructor(t,e){this._bookList=t,this._bookSpecification=e}get bookList(){return this._bookList}get bookSpecification(){return this._bookSpecification}set bookList(t){this._bookList=t}set bookSpecification(t){this._bookSpecification=t}getBook(t){return o(this,void 0,void 0,(function*(){const e=yield fetch(n+"/q?isbn="+t,{method:"GET",headers:{Accept:"application/json"}});return e.ok?yield e.json():null}))}getAllBooksData(){return o(this,void 0,void 0,(function*(){const t=yield fetch(n,{method:"GET",headers:{Accept:"application/json"}});if(!t.ok)throw new Error(`Hata oluştu, hata kodu: ${t.status} `);return yield t.json()}))}createBook(t){return o(this,void 0,void 0,(function*(){const e=yield fetch(n,{method:"POST",body:JSON.stringify({isbn:t.isbn,name:t.name,author:t.author,pages:t.pages,publishYear:t.publishYear,bookPriceCreateDto:{price:t.bookPrice.price}}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(!e.ok)throw new Error(`Hata oluştu, hata kodu: ${e.status} `);const o=yield e.json();console.log("Rest servisinden dönen cevap =>"),console.log(o),this.bookList=yield this.getAllBooksData()}))}}},943:function(t,e){var o=this&&this.__awaiter||function(t,e,o,n){return new(o||(o=Promise))((function(r,i){function a(t){try{c(n.next(t))}catch(t){i(t)}}function s(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(a,s)}c((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.CancelService=void 0;const n="http://localhost:3002/api/v1/sales";e.CancelService=class{constructor(t){this._cancelledList=t}get cancelledList(){return this._cancelledList}set cancelledList(t){this._cancelledList=t}cancelRent(t){return o(this,void 0,void 0,(function*(){const e=yield fetch(n+"/"+t,{method:"DELETE",headers:{"Content-Type":"application/json",Accept:"application/json"}});return!!e.ok&&(console.log(e),!0)}))}cancelSale(t){return o(this,void 0,void 0,(function*(){try{const e=yield fetch(n+"/"+t,{method:"DELETE",headers:{"Content-Type":"application/json",Accept:"application/json"}});if(e.ok)return console.log(e),!0;throw new Error(`Hata oluştu, hata kodu: ${e.status} `)}catch(t){console.log("Hata Oluştu.")}}))}}},709:function(t,e){var o=this&&this.__awaiter||function(t,e,o,n){return new(o||(o=Promise))((function(r,i){function a(t){try{c(n.next(t))}catch(t){i(t)}}function s(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(a,s)}c((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.CustomerService=void 0;const n="http://localhost:3002/api/v1/customers";e.CustomerService=class{constructor(t){this._customerList=t}get customerList(){return this._customerList}set customerList(t){this._customerList=t}getAllCustomersData(){return o(this,void 0,void 0,(function*(){const t=yield fetch(n,{method:"GET",headers:{Accept:"application/json"}});if(!t.ok)throw new Error(`Hata oluştu, hata kodu: ${t.status} `);return yield t.json()}))}createCustomer(t){return o(this,void 0,void 0,(function*(){try{const e=yield fetch(n,{method:"POST",body:JSON.stringify({name:t.name,surName:t.surName,phoneNumber:t.phoneNumber}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(e.ok){const t=yield e.json();return console.log("Rest servisinden dönen cevap =>"),console.log(t),!0}throw new Error(`Hata oluştu, hata kodu: ${e.status} `)}catch(t){console.log("Hata Oluştu.")}}))}getCustomer(t){return o(this,void 0,void 0,(function*(){const e=yield fetch(n+"/"+t,{method:"GET",headers:{Accept:"application/json"}});if(!e.ok)throw new Error(`Aranan müşteri bulunamadı, hata kodu:, ${e.status}`);return yield e.json()}))}}},148:function(t,e,o){var n=this&&this.__awaiter||function(t,e,o,n){return new(o||(o=Promise))((function(r,i){function a(t){try{c(n.next(t))}catch(t){i(t)}}function s(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(a,s)}c((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.RentService=void 0;const r=o(758),i=o(767),a="http://localhost:3002/api/v1/rents";e.RentService=class{constructor(t,e){this._rentList=t,this.refundPercent=.75,this._rentCart=e}get rentList(){return this._rentList}set rentList(t){this._rentList=t}get rentCart(){return this._rentCart}set rentCart(t){this._rentCart=t}calculateTotal(){let t=0;for(let e of this.rentCart.orderBookItems)t+=e.book.bookPrice.price*e.quantity;return t}getRent(t){return n(this,void 0,void 0,(function*(){try{const e=yield fetch(a+"/"+t,{method:"GET",headers:{Accept:"application/json"}});if(!e.ok)return null;return yield e.json()}catch(t){return t instanceof Error?console.log("error message: ",t.message):console.log("unexpected error: ",t),null}}))}addBookToCart(t,e,o){if(0===this.rentCart.orderBookItems.length)this.rentCart.customerId=o;else if(this.rentCart.orderBookItems.length>0&&this.rentCart.customerId!==o)return alert("Farklı müşteriye kitap kiralanmaya çalışılıyor. Lütfen tek müşteri için işlem yapınız"),!1;let n=new i.OrderBookItems(t,e),r=this.rentCart.orderBookItems.findIndex((e=>e.book.isbn===t.isbn));-1===r?this.rentCart.orderBookItems.push(n):this.rentCart.orderBookItems[r]=n,this.updateRentCart()}updateRentCart(){const t=document.getElementById("rentCart"),e=document.getElementById("totalRentAmountTl");if(t){let o,n,r=0;for(;t.lastChild&&t.children.length>1;)t.removeChild(t.lastChild);e.textContent="";for(let t=0;t<this.rentCart.orderBookItems.length;t++){o=document.createElement("div"),o.className="rent-cart-row";for(let t of this.rentCart.orderBookItems)n=document.createElement("div"),n.className="rent-cart-column",n.textContent=this.rentCart.customerId.toString(),o.appendChild(n),n=document.createElement("div"),n.className="rent-cart-column",n.textContent=t.book.name,o.appendChild(n),n=document.createElement("div"),n.className="rent-cart-column",n.textContent=t.quantity.toString(),o.appendChild(n),n=document.createElement("div"),n.className="rent-cart-column",n.textContent=(t.book.bookPrice.price*t.quantity).toString(),o.appendChild(n)}if(o&&e){for(let t of this.rentCart.orderBookItems)r+=t.book.bookPrice.price*t.quantity;t.appendChild(o),e.textContent=r.toString()+" TL"}}}createRent(){return n(this,void 0,void 0,(function*(){const t=yield fetch(a,{method:"POST",body:JSON.stringify({orderBookItems:Array.from(this.rentCart.orderBookItems),customerId:this.rentCart.customerId,total:this.calculateTotal()}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(!t.ok)throw new Error(`Hata oluştu, hata kodu: ${t.status} `);const e=yield t.json();return console.log("Rest apidan dönen cevap:\n"),console.log(e),this.rentCart=new r.RentCart,this.updateRentCart(),e}))}refundRent(t){return n(this,void 0,void 0,(function*(){try{const e=yield fetch("http://localhost:3002/api/v1/refunds/rents/"+t,{method:"PATCH",headers:{"Content-Type":"application/json",Accept:"application/json"}});if(e.ok){const t=yield e.json();return console.log(t),t}throw new Error(`Hata oluştu, hata kodu: ${e.status} `)}catch(t){return console.log("Hata Oluştu."),null}}))}isExistRent(t){return n(this,void 0,void 0,(function*(){const e=yield fetch(a+"/"+t,{method:"GET",headers:{"Content-Type":"application/json",Accept:"application/json"}});if(console.log(e),e.ok){const t=yield e.json();return console.log("Rest apidan dönen cevap:\n"),console.log(t),!0}return!1}))}}},478:function(t,e,o){var n=this&&this.__awaiter||function(t,e,o,n){return new(o||(o=Promise))((function(r,i){function a(t){try{c(n.next(t))}catch(t){i(t)}}function s(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(a,s)}c((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.SaleService=void 0;const r=o(767),i=o(51),a="http://localhost:3002/api/v1/sales";e.SaleService=class{constructor(t,e){this._saleList=t,this._saleCart=e}get saleList(){return this._saleList}set saleList(t){this._saleList=t}get saleCart(){return this._saleCart}set saleCart(t){this._saleCart=t}calculateTotal(t){let e=0;for(let o of t)e+=o.book.bookPrice.price*o.quantity;return e}addBookToCart(t,e,o){if(0===this.saleCart.orderBookItems.length)this.saleCart.customerId=o;else if(this.saleCart.orderBookItems.length>0&&this.saleCart.customerId!==o)return alert("Farklı müşteriye kitap satılmaya çalışılıyor. Lütfen tek müşteri için işlem yapınız"),!1;let n=new r.OrderBookItems(t,e),i=this.saleCart.orderBookItems.findIndex((e=>e.book.isbn===t.isbn));-1===i?this.saleCart.orderBookItems.push(n):this.saleCart.orderBookItems[i]=n,this.updateSaleCart()}updateSaleCart(){const t=document.getElementById("saleCart"),e=document.getElementById("totalSaleAmountTl");if(t){let o,n,r=0;for(;t.lastChild&&t.children.length>1;)t.removeChild(t.lastChild);e.textContent="";for(let t=0;t<this.saleCart.orderBookItems.length;t++){o=document.createElement("div"),o.className="sale-cart-row";for(let t of this.saleCart.orderBookItems)n=document.createElement("div"),n.className="sale-cart-column",n.textContent=this.saleCart.customerId.toString(),o.appendChild(n),n=document.createElement("div"),n.className="sale-cart-column",n.textContent=t.book.name,o.appendChild(n),n=document.createElement("div"),n.className="sale-cart-column",n.textContent=t.quantity.toString(),o.appendChild(n),n=document.createElement("div"),n.className="sale-cart-column",n.textContent=(t.book.bookPrice.price*t.quantity).toString(),o.appendChild(n)}if(o&&e){for(let t of this.saleCart.orderBookItems)r+=t.book.bookPrice.price*t.quantity;t.appendChild(o),e.textContent=r.toString()+" TL"}}}createSale(){return n(this,void 0,void 0,(function*(){const t=yield fetch(a,{method:"POST",body:JSON.stringify({orderBookItems:Array.from(this.saleCart.orderBookItems),customerId:this.saleCart.customerId,total:this.calculateTotal(this.saleCart.orderBookItems)}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(!t.ok)throw new Error(`Kitap satış işleminde hata meydana geldi, hata kodu: ${t.status} `);const e=yield t.json();return this.saleCart=new i.SaleCart,this.updateSaleCart(),console.log("Rest apidan dönen cevap:\n"),console.log(e),e}))}isExistSale(t){return n(this,void 0,void 0,(function*(){const e=yield fetch(a+"/"+t,{method:"GET",headers:{"Content-Type":"application/json",Accept:"application/json"}});if(console.log(e),!e.ok)return!1;const o=yield e.json();return console.log("Rest apidan dönen cevap:\n"),console.log(o),!0}))}}},214:function(t,e){var o=this&&this.__awaiter||function(t,e,o,n){return new(o||(o=Promise))((function(r,i){function a(t){try{c(n.next(t))}catch(t){i(t)}}function s(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(a,s)}c((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.StockService=void 0;const n="http://localhost:3002/api/v1/stocks";e.StockService=class{constructor(t){this._stockList=t}get stockList(){return this._stockList}set stockList(t){this._stockList=t}getStockByBookId(t){return o(this,void 0,void 0,(function*(){const e=yield fetch(n+"/q?bookId="+t,{method:"GET",headers:{"Content-Type":"application/json",Accept:"application/json"}});if(!e.ok)throw new Error(`Stok bilgisine ulaşılamadı, Hata kodu: ${e.status} `);return yield e.json()}))}createStock(t){return o(this,void 0,void 0,(function*(){try{const e=yield fetch(n,{method:"POST",body:JSON.stringify({quantity:t.quantity,shelfNumber:t.shelfNumber,book:t.book}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(e.ok){const t=yield e.json();return console.log(t),!0}throw new Error(`Hata oluştu, hata kodu: ${e.status} `)}catch(t){console.log("Hata Oluştu."+t)}}))}getAllStocksData(){return o(this,void 0,void 0,(function*(){const t=yield fetch(n,{method:"GET",headers:{Accept:"application/json"}});if(!t.ok)throw new Error(`Hata oluştu, hata kodu: ${t.status} `);const e=yield t.json();return JSON.parse(JSON.stringify(e,null,4))}))}}}},e={};!function o(n){var r=e[n];if(void 0!==r)return r.exports;var i=e[n]={exports:{}};return t[n].call(i.exports,i,i.exports,o),i.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,