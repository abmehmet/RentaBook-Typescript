(()=>{"use strict";var t={221:(t,e,o)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.DataBase=void 0;const i=o(51);e.DataBase=class{constructor(){this._books=new Array,this._stocks=new Array,this._customers=new Array,this._sales=new Array,this._rents=new Array,this._bookSpecifications=new Array,this._cancelSales=new Array,this._saleCart=new i.SaleCart}get getBooksList(){return this._books}get getStocksList(){return this._stocks}get getCustomersList(){return this._customers}get getSalesList(){return this._sales}get getRents(){return this._rents}get getBookSpecifications(){return this._bookSpecifications}get getCancaledSales(){return this._cancelSales}get getSaleCart(){return this._saleCart}set setSaleCart(t){this._saleCart=t}}},39:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.BookSpecification=void 0,e.BookSpecification=class{constructor(t,e,o,i){this._isbn=t,this._price=e,this._startDate=o,this._endDate=i}get isbn(){return this._isbn}get price(){return this._price}get startDate(){return this._startDate}get endDate(){return this._endDate}set isbn(t){this._isbn=t}set price(t){this._price=t}set startDate(t){this._startDate=t}set endDate(t){this._endDate=t}}},934:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Book=void 0,e.Book=class{constructor(t,e,o,i,n,s){this._name=e,this._author=o,this._isbn=t,this._publishYear=i,this._pages=n,this._bookSpec=s}get isbn(){return this._isbn}get name(){return this._name}get author(){return this._author}get publishYear(){return this._publishYear}get pages(){return this._pages}get bookSpec(){return this._bookSpec}set isbn(t){this._isbn=t}set name(t){this._name=t}set author(t){this._author=t}set publishYear(t){this._publishYear=t}set pages(t){this._pages=t}set bookSpec(t){this._bookSpec=t}}},41:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.CancelSale=void 0,e.CancelSale=class{constructor(t,e,o){this._sale=t,this._refund=e,this._canceledDateTime=o}get sale(){return this._sale}get refund(){return this._refund}get canceledDateTime(){return this._canceledDateTime}set sale(t){this._sale=t}set refund(t){this._refund=t}set canceledDateTime(t){this._canceledDateTime=t}}},916:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Customer=void 0,e.Customer=class{constructor(t,e,o,i){this._id=t,this._name=e,this._surName=o,this._phoneNumber=i}get id(){return this._id}get name(){return this._name}get surName(){return this._surName}get phoneNumber(){return this._phoneNumber}set id(t){this._id=t}set name(t){this._name=t}set surName(t){this._surName=t}set phoneNumber(t){this._phoneNumber=t}}},51:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SaleCart=void 0,e.SaleCart=class{constructor(){this.bookAndQuantityMap=new Map}}},354:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Sale=void 0,e.Sale=class{constructor(t,e,o,i,n){this._bookAndQuantityMap=new Map,this._bookAndQuantityMap=t,this._operationDateTime=e,this._customerId=o,this._operationNumber=i,this._total=n}get bookAndQuantityMap(){return this._bookAndQuantityMap}get operationDateTime(){return this._operationDateTime}get customerId(){return this._customerId}get operationNumber(){return this._operationNumber}get total(){return this._total}set bookAndQuantityMap(t){this._bookAndQuantityMap=t}set operationDateTime(t){this._operationDateTime=t}set customerId(t){this._customerId=t}set operationNumber(t){this._operationNumber=t}set total(t){this._total=t}}},72:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Stock=void 0,e.Stock=class{constructor(t,e,o){this._isbn=t,this._quantity=e,this._shelfNumber=o}get isbn(){return this._isbn}get quantity(){return this._quantity}get shelfNumber(){return this._shelfNumber}set isbn(t){this._isbn=t}set quantity(t){this._quantity=t}set shelfNumber(t){this._shelfNumber=t}}},607:function(t,e,o){var i=this&&this.__awaiter||function(t,e,o,i){return new(o||(o=Promise))((function(n,s){function a(t){try{c(i.next(t))}catch(t){s(t)}}function r(t){try{c(i.throw(t))}catch(t){s(t)}}function c(t){var e;t.done?n(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(a,r)}c((i=i.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.stockService=e.saleService=e.rentService=e.cancelSaleService=e.customerService=e.bookService=void 0;const n=o(221),s=o(934),a=o(39),r=o(41),c=o(916),l=o(354),u=o(72),d=o(946),h=o(609),m=o(709),p=o(148),k=o(478),S=o(214);function b(t,e){const o=document.getElementById(e),i=document.getElementById(t);o&&i&&i.addEventListener("click",(()=>{"none"===o.style.display?o.style.display="block":o.style.display="none"}))}var f;f=new n.DataBase,e.bookService=new d.BookService(f.getBooksList,f.getBookSpecifications),e.customerService=new m.CustomerService(f.getCustomersList),e.cancelSaleService=new h.CancelSaleService(f.getCancaledSales),e.rentService=new p.RentService(f.getRents),e.saleService=new k.SaleService(f.getSalesList,f.getSaleCart),e.stockService=new S.StockService(f.getStocksList),console.log("Services intiliazed."),e.customerService.addCustomer(new c.Customer(1,"","","")),e.customerService.addCustomer(new c.Customer(2,"","","")),e.stockService.addStock("123-45","A45-52",10),e.stockService.addStock("123-46","A45-52",10),function(){i(this,void 0,void 0,(function*(){yield e.bookService.initializeDataMock()}))}(),b("addBookMenuItem","addBookSection"),b("showBooksMenuItem","listBooksSection"),b("addCustomerMenuItem","addCustomerSection"),b("addStockMenuItem","addStockSection"),b("saleBookMenuItem","saleBookSection"),b("cancelSaleMenuItem","cancelSaleSection");const g=document.getElementById("add-book-form");null!=g&&(g.onsubmit=t=>i(void 0,void 0,void 0,(function*(){t.preventDefault();const o=new FormData(g),i=o.get("bookTitle"),n=o.get("bookAuthor"),r=o.get("bookIsbn"),c=o.get("bookPublishYear"),l=o.get("bookPages"),u=o.get("bookPrice"),d=new Date,h=new Date("Dec 31, 9999 23:59:59"),m=new a.BookSpecification(r,u,d,h),p=new s.Book(r,i,n,c,l,m);return(yield e.bookService.addBookMock(p))?(alert(p.isbn+" numaralı Kitap Ekleme İşlemi Başarı İle Tamamlanmıştır."),g.reset()):alert(p.isbn+" numaralı Kitap Ekleme İşlemi Sırasında Bir Hata oluştu."),!1})));const v=document.getElementById("add-stock-form");v&&(v.onsubmit=t=>i(void 0,void 0,void 0,(function*(){t.preventDefault();const o=new FormData(v),i=o.get("bookIsbnForAddStock"),n=o.get("stockQuantity"),s=o.get("shelfNumber"),a=new u.Stock(i,n,s);return e.bookService.bookList.some((t=>t.isbn==i))?(yield e.stockService.addStockMock(a))&&alert(i+" isbn numaralı kitaptan, "+n+" kadar sisteme stok eklenmiştir."):alert("Stok eklenmeye çalışılan kitap, kayıtlı değildir. Lütfen önce kitap ekleyiniz"),v.reset(),!1})));const y=document.getElementById("add-customer-form");y&&(y.onsubmit=t=>i(void 0,void 0,void 0,(function*(){t.preventDefault();const o=new FormData(y),i=o.get("customerName"),n=o.get("customerSurname"),s=o.get("customerPhoneNumber"),a=new c.Customer(e.customerService.getNewCustomerId(),i,n,s);return yield e.customerService.addCustomerMock(a),alert("Müşteri Ekleme İşlemi Başarı İle Tamamlanmıştır. "),y.reset(),!1})));const _=document.getElementById("sale-book-form");_&&(_.onsubmit=()=>{const t=new FormData(_),o=t.get("isbnForSale"),i=e.bookService.getBook(o),n=parseInt(t.get("customerIdForSale")),s=e.customerService.isValidCustomer(n),a=parseInt(t.get("quantityForSale")),r=e.stockService.getStock(o);try{return i?r?r.quantity>=a?s?e.saleService.addBookToCart(i,a,n):alert(n+" numaralı müşteri kayıtlı değildir."):alert(a+" kadar kitap dükkanda mevcut değildir."):alert(`Dükkanda ${o} numaralı kitabın stoğu mevcut değildir.`):alert(o+" numaralı kitap yoktur."),_.reset(),!1}catch(t){alert(t)}}),document.getElementById("btnBuy").addEventListener("click",(()=>{0===e.saleService.saleCart.bookAndQuantityMap.size?alert("Sepette ürün yok. Lütfen önce ürün ekleyiniz"):e.saleService.cartToSale()})),document.getElementById("showBooksMenuItem").addEventListener("click",(()=>{e.bookService.listBooks()}));const C=document.getElementById("cancel-sale-form");C&&(C.onsubmit=t=>i(void 0,void 0,void 0,(function*(){t.preventDefault();let o=new Map;o.set(e.bookService.getBook("123-45"),3);let i=new l.Sale(o,new Date,1,"S021122163045",123);e.saleService.saleList.push(i);const n=new FormData(C).get("saleNumberforCancel");let s=e.saleService.getSale(n);if(s){let t=new r.CancelSale(s,s.total,new Date);(yield e.cancelSaleService.cancelSaleMock(t))?alert(s.operationNumber+" numaralı satış iptal edilmiştir."):alert(s.operationNumber+" numaralı satış iptal edilirken hata meydana geldi.")}else alert(n+" numaralı satış bulunamamıştır. Tekrar deneyiniz.")})))},946:function(t,e,o){var i=this&&this.__awaiter||function(t,e,o,i){return new(o||(o=Promise))((function(n,s){function a(t){try{c(i.next(t))}catch(t){s(t)}}function r(t){try{c(i.throw(t))}catch(t){s(t)}}function c(t){var e;t.done?n(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(a,r)}c((i=i.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.BookService=void 0;const n=o(607);e.BookService=class{constructor(t,e){this.bookApi="http://localhost:3002/api/books/",this._bookList=t,this._bookSpecList=e}get bookList(){return this._bookList}set bookList(t){this._bookList=t}get bookSpecList(){return this._bookSpecList}set bookSpecList(t){this._bookSpecList=t}getBook(t){return this.bookList.find((e=>e.isbn===t))}addBook(t){try{this.bookList.push(t),this._bookSpecList.push(t.bookSpec)}catch(t){console.log("Kitap eklenirken bir hata meydana geldi.")}}isValidBook(t){const e=this.getBook(t);return this.bookList.includes(e)}initializeDataMock(){return i(this,void 0,void 0,(function*(){try{const t=yield fetch("http://localhost:3002/api/books",{method:"GET",headers:{Accept:"application/json"}});if(!t.ok)throw new Error(`Hata oluştu, hata kodu: ${t.status} `);const e=yield t.json(),o=JSON.parse(JSON.stringify(e,null,4));this.bookList=o}catch(t){console.error(t)}}))}listBooks(){const t=document.getElementById("listBooks");if(t){let e,o;for(;t.lastChild&&t.children.length>1;)t.removeChild(t.lastChild);this.bookList.forEach((i=>{e=document.createElement("div"),e.className="row-list-book",o=document.createElement("div"),o.className="column-list-book",o.textContent=i.isbn.toString(),e.appendChild(o),o=document.createElement("div"),o.className="column-list-book",o.textContent=i.name.toString(),e.appendChild(o),o=document.createElement("div"),o.className="column-list-book",o.textContent=i.author.toString(),e.appendChild(o),o=document.createElement("div"),o.className="column-list-book",o.textContent=n.stockService.getStockQuantity(i.isbn).toString(),e.appendChild(o),o=document.createElement("div"),o.className="column-list-book",o.textContent=i.bookSpec.price.toString()+" ₺",e.appendChild(o),t.appendChild(e)}))}}addBookMock(t){return i(this,void 0,void 0,(function*(){try{const e=yield fetch(this.bookApi,{method:"POST",body:JSON.stringify({isbn:t.isbn,name:t.name,author:t.author,pages:t.pages,publishYear:t.publishYear}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(e.ok){const t=yield e.json();return console.log(t),!0}throw new Error(`Hata oluştu, hata kodu: ${e.status} `)}catch(t){console.log("Hata Oluştu.")}}))}}},609:function(t,e){var o=this&&this.__awaiter||function(t,e,o,i){return new(o||(o=Promise))((function(n,s){function a(t){try{c(i.next(t))}catch(t){s(t)}}function r(t){try{c(i.throw(t))}catch(t){s(t)}}function c(t){var e;t.done?n(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(a,r)}c((i=i.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.CancelSaleService=void 0,e.CancelSaleService=class{constructor(t){this.cancelSaleApi="http://localhost:3002/api/cancelSale/",this._cancelledSalesList=t}get cancelledSalesList(){return this._cancelledSalesList}set cancelledSalesList(t){this._cancelledSalesList=t}cancelSale(t){let e=this.calculateRefund(t);t.refund=e,this.cancelledSalesList.push(t)}calculateRefund(t){let e;return e=this.calculateDiffHours(t.canceledDateTime,t.sale.operationDateTime)>24?.75*t.sale.total:t.sale.total,e}calculateDiffHours(t,e){let o=t.getTime()-e.getTime();return Math.floor(o/1e3/60/60)}cancelSaleMock(t){return o(this,void 0,void 0,(function*(){let e=this.calculateRefund(t);t.refund=e;try{const e=yield fetch(this.cancelSaleApi,{method:"POST",body:JSON.stringify({sale:t.sale,refund:t.refund,canceledDateTime:t.canceledDateTime}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(e.ok){const t=yield e.json();return console.log(t),!0}throw new Error(`Hata oluştu, hata kodu: ${e.status} `)}catch(t){console.log("Hata Oluştu.")}}))}}},709:function(t,e){var o=this&&this.__awaiter||function(t,e,o,i){return new(o||(o=Promise))((function(n,s){function a(t){try{c(i.next(t))}catch(t){s(t)}}function r(t){try{c(i.throw(t))}catch(t){s(t)}}function c(t){var e;t.done?n(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(a,r)}c((i=i.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.CustomerService=void 0,e.CustomerService=class{constructor(t){this.customerApi="http://localhost:3002/api/customers/",this._customerList=t}get customerList(){return this._customerList}set customerList(t){this._customerList=t}addCustomer(t){this.customerList.push(t)}getNewCustomerId(){let t=0;return this.customerList.length>0&&(t=this.customerList.at(this.customerList.length-1).id),t+=1,t}getCustomerInfo(t){return this.customerList.find((e=>e.id===t))||void 0}isValidCustomer(t){return!!this.customerList.some((e=>e.id===t))}addCustomerMock(t){return o(this,void 0,void 0,(function*(){try{const e=yield fetch(this.customerApi,{method:"POST",body:JSON.stringify({id:t.id,name:t.name,surName:t.surName,phoneNumber:t.phoneNumber}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(!e.ok)throw new Error(`Hata oluştu, hata kodu: ${e.status} `);const o=yield e.json();console.log(o)}catch(t){console.log("Hata Oluştu.")}}))}}},148:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.RentService=void 0,e.RentService=class{constructor(t){this._rentList=t,this.refundPercent=.75}get rentList(){return this._rentList}set rentList(t){this._rentList=t}addRent(t){this.rentList.push(t)}calculateTotal(t){t.bookAndQuantityMap;let e=0;for(let o of t.bookAndQuantityMap)e+=o[0].bookSpec.price*o[1];return e}generateRentNumber(t){let e=new Date;return"R"+e.getDay().toString+e.getMonth().toString+e.getFullYear().toString+e.getHours().toString+e.getMinutes().toString+e.getSeconds().toString+t.toString}calculateRefund(t){t.refund=t.total*this.refundPercent}}},478:function(t,e,o){var i=this&&this.__awaiter||function(t,e,o,i){return new(o||(o=Promise))((function(n,s){function a(t){try{c(i.next(t))}catch(t){s(t)}}function r(t){try{c(i.throw(t))}catch(t){s(t)}}function c(t){var e;t.done?n(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(a,r)}c((i=i.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.SaleService=void 0;const n=o(607),s=o(354),a=o(51);e.SaleService=class{constructor(t,e){this.saleApi="http://localhost:3002/api/sales/",this._saleList=t,this._saleCart=e}get saleList(){return this._saleList}set saleList(t){this._saleList=t}get saleCart(){return this._saleCart}set saleCart(t){this._saleCart=t}addSale(t){this.saleList.push(t)}calculateTotal(t){let e=0;for(let o of t.bookAndQuantityMap.entries())e+=o[0].bookSpec.price*o[1];return e}generateSaleNumber(t){let e=new Date;return"S"+e.getDay().toString()+e.getMonth().toString()+e.getFullYear().toString()+e.getHours().toString()+e.getMinutes().toString()+e.getSeconds().toString()+t.toString()}getSale(t){return this.saleList.find((e=>e.operationNumber===t))}removeSale(t){let e=this.saleList.indexOf(t);this.saleList.splice(e,1)}addBookToCart(t,e,o){if(0===this.saleCart.bookAndQuantityMap.size)this.saleCart.customerId=o;else if(this.saleCart.bookAndQuantityMap.size>0&&this.saleCart.customerId!==o)return alert("Farklı müşteriye kitap satılmaya çalışılıyor. Lütfen tek müşteri için işlem yapınız"),!1;this.saleCart.bookAndQuantityMap.set(t,e),this.updateSaleCart()}updateSaleCart(){const t=document.getElementById("saleCart"),e=document.getElementById("totalAmountTl");if(t){let o,i,n=0;for(;t.lastChild&&t.children.length>1;)t.removeChild(t.lastChild);e.textContent="";for(let t=0;t<this.saleCart.bookAndQuantityMap.size;t++){o=document.createElement("div"),o.className="row-cart";for(let t of this.saleCart.bookAndQuantityMap.entries())i=document.createElement("div"),i.className="column-cart",i.textContent=this.saleCart.customerId.toString(),o.appendChild(i),i=document.createElement("div"),i.className="column-cart",i.textContent=t[0].name,o.appendChild(i),i=document.createElement("div"),i.className="column-cart",i.textContent=t[1].toString(),o.appendChild(i),i=document.createElement("div"),i.className="column-cart",i.textContent=(t[0].bookSpec.price*t[1]).toString(),o.appendChild(i)}if(o&&e){for(let t of this.saleCart.bookAndQuantityMap)n+=t[0].bookSpec.price*t[1];t.appendChild(o),e.textContent=n.toString()+" TL"}}}cartToSale(){let t=this.saleCart,e=new s.Sale;e.bookAndQuantityMap=t.bookAndQuantityMap,e.customerId=t.customerId,e.operationNumber=this.generateSaleNumber(t.customerId),e.operationDateTime=new Date,e.total=this.calculateTotal(e);for(let t of e.bookAndQuantityMap)n.stockService.increaseStock(t[0].isbn,-t[1]);this.addSaleMock(e),this.saleCart=new a.SaleCart,this.updateSaleCart()}addSaleMock(t){return i(this,void 0,void 0,(function*(){try{console.log(t.bookAndQuantityMap);const e=yield fetch(this.saleApi,{method:"POST",body:JSON.stringify({bookAndQuantity:t.bookAndQuantityMap,customerId:t.customerId,operationDateTime:t.operationDateTime,operationNumber:t.operationNumber,total:t.total}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(!e.ok)throw new Error(`Hata oluştu, hata kodu: ${e.status} `);const o=yield e.json();console.log(o),alert(o.message+" "+o.saleNumber)}catch(t){console.log("Hata Oluştu.")}}))}}},214:function(t,e,o){var i=this&&this.__awaiter||function(t,e,o,i){return new(o||(o=Promise))((function(n,s){function a(t){try{c(i.next(t))}catch(t){s(t)}}function r(t){try{c(i.throw(t))}catch(t){s(t)}}function c(t){var e;t.done?n(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(a,r)}c((i=i.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.StockService=void 0;const n=o(72);e.StockService=class{constructor(t){this.stockApi="http://localhost:3002/api/stocks/",this._stockList=t}get stockList(){return this._stockList}set stockList(t){this._stockList=t}addStock(t,e,o){try{let i=new n.Stock(t,o,e);return this.stockList.push(i),!0}catch(t){return console.error(t),!1}}increaseStock(t,e){let o=this.getStock(t);return!!o&&(o.quantity=o.quantity+e,!0)}getStock(t){let e=this.stockList.find((e=>e.isbn===t));if(e)return e}getStockQuantity(t){let e=this.getStock(t);return e?e.quantity:0}addStockMock(t){return i(this,void 0,void 0,(function*(){try{const e=yield fetch(this.stockApi,{method:"POST",body:JSON.stringify({isbn:t.isbn,quantity:t.quantity,shelfNumber:t.shelfNumber}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(e.ok){const t=yield e.json();return console.log(t),!0}throw new Error(`Hata oluştu, hata kodu: ${e.status} `)}catch(t){console.log("Hata Oluştu."+t)}}))}increaseStockMock(t){return i(this,void 0,void 0,(function*(){try{const e=yield fetch(this.stockApi+t.isbn,{method:"PUT",body:JSON.stringify({isbn:t.isbn,quantity:t.quantity,shelfNumber:t.shelfNumber}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(!e.ok)throw new Error(`Hata oluştu, hata kodu: ${e.status} `);const o=yield e.json();console.log(o),console.log(e.status)}catch(t){console.log("Hata Oluştu.")}}))}}}},e={};!function o(i){var n=e[i];if(void 0!==n)return n.exports;var s=e[i]={exports:{}};return t[i].call(s.exports,s,s.exports,o),s.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,