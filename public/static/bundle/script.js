(()=>{"use strict";var t={221:(t,e,o)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.DataBase=void 0;const s=o(51);e.DataBase=class{constructor(){this._books=new Array,this._stocks=new Array,this._customers=new Array,this._sales=new Array,this._rents=new Array,this._bookSpecifications=new Array,this._cancelSales=new Array,this._saleCart=new s.SaleCart}get getBooksList(){return this._books}get getStocksList(){return this._stocks}get getCustomersList(){return this._customers}get getSalesList(){return this._sales}get getRents(){return this._rents}get getBookSpecifications(){return this._bookSpecifications}get getCancaledSales(){return this._cancelSales}get getSaleCart(){return this._saleCart}set setSaleCart(t){this._saleCart=t}}},39:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.BookSpecification=void 0,e.BookSpecification=class{constructor(t,e,o,s){this._isbn=t,this._price=e,this._startDate=o,this._endDate=s}get isbn(){return this._isbn}get price(){return this._price}get startDate(){return this._startDate}get endDate(){return this._endDate}set isbn(t){this._isbn=t}set price(t){this._price=t}set startDate(t){this._startDate=t}set endDate(t){this._endDate=t}}},934:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Book=void 0,e.Book=class{constructor(t,e,o,s,i,r){this._name=e,this._author=o,this._isbn=t,this._publishYear=s,this._pages=i,this._bookSpec=r}get isbn(){return this._isbn}get name(){return this._name}get author(){return this._author}get publishYear(){return this._publishYear}get pages(){return this._pages}get bookSpec(){return this._bookSpec}set isbn(t){this._isbn=t}set name(t){this._name=t}set author(t){this._author=t}set publishYear(t){this._publishYear=t}set pages(t){this._pages=t}set bookSpec(t){this._bookSpec=t}}},916:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Customer=void 0,e.Customer=class{constructor(t,e,o,s){this._id=t,this._name=e,this._surName=o,this._phoneNumber=s}get id(){return this._id}get name(){return this._name}get surName(){return this._surName}get phoneNumber(){return this._phoneNumber}set id(t){this._id=t}set name(t){this._name=t}set surName(t){this._surName=t}set phoneNumber(t){this._phoneNumber=t}}},51:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SaleCart=void 0,e.SaleCart=class{constructor(){this.bookAndQuantityMap=new Map}}},354:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Sale=void 0,e.Sale=class{constructor(t,e,o,s,i){this._bookAndQuantityMap=new Map,this._bookAndQuantityMap=t,this._operationDateTime=e,this._customerId=o,this._operationNumber=s,this._total=i}get bookAndQuantityMap(){return this._bookAndQuantityMap}get operationDateTime(){return this._operationDateTime}get customerId(){return this._customerId}get operationNumber(){return this._operationNumber}get total(){return this._total}set bookAndQuantityMap(t){this._bookAndQuantityMap=t}set operationDateTime(t){this._operationDateTime=t}set customerId(t){this._customerId=t}set operationNumber(t){this._operationNumber=t}set total(t){this._total=t}}},72:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Stock=void 0,e.Stock=class{constructor(t,e,o){this._isbn=t,this._quantity=e,this._shelfNumber=o}get isbn(){return this._isbn}get quantity(){return this._quantity}get shelfNumber(){return this._shelfNumber}set isbn(t){this._isbn=t}set quantity(t){this._quantity=t}set shelfNumber(t){this._shelfNumber=t}}},607:(t,e,o)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.stockService=e.saleService=e.rentService=e.cancelSaleService=e.customerService=e.bookService=void 0;const s=o(221),i=o(934),r=o(39),a=o(916),n=o(72),c=o(946),l=o(609),u=o(709),d=o(148),h=o(478),m=o(214);let k=new s.DataBase;function S(t,e){const o=document.getElementById(e),s=document.getElementById(t);o&&s&&s.addEventListener("click",(()=>{"none"===o.style.display?o.style.display="block":o.style.display="none"}))}!function(t){e.bookService=new c.BookService(t.getBooksList,t.getBookSpecifications),e.customerService=new u.CustomerService(t.getCustomersList),e.cancelSaleService=new l.CancelSaleService(t.getCancaledSales),e.rentService=new d.RentService(t.getRents),e.saleService=new h.SaleService(t.getSalesList,t.getSaleCart),e.stockService=new m.StockService(t.getStocksList),console.log("Services intiliazed."),e.customerService.addCustomer(new a.Customer(1,"","","")),e.customerService.addCustomer(new a.Customer(2,"","","")),e.stockService.addStock("123-45","A45-52",10),e.stockService.addStock("123-46","A45-52",10)}(k),e.bookService.initializeBooksDataMock(),S("addBookMenuItem","addBookSection"),S("showBooksMenuItem","listBooksSection"),S("addCustomerMenuItem","addCustomerSection"),S("addStockMenuItem","addStockSection"),S("saleBookMenuItem","saleBookSection");const p=document.getElementById("add-book-form");null!=p&&(p.onsubmit=()=>{const t=new FormData(p),o=t.get("bookTitle"),s=t.get("bookAuthor"),a=t.get("bookIsbn"),n=t.get("bookPublishYear"),c=t.get("bookPages"),l=t.get("bookPrice"),u=new Date,d=new Date("Dec 31, 9999 23:59:59"),h=new r.BookSpecification(a,l,u,d),m=new i.Book(a,o,s,n,c,h);return e.bookService.addBookMock(m),alert(m.isbn+" numaralı kitap Ekleme İşlemi Başarı İle Tamamlanmıştır."),p.reset(),!1});const b=document.getElementById("add-stock-form");b&&(b.onsubmit=()=>{const t=new FormData(b),o=t.get("bookIsbnForAddStock"),s=t.get("stockQuantity"),i=t.get("shelfNumber"),r=new n.Stock(o,s,i);return k.getBooksList.some((t=>t.isbn==o)),alert(o+" isbn numaralı kitaptan, "+s+" kadar sisteme stok eklenmiştir."),e.stockService.addStockMock(r),b.reset(),!1});const g=document.getElementById("add-customer-form");g&&(g.onsubmit=()=>{const t=new FormData(g),o=t.get("customerName"),s=t.get("customerSurname"),i=t.get("customerPhoneNumber"),r=new a.Customer(e.customerService.getNewCustomerId(),o,s,i);return e.customerService.addCustomer(r),alert("Müşteri Ekleme İşlemi Başarı İle Tamamlanmıştır. "),g.reset(),!1});const _=document.getElementById("sale-book-form");_&&(_.onsubmit=()=>{const t=new FormData(_),o=t.get("isbnForSale"),s=e.bookService.getBook(o),i=parseInt(t.get("customerIdForSale")),r=e.customerService.isValidCustomer(i),a=parseInt(t.get("quantityForSale")),n=e.stockService.getStock(o);try{return s?n?n.quantity>=a?r?e.saleService.addBookToCart(s,a,i):alert(i+" numaralı müşteri kayıtlı değildir."):alert(a+" kadar kitap dükkanda mevcut değildir."):alert(`Dükkanda ${o} numaralı kitabın stoğu mevcut değildir.`):alert(o+" numaralı kitap yoktur."),_.reset(),!1}catch(t){alert(t)}}),document.getElementById("btnBuy").addEventListener("click",(()=>{0===e.saleService.saleCart.bookAndQuantityMap.size?alert("Sepette ürün yok. Lütfen önce ürün ekleyiniz"):e.saleService.cartToSale()})),document.getElementById("showBooksMenuItem").addEventListener("click",(()=>{e.bookService.initializeBooksDataMock()}))},946:function(t,e,o){var s=this&&this.__awaiter||function(t,e,o,s){return new(o||(o=Promise))((function(i,r){function a(t){try{c(s.next(t))}catch(t){r(t)}}function n(t){try{c(s.throw(t))}catch(t){r(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(a,n)}c((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.BookService=void 0;const i=o(607);e.BookService=class{constructor(t,e){this._bookList=t,this._bookSpecList=e}get bookList(){return this._bookList}set bookList(t){this._bookList=t}get bookSpecList(){return this._bookSpecList}set bookSpecList(t){this._bookSpecList=t}getBook(t){return this.bookList.find((e=>e.isbn===t))}addBook(t){try{this.bookList.push(t),this._bookSpecList.push(t.bookSpec)}catch(t){console.log("Kitap eklenirken bir hata meydana geldi.")}}isValidBook(t){const e=this.getBook(t);return this.bookList.includes(e)}initializeBooksDataMock(){return s(this,void 0,void 0,(function*(){try{const t=yield fetch("http://localhost:3002/api/books",{method:"GET",headers:{Accept:"application/json"}});if(!t.ok)throw new Error(`Hata oluştu, hata kodu: ${t.status} `);const e=yield t.json(),o=JSON.parse(JSON.stringify(e,null,4));this.bookList=o,this.listBooks()}catch(t){console.error(t)}}))}listBooks(){const t=document.getElementById("listBooks");if(t){let e,o;for(;t.lastChild&&t.children.length>1;)t.removeChild(t.lastChild);this.bookList.forEach((s=>{e=document.createElement("div"),e.className="row-list-book",o=document.createElement("div"),o.className="column-list-book",o.textContent=s.isbn.toString(),e.appendChild(o),o=document.createElement("div"),o.className="column-list-book",o.textContent=s.name.toString(),e.appendChild(o),o=document.createElement("div"),o.className="column-list-book",o.textContent=s.author.toString(),e.appendChild(o),o=document.createElement("div"),o.className="column-list-book",o.textContent=i.stockService.getStockQuantity(s.isbn).toString(),e.appendChild(o),o=document.createElement("div"),o.className="column-list-book",o.textContent=s.bookSpec.price.toString()+" ₺",e.appendChild(o),t.appendChild(e)}))}}addBookMock(t){return s(this,void 0,void 0,(function*(){try{const e=yield fetch("http://localhost:3002/api/books/",{method:"POST",body:JSON.stringify({isbn:t.isbn,name:t.name,author:t.author,pages:t.pages,publishYear:t.publishYear}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(!e.ok)throw new Error(`Hata oluştu, hata kodu: ${e.status} `);const o=yield e.json();console.log(o)}catch(t){console.log("Hata Oluştu.")}}))}}},609:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.CancelSaleService=void 0,e.CancelSaleService=class{constructor(t){this._cancelledSalesList=t}get cancelledSalesList(){return this._cancelledSalesList}set cancelledSalesList(t){this._cancelledSalesList=t}cancelSale(t){this.cancelledSalesList.push(t);let e=this.calculateRefund(t);t.refund=e}calculateRefund(t){let e;return e=this.calculateDiffHours(t.canceledDateTime,t.sale.operationDateTime)>24?.75*t.sale.total:t.sale.total,e}calculateDiffHours(t,e){let o=t.getTime()-e.getTime();return Math.floor(o/1e3/60/60)}}},709:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.CustomerService=void 0,e.CustomerService=class{constructor(t){this._customerList=t}get customerList(){return this._customerList}set customerList(t){this._customerList=t}addCustomer(t){this.customerList.push(t)}getNewCustomerId(){let t=0;return this.customerList.length>0&&(t=this.customerList.at(this.customerList.length-1).id),t+=1,t}getCustomerInfo(t){return this.customerList.find((e=>e.id===t))||void 0}isValidCustomer(t){return!!this.customerList.some((e=>e.id===t))}}},148:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.RentService=void 0,e.RentService=class{constructor(t){this._rentList=t,this.refundPercent=.75}get rentList(){return this._rentList}set rentList(t){this._rentList=t}addRent(t){this.rentList.push(t)}calculateTotal(t){t.bookAndQuantityMap;let e=0;for(let o of t.bookAndQuantityMap)e+=o[0].bookSpec.price*o[1];return e}generateRentNumber(t){let e=new Date;return"R"+e.getDay().toString+e.getMonth().toString+e.getFullYear().toString+e.getHours().toString+e.getMinutes().toString+e.getSeconds().toString+t.toString}calculateRefund(t){t.refund=t.total*this.refundPercent}}},478:(t,e,o)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SaleService=void 0;const s=o(607),i=o(354),r=o(51);e.SaleService=class{constructor(t,e){this._saleList=t,this._saleCart=e}get saleList(){return this._saleList}set saleList(t){this._saleList=t}get saleCart(){return this._saleCart}set saleCart(t){this._saleCart=t}addSale(t){this.saleList.push(t)}calculateTotal(t){let e=0;for(let o of t.bookAndQuantityMap.entries())e+=o[0].bookSpec.price*o[1];return e}generateSaleNumber(t){let e=new Date;return"S"+e.getDay().toString()+e.getMonth().toString()+e.getFullYear().toString()+e.getHours().toString()+e.getMinutes().toString()+e.getSeconds().toString()+t.toString()}getSale(t){let e=this.saleList.find((e=>e.operationNumber===t));if(e)return e;throw new Error}removeSale(t){let e=this.saleList.indexOf(t);this.saleList.splice(e,1)}addBookToCart(t,e,o){if(0===this.saleCart.bookAndQuantityMap.size)this.saleCart.customerId=o;else if(this.saleCart.bookAndQuantityMap.size>0&&this.saleCart.customerId!==o)return alert("Farklı müşteriye kitap satılmaya çalışılıyor. Lütfen tek müşteri için işlem yapınız"),!1;this.saleCart.bookAndQuantityMap.set(t,e),this.updateSaleCart()}updateSaleCart(){const t=document.getElementById("saleCart"),e=document.getElementById("totalAmountTl");if(t){let o,s,i=0;for(;t.lastChild&&t.children.length>1;)t.removeChild(t.lastChild);for(let t=0;t<this.saleCart.bookAndQuantityMap.size;t++){o=document.createElement("div"),o.className="row-cart";for(let t of this.saleCart.bookAndQuantityMap.entries())s=document.createElement("div"),s.className="column-cart",s.textContent=this.saleCart.customerId.toString(),o.appendChild(s),s=document.createElement("div"),s.className="column-cart",s.textContent=t[0].name,o.appendChild(s),s=document.createElement("div"),s.className="column-cart",s.textContent=t[1].toString(),o.appendChild(s),s=document.createElement("div"),s.className="column-cart",s.textContent=(t[0].bookSpec.price*t[1]).toString(),o.appendChild(s)}if(o&&e){for(let t of this.saleCart.bookAndQuantityMap)i+=t[0].bookSpec.price*t[1];t.appendChild(o),e.textContent=i.toString()+" TL"}}}cartToSale(){let t=this.saleCart,e=new i.Sale;e.bookAndQuantityMap=t.bookAndQuantityMap,e.customerId=t.customerId,e.operationNumber=this.generateSaleNumber(t.customerId),e.operationDateTime=new Date,e.total=this.calculateTotal(e);for(let t of e.bookAndQuantityMap)s.stockService.increaseStock(t[0].isbn,-t[1]);this.addSale(e),this.saleCart=new r.SaleCart,this.updateSaleCart(),console.log(e.operationNumber),alert("Satış gerçekleşmiştir. Fiş Numaranız: "+e.operationNumber+"\nFişinizi kaybetmeyiniz. ")}}},214:function(t,e,o){var s=this&&this.__awaiter||function(t,e,o,s){return new(o||(o=Promise))((function(i,r){function a(t){try{c(s.next(t))}catch(t){r(t)}}function n(t){try{c(s.throw(t))}catch(t){r(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(a,n)}c((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.StockService=void 0;const i=o(72);e.StockService=class{constructor(t){this._stockList=t}get stockList(){return this._stockList}set stockList(t){this._stockList=t}addStock(t,e,o){try{let s=new i.Stock(t,o,e);return this.stockList.push(s),!0}catch(t){return console.error(t),!1}}increaseStock(t,e){let o=this.getStock(t);return!!o&&(o.quantity=o.quantity+e,!0)}getStock(t){let e=this.stockList.find((e=>e.isbn===t));if(e)return e}getStockQuantity(t){let e=this.getStock(t);return e?e.quantity:0}addStockMock(t){!function(t){s(this,void 0,void 0,(function*(){try{const e=yield fetch("http://localhost:3002/api/stocks/"+t.isbn,{method:"POST",body:JSON.stringify({isbn:t.isbn,quantity:t.quantity}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(!e.ok)throw new Error(`Hata oluştu, hata kodu: ${e.status} `);const o=yield e.json();console.log(o)}catch(t){console.log("Hata Oluştu.")}}))}(t)}}}},e={};!function o(s){var i=e[s];if(void 0!==i)return i.exports;var r=e[s]={exports:{}};return t[s].call(r.exports,r,r.exports,o),r.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,