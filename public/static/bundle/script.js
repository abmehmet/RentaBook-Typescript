(()=>{"use strict";var e={221:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DataBase=void 0;const n=o(758),r=o(51);t.DataBase=class{constructor(){this._books=new Array,this._stocks=new Array,this._customers=new Array,this._sales=new Array,this._rents=new Array,this._bookSpecifications=new Array,this._cancels=new Array,this._saleCart=new r.SaleCart,this._rentCart=new n.RentCart}get getBooksList(){return this._books}get getStocksList(){return this._stocks}get getCustomersList(){return this._customers}get getSalesList(){return this._sales}get getRents(){return this._rents}get getBookSpecifications(){return this._bookSpecifications}get getCancaledSales(){return this._cancels}get getSaleCart(){return this._saleCart}get getRentCart(){return this._rentCart}set setSaleCart(e){this._saleCart=e}set setRentCart(e){this._rentCart=e}}},39:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BookSpecification=void 0,t.BookSpecification=class{constructor(e,t,o,n){this._isbn=e,this._price=t,this._startDate=o,this._endDate=n}get isbn(){return this._isbn}get price(){return this._price}get startDate(){return this._startDate}get endDate(){return this._endDate}set isbn(e){this._isbn=e}set price(e){this._price=e}set startDate(e){this._startDate=e}set endDate(e){this._endDate=e}}},934:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Book=void 0,t.Book=class{constructor(e,t,o,n,r,a){this._name=t,this._author=o,this._isbn=e,this._publishYear=n,this._pages=r,this._bookSpecification=a}get isbn(){return this._isbn}get name(){return this._name}get author(){return this._author}get publishYear(){return this._publishYear}get pages(){return this._pages}get bookSpecification(){return this._bookSpecification}set isbn(e){this._isbn=e}set name(e){this._name=e}set author(e){this._author=e}set publishYear(e){this._publishYear=e}set pages(e){this._pages=e}set bookSpecification(e){this._bookSpecification=e}}},378:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Cancel=void 0,t.Cancel=class{constructor(e,t,o){this._cancelType=e,this._refund=t,this._canceledDateTime=o}get cancelType(){return this._cancelType}get refund(){return this._refund}get canceledDateTime(){return this._canceledDateTime}set cancelType(e){this._cancelType=e}set refund(e){this._refund=e}set canceledDateTime(e){this._canceledDateTime=e}}},916:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Customer=void 0,t.Customer=class{constructor(e,t,o){this._name=e,this._surName=t,this._phoneNumber=o}get name(){return this._name}get surName(){return this._surName}get phoneNumber(){return this._phoneNumber}set name(e){this._name=e}set surName(e){this._surName=e}set phoneNumber(e){this._phoneNumber=e}}},767:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.OrderBookItems=void 0,t.OrderBookItems=class{constructor(e,t){this._book=e,this._quantity=t}get book(){return this._book}get quantity(){return this._quantity}set book(e){this._book=e}set quantity(e){this._quantity=e}toJSON(){return{book:this._book,quantity:this._quantity}}}},758:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.RentCart=void 0,t.RentCart=class{constructor(){this.orderBookItems=new Array}}},961:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Rent=void 0;const n=o(354);class r extends n.Sale{constructor(e,t,o,n,r,a,i){super(e,o,t,n,r),this._refundDate=a,this._refund=i}get refundDate(){return this._refundDate}get refund(){return this._refund}set refundDate(e){this._refundDate=e}set refund(e){this._refund=e}}t.Rent=r},51:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SaleCart=void 0,t.SaleCart=class{constructor(){this.orderBookItems=new Array}}},354:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Sale=void 0,t.Sale=class{constructor(e,t,o,n,r){this._orderBookItems=e,this._customerId=t,this._operationDateTime=o,this._operationNumber=n,this._total=r}get orderBookItems(){return this._orderBookItems}get customerId(){return this._customerId}get operationDateTime(){return this._operationDateTime}get operationNumber(){return this._operationNumber}get total(){return this._total}set orderBookItems(e){this._orderBookItems=e}set customerId(e){this._customerId=e}set operationDateTime(e){this._operationDateTime=e}set operationNumber(e){this._operationNumber=e}set total(e){this._total=e}}},72:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Stock=void 0,t.Stock=class{constructor(e,t,o){this._isbn=e,this._quantity=t,this._shelfNumber=o}get isbn(){return this._isbn}get quantity(){return this._quantity}get shelfNumber(){return this._shelfNumber}set isbn(e){this._isbn=e}set quantity(e){this._quantity=e}set shelfNumber(e){this._shelfNumber=e}}},607:function(e,t,o){var n=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))((function(r,a){function i(e){try{c(n.next(e))}catch(e){a(e)}}function s(e){try{c(n.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(i,s)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.stockService=t.saleService=t.rentService=t.cancelService=t.customerService=t.bookService=void 0;const r=o(221),a=o(934),i=o(39),s=o(378),c=o(916),l=o(961),u=o(354),d=o(767),h=o(72),m=o(946),p=o(943),k=o(709),f=o(148),S=o(478),g=o(214);function b(e,t){const o=document.getElementById(t),n=document.getElementById(e);o&&n&&n.addEventListener("click",(()=>{"none"===o.style.display?o.style.display="block":o.style.display="none"}))}var y;y=new r.DataBase,t.bookService=new m.BookService(y.getBooksList,y.getBookSpecifications),t.customerService=new k.CustomerService(y.getCustomersList),t.cancelService=new p.CancelService(y.getCancaledSales),t.rentService=new f.RentService(y.getRents,y.getRentCart),t.saleService=new S.SaleService(y.getSalesList,y.getSaleCart),t.stockService=new g.StockService(y.getStocksList),console.log("Services intiliazed."),t.customerService.addCustomer(new c.Customer("","","")),t.customerService.addCustomer(new c.Customer("","","")),t.stockService.addStock("123-45","A45-52",10),t.stockService.addStock("123-46","A45-52",10),function(){n(this,void 0,void 0,(function*(){yield t.bookService.initializeDataMock()}))}(),b("addBookMenuItem","addBookSection"),b("showBooksMenuItem","listBooksSection"),b("addCustomerMenuItem","addCustomerSection"),b("addStockMenuItem","addStockSection"),b("saleBookMenuItem","saleBookSection"),b("rentBookMenuItem","rentBookSection"),b("cancelSaleMenuItem","cancelSaleSection"),b("cancelRentMenuItem","cancelRentSection"),b("refundBookMenuItem","refundBookSection"),b("rentNow","rentBookSection");const v=document.getElementById("add-book-form");null!=v&&(v.onsubmit=e=>n(void 0,void 0,void 0,(function*(){e.preventDefault();const o=new FormData(v),n=o.get("bookTitle"),r=o.get("bookAuthor"),s=o.get("bookIsbn"),c=o.get("bookPublishYear"),l=o.get("bookPages"),u=o.get("bookPrice"),d=new Date,h=new Date("Dec 31, 9999 23:59:59");n.match("");const m=new i.BookSpecification(s,u,d,h),p=new a.Book(s,n,r,c,l,m);return(yield t.bookService.addBookMock(p))?(alert(p.isbn+" numaralı kitap Ekleme İşlemi Başarı İle Tamamlanmıştır."),v.reset()):alert(p.isbn+" numaralı kitap Ekleme İşlemi Sırasında Bir Hata oluştu."),!1})));const _=document.getElementById("add-stock-form");_&&(_.onsubmit=e=>n(void 0,void 0,void 0,(function*(){e.preventDefault();const o=new FormData(_),n=o.get("bookIsbnForAddStock"),r=o.get("stockQuantity"),a=o.get("shelfNumber"),i=new h.Stock(n,r,a);return t.bookService.bookList.some((e=>e.isbn==n))?(yield t.stockService.addStockMock(i))&&alert(n+" isbn numaralı kitaptan, "+r+" kadar sisteme stok eklenmiştir."):alert("Stok eklenmeye çalışılan kitap, kayıtlı değildir. Lütfen önce kitap ekleyiniz"),_.reset(),!1})));const C=document.getElementById("add-customer-form");C&&(C.onsubmit=e=>n(void 0,void 0,void 0,(function*(){e.preventDefault();const o=new FormData(C),n=o.get("customerName"),r=o.get("customerSurname"),a=o.get("customerPhoneNumber"),i=new c.Customer(n,r,a);return(yield t.customerService.addCustomerMock(i))?(alert("Müşteri Ekleme İşlemi Başarı İle Tamamlanmıştır. "),C.reset()):alert("Müşteri Ekleme İşlemi Sırasında bir hata ile karşılıldı. "),!1})));const w=document.getElementById("sale-book-form");w&&(w.onsubmit=()=>{const e=new FormData(w),o=e.get("isbnForSale"),n=t.bookService.getBook(o),r=parseInt(e.get("customerIdForSale")),a=parseInt(e.get("quantityForSale")),i=t.stockService.getStock(o);try{return n?i?i.quantity>=a?t.saleService.addBookToCart(n,a,r):alert(a+" kadar kitap dükkanda mevcut değildir."):alert(`Dükkanda ${o} numaralı kitabın stoğu mevcut değildir.`):alert(o+" numaralı kitap yoktur."),w.reset(),!1}catch(e){alert(e)}}),document.getElementById("btnSale").addEventListener("click",(()=>{0===t.saleService.saleCart.orderBookItems.length?alert("Sepette ürün yok. Lütfen önce ürün ekleyiniz"):t.saleService.cartToSale()})),document.getElementById("showBooksMenuItem").addEventListener("click",(()=>{t.bookService.listBooks()}));const B=document.getElementById("cancel-sale-form");B&&(B.onsubmit=e=>n(void 0,void 0,void 0,(function*(){e.preventDefault();let o=new Array;o.push(new d.OrderBookItems(t.bookService.getBook("123-45"),3));let n=new u.Sale(o,1,new Date,"S021122163045",123);t.saleService.saleList.push(n);const r=new FormData(B).get("saleNumberforCancel");let a=t.saleService.getSale(r);if(a){let e=new s.Cancel(a,a.total,new Date);(yield t.cancelService.cancelSaleMock(e))?alert(a.operationNumber+" numaralı satış iptal edilmiştir."):alert(a.operationNumber+" numaralı satış iptal edilirken hata meydana geldi.")}else alert(r+" numaralı satış bulunamamıştır. Tekrar deneyiniz.")})));const D=document.getElementById("cancel-rent-form");D&&(D.onsubmit=e=>n(void 0,void 0,void 0,(function*(){e.preventDefault();let o=new Array;o.push(new d.OrderBookItems(t.bookService.getBook("123-45"),3));let n=new Date;n.setDate(n.getDate()+14);let r=new l.Rent(o,new Date,1,"R021122163045",123,n,200);t.rentService.rentList.push(r);const a=new FormData(D).get("rentNumberforCancel");let i=t.rentService.getRent(a);if(i){let e=new s.Cancel(i,i.total,new Date);(yield t.cancelService.cancelRentMock(e))?alert(i.operationNumber+" numaralı kiralama iptal edilmiştir."):alert(i.operationNumber+" numaralı kiralama iptal edilirken hata meydana geldi.")}else alert(a+" numaralı kiralma bulunamamıştır. Tekrar deneyiniz.")})));const I=document.getElementById("rent-book-form");I&&(I.onsubmit=()=>{const e=new FormData(I),o=e.get("isbnForRent"),n=t.bookService.getBook(o),r=parseInt(e.get("customerIdForRent")),a=parseInt(e.get("quantityForRent")),i=t.stockService.getStock(o);try{return n?i?i.quantity>=a?t.rentService.addBookToCart(n,a,r):alert(a+" kadar kitap dükkanda mevcut değildir."):alert(`Dükkanda ${o} numaralı kitabın stoğu mevcut değildir.`):alert(o+" numaralı kitap yoktur."),I.reset(),!1}catch(e){alert(e)}}),document.getElementById("btnRent").addEventListener("click",(()=>{0===t.rentService.rentCart.orderBookItems.length?alert("Sepette ürün yok. Lütfen önce ürün ekleyiniz"):t.rentService.cartToRent()}));const N=document.getElementById("refund-book-form");N&&(N.onsubmit=e=>n(void 0,void 0,void 0,(function*(){let o=new Array;o.push(new d.OrderBookItems(t.bookService.getBook("123-45"),3));let n=new Date;n.setDate(n.getDate()+23);let r=new l.Rent(o,new Date,1,"R021122163045",123,n,0);r.refund=t.rentService.calculateRefundAmount(r),t.rentService.rentList.push(r),e.preventDefault();const a=new FormData(N).get("rentNumberforRefund");let i=t.rentService.getRent(a);if(i){let e=yield t.rentService.refundRentMock(i);e?(alert(i.operationNumber+" numaralı kiralama geri alınmıştır."),alert("Geri ödeme miktarı:"+e+" ₺ .")):alert(i.operationNumber+" numaralı kiralama iptal edilirken hata meydana geldi.")}else alert(a+" numaralı kiralama bulunamamıştır. Tekrar deneyiniz.")})))},946:function(e,t,o){var n=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))((function(r,a){function i(e){try{c(n.next(e))}catch(e){a(e)}}function s(e){try{c(n.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(i,s)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.BookService=void 0;const r=o(607);t.BookService=class{constructor(e,t){this.bookApi="http://localhost:3002/api/v1/books",this._bookList=e,this._bookSpecification=t}get bookList(){return this._bookList}get bookSpecification(){return this._bookSpecification}set bookList(e){this._bookList=e}set bookSpecification(e){this._bookSpecification=e}getBook(e){return this.bookList.find((t=>t.isbn===e))}addBook(e){try{this.bookList.push(e),this.bookSpecification.push(e.bookSpecification)}catch(e){console.log("Kitap eklenirken bir hata meydana geldi.")}}isValidBook(e){const t=this.getBook(e);return this.bookList.includes(t)}initializeDataMock(){return n(this,void 0,void 0,(function*(){try{const e=yield fetch(this.bookApi,{method:"GET",headers:{Accept:"application/json"}});if(!e.ok)throw new Error(`Hata oluştu, hata kodu: ${e.status} `);const t=yield e.json(),o=JSON.parse(JSON.stringify(t,null,4));this.bookList=o}catch(e){console.error(e)}}))}listBooks(){const e=document.getElementById("listBooks");if(e){let t,o;for(;e.lastChild&&e.children.length>1;)e.removeChild(e.lastChild);this.bookList.forEach((n=>{t=document.createElement("div"),t.className="row-list-book",o=document.createElement("div"),o.className="column-list-book",o.textContent=n.isbn.toString(),t.appendChild(o),o=document.createElement("div"),o.className="column-list-book",o.textContent=n.name.toString(),t.appendChild(o),o=document.createElement("div"),o.className="column-list-book",o.textContent=n.author.toString(),t.appendChild(o),o=document.createElement("div"),o.className="column-list-book",o.textContent=r.stockService.getStockQuantity(n.isbn).toString(),t.appendChild(o),o=document.createElement("div"),o.className="column-list-book",o.textContent=n.bookSpecification.price.toString()+" ₺",t.appendChild(o),e.appendChild(t)}))}}addBookMock(e){return n(this,void 0,void 0,(function*(){try{const t=yield fetch(this.bookApi,{method:"POST",body:JSON.stringify({isbn:e.isbn,name:e.name,author:e.author,pages:e.pages,publishYear:e.publishYear,bookSpecification:{isbn:e.bookSpecification.isbn,price:e.bookSpecification.price,startDate:e.bookSpecification.startDate,endDate:e.bookSpecification.endDate}}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(t.ok){const e=yield t.json();return console.log("Rest servisinden dönen cevap =>"),console.log(e),!0}throw new Error(`Hata oluştu, hata kodu: ${t.status} `)}catch(e){console.log("Hata Oluştu.")}}))}}},943:function(e,t){var o=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))((function(r,a){function i(e){try{c(n.next(e))}catch(e){a(e)}}function s(e){try{c(n.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(i,s)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.CancelService=void 0,t.CancelService=class{constructor(e){this.cancelSaleApi="http://localhost:3002/api/v1/cancelSale",this.cancelRentApi="http://localhost:3002/api/v1/cancelRent",this._cancelledList=e}get cancelledList(){return this._cancelledList}set cancelledList(e){this._cancelledList=e}calculateDiffHours(e,t){let o=e.getTime()-t.getTime();return Math.floor(o/1e3/60/60)}cancelSale(e){let t=this.calculateCancelSaleRefund(e);e.refund=t,this.cancelledList.push(e)}calculateCancelSaleRefund(e){let t;return t=this.calculateDiffHours(e.canceledDateTime,e.cancelType.operationDateTime)>24?.75*e.cancelType.total:e.cancelType.total,t}cancelSaleMock(e){return o(this,void 0,void 0,(function*(){let t=this.calculateCancelSaleRefund(e);e.refund=t;try{const t=yield fetch(this.cancelSaleApi,{method:"POST",body:JSON.stringify({sale:e.cancelType,refund:e.refund,canceledDateTime:e.canceledDateTime}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(t.ok){const e=yield t.json();return console.log(e),!0}throw new Error(`Hata oluştu, hata kodu: ${t.status} `)}catch(e){console.log("Hata Oluştu.")}}))}cancelRent(e){let t=this.calculateCancelRentRefund(e);e.refund=t,this.cancelledList.push(e)}calculateCancelRentRefund(e){let t;return t=this.calculateDiffHours(e.canceledDateTime,e.cancelType.operationDateTime)>24?.75*e.cancelType.total:e.cancelType.total,t}cancelRentMock(e){return o(this,void 0,void 0,(function*(){let t=this.calculateCancelRentRefund(e);e.refund=t;try{const t=yield fetch(this.cancelRentApi,{method:"POST",body:JSON.stringify({rent:e.cancelType,refund:e.refund,canceledDateTime:e.canceledDateTime}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(t.ok){const e=yield t.json();return console.log(e),!0}throw new Error(`Hata oluştu, hata kodu: ${t.status} `)}catch(e){console.log("Hata Oluştu.")}}))}}},709:function(e,t){var o=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))((function(r,a){function i(e){try{c(n.next(e))}catch(e){a(e)}}function s(e){try{c(n.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(i,s)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.CustomerService=void 0,t.CustomerService=class{constructor(e){this.customerApi="http://localhost:3002/api/v1/customers",this._customerList=e}get customerList(){return this._customerList}set customerList(e){this._customerList=e}addCustomer(e){this.customerList.push(e)}addCustomerMock(e){return o(this,void 0,void 0,(function*(){try{const t=yield fetch(this.customerApi,{method:"POST",body:JSON.stringify({name:e.name,surName:e.surName,phoneNumber:e.phoneNumber}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(t.ok){const e=yield t.json();return console.log("Rest servisinden dönen cevap =>"),console.log(e),!0}throw new Error(`Hata oluştu, hata kodu: ${t.status} `)}catch(e){console.log("Hata Oluştu.")}}))}}},148:function(e,t,o){var n=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))((function(r,a){function i(e){try{c(n.next(e))}catch(e){a(e)}}function s(e){try{c(n.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(i,s)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.RentService=void 0;const r=o(607),a=o(961),i=o(758),s=o(767);t.RentService=class{constructor(e,t){this.rentApi="http://localhost:3002/api/v1/rents",this._rentList=e,this.refundPercent=.75,this._rentCart=t}get rentList(){return this._rentList}set rentList(e){this._rentList=e}get rentCart(){return this._rentCart}set rentCart(e){this._rentCart=e}addRent(e){this.rentList.push(e)}calculateTotal(e){let t=0;for(let o of e.orderBookItems)t+=o.book.bookSpecification.price*o.quantity;return t}generateRentNumber(e){let t=new Date;return"R"+t.getDay().toString()+t.getMonth().toString()+t.getFullYear().toString()+t.getHours().toString()+t.getMinutes().toString()+t.getSeconds().toString()+e.toString()}calculateDiffHours(e,t){let o=e.getTime()-t.getTime();return Math.floor(o/1e3/60/60)}calculateRefund(e){e.refund=e.total*this.refundPercent}calculateRefundAmount(e){let t,o=this.calculateDiffHours(e.refundDate,e.operationDateTime)/24;if(o<=14)t=.75*e.total;else if(o<=24){let n=.75-.05*(o-14);t=e.total*n}else t=.25*e.total;return t}getRent(e){return this.rentList.find((t=>t.operationNumber===e))}addBookToCart(e,t,o){if(0===this.rentCart.orderBookItems.length)this.rentCart.customerId=o;else if(this.rentCart.orderBookItems.length>0&&this.rentCart.customerId!==o)return alert("Farklı müşteriye kitap kiralanmaya çalışılıyor. Lütfen tek müşteri için işlem yapınız"),!1;this.rentCart.orderBookItems.push(new s.OrderBookItems(e,t)),this.updateRentCart()}updateRentCart(){const e=document.getElementById("rentCart"),t=document.getElementById("totalRentAmountTl");if(e){let o,n,r=0;for(;e.lastChild&&e.children.length>1;)e.removeChild(e.lastChild);t.textContent="";for(let e=0;e<this.rentCart.orderBookItems.length;e++){o=document.createElement("div"),o.className="rent-cart-row";for(let e of this.rentCart.orderBookItems)n=document.createElement("div"),n.className="rent-cart-column",n.textContent=this.rentCart.customerId.toString(),o.appendChild(n),n=document.createElement("div"),n.className="rent-cart-column",n.textContent=e.book.name,o.appendChild(n),n=document.createElement("div"),n.className="rent-cart-column",n.textContent=e.quantity.toString(),o.appendChild(n),n=document.createElement("div"),n.className="rent-cart-column",n.textContent=(e.book.bookSpecification.price*e.quantity).toString(),o.appendChild(n)}if(o&&t){for(let e of this.rentCart.orderBookItems)r+=e.book.bookSpecification.price*e.quantity;e.appendChild(o),t.textContent=r.toString()+" TL"}}}cartToRent(){let e=this.rentCart,t=new a.Rent;t.orderBookItems=e.orderBookItems,t.customerId=e.customerId,t.operationNumber=this.generateRentNumber(e.customerId),t.operationDateTime=new Date,t.total=this.calculateTotal(t);let o=new Date;o.setDate(o.getDate()+14),t.refundDate=o,this.calculateRefund(t);for(let e of t.orderBookItems)r.stockService.increaseStock(e.book.isbn,-e.quantity);this.rentCart=new i.RentCart,this.updateRentCart(),this.addRentMock(t)}addRentMock(e){return n(this,void 0,void 0,(function*(){try{const t=yield fetch(this.rentApi,{method:"POST",body:JSON.stringify({orderBookItems:Array.from(e.orderBookItems),customerId:e.customerId,operationDateTime:e.operationDateTime,operationNumber:e.operationNumber,total:e.total,refundDate:e.refundDate,refund:e.refund}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(!t.ok)throw new Error(`Hata oluştu, hata kodu: ${t.status} `);{const o=yield t.json();console.log("Rest apidan dönen cevap:\n"),console.log(o),alert("Kitap kiralama işlemi başarıyla gerçekleşmiştir."),alert("Fişinizi kaybetneyiniz. Fiş numaranız: "+e.operationNumber)}}catch(e){console.log("Hata Oluştu."),alert("Kitap kiralama işlemi sırasında bir hata oluştu. Lütfen tekrar deneyiniz.")}}))}refundRentMock(e){return n(this,void 0,void 0,(function*(){try{const t=yield fetch(this.rentApi+"/"+e.operationNumber,{method:"PATCH",body:JSON.stringify({refundDate:e.refundDate,refund:e.refund}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(t.ok){const o=yield t.json();return console.log(o),e.refund}throw new Error(`Hata oluştu, hata kodu: ${t.status} `)}catch(e){console.log("Hata Oluştu.")}}))}}},478:function(e,t,o){var n=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))((function(r,a){function i(e){try{c(n.next(e))}catch(e){a(e)}}function s(e){try{c(n.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(i,s)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.SaleService=void 0;const r=o(607),a=o(354),i=o(767),s=o(51);t.SaleService=class{constructor(e,t){this.saleApi="http://localhost:3002/api/v1/sales",this._saleList=e,this._saleCart=t}get saleList(){return this._saleList}set saleList(e){this._saleList=e}get saleCart(){return this._saleCart}set saleCart(e){this._saleCart=e}addSale(e){this.saleList.push(e)}calculateTotal(e){let t=0;for(let o of e.orderBookItems)t+=o.book.bookSpecification.price*o.quantity;return t}generateSaleNumber(e){let t=new Date;return"S"+t.getDay().toString()+t.getMonth().toString()+t.getFullYear().toString()+t.getHours().toString()+t.getMinutes().toString()+t.getSeconds().toString()+e.toString()}getSale(e){return this.saleList.find((t=>t.operationNumber===e))}removeSale(e){let t=this.saleList.indexOf(e);this.saleList.splice(t,1)}addBookToCart(e,t,o){if(0===this.saleCart.orderBookItems.length)this.saleCart.customerId=o;else if(this.saleCart.orderBookItems.length>0&&this.saleCart.customerId!==o)return alert("Farklı müşteriye kitap satılmaya çalışılıyor. Lütfen tek müşteri için işlem yapınız"),!1;let n=new i.OrderBookItems(e,t);this.saleCart.orderBookItems.push(n),this.updateSaleCart()}updateSaleCart(){const e=document.getElementById("saleCart"),t=document.getElementById("totalSaleAmountTl");if(e){let o,n,r=0;for(;e.lastChild&&e.children.length>1;)e.removeChild(e.lastChild);t.textContent="";for(let e=0;e<this.saleCart.orderBookItems.length;e++){o=document.createElement("div"),o.className="sale-cart-row";for(let e of this.saleCart.orderBookItems)n=document.createElement("div"),n.className="sale-cart-column",n.textContent=this.saleCart.customerId.toString(),o.appendChild(n),n=document.createElement("div"),n.className="sale-cart-column",n.textContent=e.book.name,o.appendChild(n),n=document.createElement("div"),n.className="sale-cart-column",n.textContent=e.quantity.toString(),o.appendChild(n),n=document.createElement("div"),n.className="sale-cart-column",n.textContent=(e.book.bookSpecification.price*e.quantity).toString(),o.appendChild(n)}if(o&&t){for(let e of this.saleCart.orderBookItems)r+=e.book.bookSpecification.price*e.quantity;e.appendChild(o),t.textContent=r.toString()+" TL"}}}cartToSale(){let e=this.saleCart,t=new a.Sale;t.orderBookItems=e.orderBookItems,t.customerId=e.customerId,t.operationNumber=this.generateSaleNumber(e.customerId),t.operationDateTime=new Date,t.total=this.calculateTotal(t);for(let e of t.orderBookItems)r.stockService.increaseStock(e.book.isbn,-e.quantity);let o=this.addSaleMock(t);return this.saleCart=new s.SaleCart,this.updateSaleCart(),o}addSaleMock(e){return n(this,void 0,void 0,(function*(){try{const t=yield fetch(this.saleApi,{method:"POST",body:JSON.stringify({orderBookItems:Array.from(e.orderBookItems),customerId:e.customerId,operationDateTime:e.operationDateTime,operationNumber:e.operationNumber,total:e.total}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(console.log(t),t.ok){const o=yield t.json();return console.log("Rest apidan dönen cevap:\n"),console.log(o),alert("Kitap satış işlemi başarıyla gerçekleşmiştir."),alert("Fişinizi kaybetmeyiniz. Fiş Numarası: "+e.operationNumber),!0}throw new Error(`Hata oluştu, hata kodu: ${t.status} `)}catch(e){console.log("Hata Oluştu.")}}))}}},214:function(e,t,o){var n=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))((function(r,a){function i(e){try{c(n.next(e))}catch(e){a(e)}}function s(e){try{c(n.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(i,s)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.StockService=void 0;const r=o(72);t.StockService=class{constructor(e){this.stockApi="http://localhost:3002/api/stocks",this._stockList=e}get stockList(){return this._stockList}set stockList(e){this._stockList=e}addStock(e,t,o){try{let n=new r.Stock(e,o,t);return this.stockList.push(n),!0}catch(e){return console.error(e),!1}}increaseStock(e,t){let o=this.getStock(e);return!!o&&(o.quantity=o.quantity+t,!0)}getStock(e){let t=this.stockList.find((t=>t.isbn===e));if(t)return t}getStockQuantity(e){let t=this.getStock(e);return t?t.quantity:0}addStockMock(e){return n(this,void 0,void 0,(function*(){try{const t=yield fetch(this.stockApi,{method:"POST",body:JSON.stringify({isbn:e.isbn,quantity:e.quantity,shelfNumber:e.shelfNumber}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(t.ok){const e=yield t.json();return console.log(e),!0}throw new Error(`Hata oluştu, hata kodu: ${t.status} `)}catch(e){console.log("Hata Oluştu."+e)}}))}increaseStockMock(e){return n(this,void 0,void 0,(function*(){try{const t=yield fetch(this.stockApi+"/"+e.isbn,{method:"PUT",body:JSON.stringify({isbn:e.isbn,quantity:e.quantity,shelfNumber:e.shelfNumber}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(!t.ok)throw new Error(`Hata oluştu, hata kodu: ${t.status} `);const o=yield t.json();console.log(o),console.log(t.status)}catch(e){console.log("Hata Oluştu.")}}))}}}},t={};!function o(n){var r=t[n];if(void 0!==r)return r.exports;var a=t[n]={exports:{}};return e[n].call(a.exports,a,a.exports,o),a.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,