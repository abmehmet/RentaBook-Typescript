(()=>{"use strict";var t={221:(t,e,o)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.DataBase=void 0;const n=o(758),a=o(51);e.DataBase=class{constructor(){this._books=new Array,this._stocks=new Array,this._customers=new Array,this._sales=new Array,this._rents=new Array,this._bookSpecifications=new Array,this._cancelSales=new Array,this._saleCart=new a.SaleCart,this._rentCart=new n.RentCart}get getBooksList(){return this._books}get getStocksList(){return this._stocks}get getCustomersList(){return this._customers}get getSalesList(){return this._sales}get getRents(){return this._rents}get getBookSpecifications(){return this._bookSpecifications}get getCancaledSales(){return this._cancelSales}get getSaleCart(){return this._saleCart}get getRentCart(){return this._rentCart}set setSaleCart(t){this._saleCart=t}set setRentCart(t){this._rentCart=t}}},39:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.BookSpecification=void 0,e.BookSpecification=class{constructor(t,e,o,n){this._isbn=t,this._price=e,this._startDate=o,this._endDate=n}get isbn(){return this._isbn}get price(){return this._price}get startDate(){return this._startDate}get endDate(){return this._endDate}set isbn(t){this._isbn=t}set price(t){this._price=t}set startDate(t){this._startDate=t}set endDate(t){this._endDate=t}}},934:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Book=void 0,e.Book=class{constructor(t,e,o,n,a,i){this._name=e,this._author=o,this._isbn=t,this._publishYear=n,this._pages=a,this._bookSpec=i}get isbn(){return this._isbn}get name(){return this._name}get author(){return this._author}get publishYear(){return this._publishYear}get pages(){return this._pages}get bookSpec(){return this._bookSpec}set isbn(t){this._isbn=t}set name(t){this._name=t}set author(t){this._author=t}set publishYear(t){this._publishYear=t}set pages(t){this._pages=t}set bookSpec(t){this._bookSpec=t}}},41:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.CancelSale=void 0,e.CancelSale=class{constructor(t,e,o){this._sale=t,this._refund=e,this._canceledDateTime=o}get sale(){return this._sale}get refund(){return this._refund}get canceledDateTime(){return this._canceledDateTime}set sale(t){this._sale=t}set refund(t){this._refund=t}set canceledDateTime(t){this._canceledDateTime=t}}},916:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Customer=void 0,e.Customer=class{constructor(t,e,o,n){this._id=t,this._name=e,this._surName=o,this._phoneNumber=n}get id(){return this._id}get name(){return this._name}get surName(){return this._surName}get phoneNumber(){return this._phoneNumber}set id(t){this._id=t}set name(t){this._name=t}set surName(t){this._surName=t}set phoneNumber(t){this._phoneNumber=t}}},758:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.RentCart=void 0,e.RentCart=class{constructor(){this.bookAndQuantityMap=new Map}}},961:(t,e,o)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Rent=void 0;const n=o(354);class a extends n.Sale{constructor(t,e,o,n,a,i,r){super(t,e,o,n,a),this._refundDate=i,this._refund=r}get refundDate(){return this._refundDate}get refund(){return this._refund}set refundDate(t){this._refundDate=t}set refund(t){this._refund=t}}e.Rent=a},51:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SaleCart=void 0,e.SaleCart=class{constructor(){this.bookAndQuantityMap=new Map}}},354:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Sale=void 0,e.Sale=class{constructor(t,e,o,n,a){this._bookAndQuantityMap=new Map,this._bookAndQuantityMap=t,this._operationDateTime=e,this._customerId=o,this._operationNumber=n,this._total=a}get bookAndQuantityMap(){return this._bookAndQuantityMap}get operationDateTime(){return this._operationDateTime}get customerId(){return this._customerId}get operationNumber(){return this._operationNumber}get total(){return this._total}set bookAndQuantityMap(t){this._bookAndQuantityMap=t}set operationDateTime(t){this._operationDateTime=t}set customerId(t){this._customerId=t}set operationNumber(t){this._operationNumber=t}set total(t){this._total=t}}},72:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Stock=void 0,e.Stock=class{constructor(t,e,o){this._isbn=t,this._quantity=e,this._shelfNumber=o}get isbn(){return this._isbn}get quantity(){return this._quantity}get shelfNumber(){return this._shelfNumber}set isbn(t){this._isbn=t}set quantity(t){this._quantity=t}set shelfNumber(t){this._shelfNumber=t}}},607:function(t,e,o){var n=this&&this.__awaiter||function(t,e,o,n){return new(o||(o=Promise))((function(a,i){function r(t){try{c(n.next(t))}catch(t){i(t)}}function s(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?a(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(r,s)}c((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.stockService=e.saleService=e.rentService=e.cancelSaleService=e.customerService=e.bookService=void 0;const a=o(221),i=o(934),r=o(39),s=o(41),c=o(916),l=o(354),u=o(72),d=o(946),h=o(609),m=o(709),p=o(148),k=o(478),S=o(214);function b(t,e){const o=document.getElementById(e),n=document.getElementById(t);o&&n&&n.addEventListener("click",(()=>{"none"===o.style.display?o.style.display="block":o.style.display="none"}))}var f;f=new a.DataBase,e.bookService=new d.BookService(f.getBooksList,f.getBookSpecifications),e.customerService=new m.CustomerService(f.getCustomersList),e.cancelSaleService=new h.CancelSaleService(f.getCancaledSales),e.rentService=new p.RentService(f.getRents,f.getRentCart),e.saleService=new k.SaleService(f.getSalesList,f.getSaleCart),e.stockService=new S.StockService(f.getStocksList),console.log("Services intiliazed."),e.customerService.addCustomer(new c.Customer(1,"","","")),e.customerService.addCustomer(new c.Customer(2,"","","")),e.stockService.addStock("123-45","A45-52",10),e.stockService.addStock("123-46","A45-52",10),function(){n(this,void 0,void 0,(function*(){yield e.bookService.initializeDataMock()}))}(),b("addBookMenuItem","addBookSection"),b("showBooksMenuItem","listBooksSection"),b("addCustomerMenuItem","addCustomerSection"),b("addStockMenuItem","addStockSection"),b("saleBookMenuItem","saleBookSection"),b("rentBookMenuItem","rentBookSection"),b("cancelSaleMenuItem","cancelSaleSection");const g=document.getElementById("add-book-form");null!=g&&(g.onsubmit=t=>n(void 0,void 0,void 0,(function*(){t.preventDefault();const o=new FormData(g),n=o.get("bookTitle"),a=o.get("bookAuthor"),s=o.get("bookIsbn"),c=o.get("bookPublishYear"),l=o.get("bookPages"),u=o.get("bookPrice"),d=new Date,h=new Date("Dec 31, 9999 23:59:59");n.match("");const m=new r.BookSpecification(s,u,d,h),p=new i.Book(s,n,a,c,l,m);return(yield e.bookService.addBookMock(p))?(alert(p.isbn+" numaralı kitap Ekleme İşlemi Başarı İle Tamamlanmıştır."),g.reset()):alert(p.isbn+" numaralı kitap Ekleme İşlemi Sırasında Bir Hata oluştu."),!1})));const y=document.getElementById("add-stock-form");y&&(y.onsubmit=t=>n(void 0,void 0,void 0,(function*(){t.preventDefault();const o=new FormData(y),n=o.get("bookIsbnForAddStock"),a=o.get("stockQuantity"),i=o.get("shelfNumber"),r=new u.Stock(n,a,i);return e.bookService.bookList.some((t=>t.isbn==n))?(yield e.stockService.addStockMock(r))&&alert(n+" isbn numaralı kitaptan, "+a+" kadar sisteme stok eklenmiştir."):alert("Stok eklenmeye çalışılan kitap, kayıtlı değildir. Lütfen önce kitap ekleyiniz"),y.reset(),!1})));const v=document.getElementById("add-customer-form");v&&(v.onsubmit=t=>n(void 0,void 0,void 0,(function*(){t.preventDefault();const o=new FormData(v),n=o.get("customerName"),a=o.get("customerSurname"),i=o.get("customerPhoneNumber"),r=new c.Customer(e.customerService.getNewCustomerId(),n,a,i);return yield e.customerService.addCustomerMock(r),alert("Müşteri Ekleme İşlemi Başarı İle Tamamlanmıştır. "),v.reset(),!1})));const _=document.getElementById("sale-book-form");_&&(_.onsubmit=()=>{const t=new FormData(_),o=t.get("isbnForSale"),n=e.bookService.getBook(o),a=parseInt(t.get("customerIdForSale")),i=e.customerService.isValidCustomer(a),r=parseInt(t.get("quantityForSale")),s=e.stockService.getStock(o);try{return n?s?s.quantity>=r?i?e.saleService.addBookToCart(n,r,a):alert(a+" numaralı müşteri kayıtlı değildir."):alert(r+" kadar kitap dükkanda mevcut değildir."):alert(`Dükkanda ${o} numaralı kitabın stoğu mevcut değildir.`):alert(o+" numaralı kitap yoktur."),_.reset(),!1}catch(t){alert(t)}}),document.getElementById("btnSale").addEventListener("click",(()=>{0===e.saleService.saleCart.bookAndQuantityMap.size?alert("Sepette ürün yok. Lütfen önce ürün ekleyiniz"):e.saleService.cartToSale()})),document.getElementById("showBooksMenuItem").addEventListener("click",(()=>{e.bookService.listBooks()}));const C=document.getElementById("cancel-sale-form");C&&(C.onsubmit=t=>n(void 0,void 0,void 0,(function*(){t.preventDefault();let o=new Map;o.set(e.bookService.getBook("123-45"),3);let n=new l.Sale(o,new Date,1,"S021122163045",123);e.saleService.saleList.push(n);const a=new FormData(C).get("saleNumberforCancel");let i=e.saleService.getSale(a);if(i){let t=new s.CancelSale(i,i.total,new Date);(yield e.cancelSaleService.cancelSaleMock(t))?alert(i.operationNumber+" numaralı satış iptal edilmiştir."):alert(i.operationNumber+" numaralı satış iptal edilirken hata meydana geldi.")}else alert(a+" numaralı satış bulunamamıştır. Tekrar deneyiniz.")})));const w=document.getElementById("rent-book-form");w&&(w.onsubmit=()=>{const t=new FormData(w),o=t.get("isbnForRent"),n=e.bookService.getBook(o),a=parseInt(t.get("customerIdForRent")),i=e.customerService.isValidCustomer(a),r=parseInt(t.get("quantityForRent")),s=e.stockService.getStock(o);try{return n?s?s.quantity>=r?i?e.rentService.addBookToCart(n,r,a):alert(a+" numaralı müşteri kayıtlı değildir."):alert(r+" kadar kitap dükkanda mevcut değildir."):alert(`Dükkanda ${o} numaralı kitabın stoğu mevcut değildir.`):alert(o+" numaralı kitap yoktur."),w.reset(),!1}catch(t){alert(t)}}),document.getElementById("btnRent").addEventListener("click",(()=>{0===e.rentService.rentCart.bookAndQuantityMap.size?alert("Sepette ürün yok. Lütfen önce ürün ekleyiniz"):e.rentService.cartToRent()}))},946:function(t,e,o){var n=this&&this.__awaiter||function(t,e,o,n){return new(o||(o=Promise))((function(a,i){function r(t){try{c(n.next(t))}catch(t){i(t)}}function s(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?a(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(r,s)}c((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.BookService=void 0;const a=o(607);e.BookService=class{constructor(t,e){this.bookApi="http://localhost:3002/api/books/",this._bookList=t,this._bookSpecList=e}get bookList(){return this._bookList}set bookList(t){this._bookList=t}get bookSpecList(){return this._bookSpecList}set bookSpecList(t){this._bookSpecList=t}getBook(t){return this.bookList.find((e=>e.isbn===t))}addBook(t){try{this.bookList.push(t),this._bookSpecList.push(t.bookSpec)}catch(t){console.log("Kitap eklenirken bir hata meydana geldi.")}}isValidBook(t){const e=this.getBook(t);return this.bookList.includes(e)}initializeDataMock(){return n(this,void 0,void 0,(function*(){try{const t=yield fetch("http://localhost:3002/api/books",{method:"GET",headers:{Accept:"application/json"}});if(!t.ok)throw new Error(`Hata oluştu, hata kodu: ${t.status} `);const e=yield t.json(),o=JSON.parse(JSON.stringify(e,null,4));this.bookList=o}catch(t){console.error(t)}}))}listBooks(){const t=document.getElementById("listBooks");if(t){let e,o;for(;t.lastChild&&t.children.length>1;)t.removeChild(t.lastChild);this.bookList.forEach((n=>{e=document.createElement("div"),e.className="row-list-book",o=document.createElement("div"),o.className="column-list-book",o.textContent=n.isbn.toString(),e.appendChild(o),o=document.createElement("div"),o.className="column-list-book",o.textContent=n.name.toString(),e.appendChild(o),o=document.createElement("div"),o.className="column-list-book",o.textContent=n.author.toString(),e.appendChild(o),o=document.createElement("div"),o.className="column-list-book",o.textContent=a.stockService.getStockQuantity(n.isbn).toString(),e.appendChild(o),o=document.createElement("div"),o.className="column-list-book",o.textContent=n.bookSpec.price.toString()+" ₺",e.appendChild(o),t.appendChild(e)}))}}addBookMock(t){return n(this,void 0,void 0,(function*(){try{const e=yield fetch(this.bookApi,{method:"POST",body:JSON.stringify({isbn:t.isbn,name:t.name,author:t.author,pages:t.pages,publishYear:t.publishYear}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(e.ok){const t=yield e.json();return console.log("Mock servisinden dönen cevap =>"+JSON.stringify(t)),!0}throw new Error(`Hata oluştu, hata kodu: ${e.status} `)}catch(t){console.log("Hata Oluştu.")}}))}}},609:function(t,e){var o=this&&this.__awaiter||function(t,e,o,n){return new(o||(o=Promise))((function(a,i){function r(t){try{c(n.next(t))}catch(t){i(t)}}function s(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?a(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(r,s)}c((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.CancelSaleService=void 0,e.CancelSaleService=class{constructor(t){this.cancelSaleApi="http://localhost:3002/api/cancelSale",this._cancelledSalesList=t}get cancelledSalesList(){return this._cancelledSalesList}set cancelledSalesList(t){this._cancelledSalesList=t}cancelSale(t){let e=this.calculateRefund(t);t.refund=e,this.cancelledSalesList.push(t)}calculateRefund(t){let e;return e=this.calculateDiffHours(t.canceledDateTime,t.sale.operationDateTime)>24?.75*t.sale.total:t.sale.total,e}calculateDiffHours(t,e){let o=t.getTime()-e.getTime();return Math.floor(o/1e3/60/60)}cancelSaleMock(t){return o(this,void 0,void 0,(function*(){let e=this.calculateRefund(t);t.refund=e;try{const e=yield fetch(this.cancelSaleApi,{method:"POST",body:JSON.stringify({sale:t.sale,refund:t.refund,canceledDateTime:t.canceledDateTime}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(e.ok){const t=yield e.json();return console.log(t),!0}throw new Error(`Hata oluştu, hata kodu: ${e.status} `)}catch(t){console.log("Hata Oluştu.")}}))}}},709:function(t,e){var o=this&&this.__awaiter||function(t,e,o,n){return new(o||(o=Promise))((function(a,i){function r(t){try{c(n.next(t))}catch(t){i(t)}}function s(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?a(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(r,s)}c((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.CustomerService=void 0,e.CustomerService=class{constructor(t){this.customerApi="http://localhost:3002/api/customers",this._customerList=t}get customerList(){return this._customerList}set customerList(t){this._customerList=t}addCustomer(t){this.customerList.push(t)}getNewCustomerId(){let t=0;return this.customerList.length>0&&(t=this.customerList.at(this.customerList.length-1).id),t+=1,t}getCustomerInfo(t){return this.customerList.find((e=>e.id===t))||void 0}isValidCustomer(t){return!!this.customerList.some((e=>e.id===t))}addCustomerMock(t){return o(this,void 0,void 0,(function*(){try{const e=yield fetch(this.customerApi,{method:"POST",body:JSON.stringify({id:t.id,name:t.name,surName:t.surName,phoneNumber:t.phoneNumber}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(!e.ok)throw new Error(`Hata oluştu, hata kodu: ${e.status} `);const o=yield e.json();console.log(o)}catch(t){console.log("Hata Oluştu.")}}))}}},148:function(t,e,o){var n=this&&this.__awaiter||function(t,e,o,n){return new(o||(o=Promise))((function(a,i){function r(t){try{c(n.next(t))}catch(t){i(t)}}function s(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?a(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(r,s)}c((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.RentService=void 0;const a=o(607),i=o(961),r=o(758);e.RentService=class{constructor(t,e){this.rentApi="http://localhost:3002/api/rents",this._rentList=t,this.refundPercent=.75,this._rentCart=e}get rentList(){return this._rentList}set rentList(t){this._rentList=t}get rentCart(){return this._rentCart}set rentCart(t){this._rentCart=t}addRent(t){this.rentList.push(t)}calculateTotal(t){t.bookAndQuantityMap;let e=0;for(let o of t.bookAndQuantityMap)e+=o[0].bookSpec.price*o[1];return e}generateRentNumber(t){let e=new Date;return"R"+e.getDay().toString+e.getMonth().toString+e.getFullYear().toString+e.getHours().toString+e.getMinutes().toString+e.getSeconds().toString+t.toString}calculateRefund(t){t.refund=t.total*this.refundPercent}addBookToCart(t,e,o){if(0===this.rentCart.bookAndQuantityMap.size)this.rentCart.customerId=o;else if(this.rentCart.bookAndQuantityMap.size>0&&this.rentCart.customerId!==o)return alert("Farklı müşteriye kitap kiralanmaya çalışılıyor. Lütfen tek müşteri için işlem yapınız"),!1;this.rentCart.bookAndQuantityMap.set(t,e),this.updateRentCart()}updateRentCart(){const t=document.getElementById("rentCart"),e=document.getElementById("totalRentAmountTl");if(t){let o,n,a=0;for(;t.lastChild&&t.children.length>1;)t.removeChild(t.lastChild);e.textContent="";for(let t=0;t<this.rentCart.bookAndQuantityMap.size;t++){o=document.createElement("div"),o.className="rent-cart-row";for(let t of this.rentCart.bookAndQuantityMap.entries())n=document.createElement("div"),n.className="rent-cart-column",n.textContent=this.rentCart.customerId.toString(),o.appendChild(n),n=document.createElement("div"),n.className="rent-cart-column",n.textContent=t[0].name,o.appendChild(n),n=document.createElement("div"),n.className="rent-cart-column",n.textContent=t[1].toString(),o.appendChild(n),n=document.createElement("div"),n.className="rent-cart-column",n.textContent=(t[0].bookSpec.price*t[1]).toString(),o.appendChild(n)}if(o&&e){for(let t of this.rentCart.bookAndQuantityMap)a+=t[0].bookSpec.price*t[1];t.appendChild(o),e.textContent=a.toString()+" TL"}}}cartToRent(){let t=this.rentCart,e=new i.Rent;e.bookAndQuantityMap=t.bookAndQuantityMap,e.customerId=t.customerId,e.operationNumber=this.generateRentNumber(t.customerId),e.operationDateTime=new Date,e.total=this.calculateTotal(e);for(let t of e.bookAndQuantityMap)a.stockService.increaseStock(t[0].isbn,-t[1]);this.rentCart=new r.RentCart,this.updateRentCart(),this.addRentMock(e)}addRentMock(t){return n(this,void 0,void 0,(function*(){try{console.log(t.bookAndQuantityMap);const e=yield fetch(this.rentApi,{method:"POST",body:JSON.stringify({bookAndQuantity:t.bookAndQuantityMap,customerId:t.customerId,operationDateTime:t.operationDateTime,operationNumber:t.operationNumber,total:t.total}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(e.ok){const t=yield e.json();return console.log(t),alert(t.message+" "+t.saleNumber),!0}throw new Error(`Hata oluştu, hata kodu: ${e.status} `)}catch(t){console.log("Hata Oluştu.")}}))}}},478:function(t,e,o){var n=this&&this.__awaiter||function(t,e,o,n){return new(o||(o=Promise))((function(a,i){function r(t){try{c(n.next(t))}catch(t){i(t)}}function s(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?a(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(r,s)}c((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.SaleService=void 0;const a=o(607),i=o(354),r=o(51);e.SaleService=class{constructor(t,e){this.saleApi="http://localhost:3002/api/sales",this._saleList=t,this._saleCart=e}get saleList(){return this._saleList}set saleList(t){this._saleList=t}get saleCart(){return this._saleCart}set saleCart(t){this._saleCart=t}addSale(t){this.saleList.push(t)}calculateTotal(t){let e=0;for(let o of t.bookAndQuantityMap.entries())e+=o[0].bookSpec.price*o[1];return e}generateSaleNumber(t){let e=new Date;return"S"+e.getDay().toString()+e.getMonth().toString()+e.getFullYear().toString()+e.getHours().toString()+e.getMinutes().toString()+e.getSeconds().toString()+t.toString()}getSale(t){return this.saleList.find((e=>e.operationNumber===t))}removeSale(t){let e=this.saleList.indexOf(t);this.saleList.splice(e,1)}addBookToCart(t,e,o){if(0===this.saleCart.bookAndQuantityMap.size)this.saleCart.customerId=o;else if(this.saleCart.bookAndQuantityMap.size>0&&this.saleCart.customerId!==o)return alert("Farklı müşteriye kitap satılmaya çalışılıyor. Lütfen tek müşteri için işlem yapınız"),!1;this.saleCart.bookAndQuantityMap.set(t,e),this.updateSaleCart()}updateSaleCart(){const t=document.getElementById("saleCart"),e=document.getElementById("totalSaleAmountTl");if(t){let o,n,a=0;for(;t.lastChild&&t.children.length>1;)t.removeChild(t.lastChild);e.textContent="";for(let t=0;t<this.saleCart.bookAndQuantityMap.size;t++){o=document.createElement("div"),o.className="sale-cart-row";for(let t of this.saleCart.bookAndQuantityMap.entries())n=document.createElement("div"),n.className="sale-cart-column",n.textContent=this.saleCart.customerId.toString(),o.appendChild(n),n=document.createElement("div"),n.className="sale-cart-column",n.textContent=t[0].name,o.appendChild(n),n=document.createElement("div"),n.className="sale-cart-column",n.textContent=t[1].toString(),o.appendChild(n),n=document.createElement("div"),n.className="sale-cart-column",n.textContent=(t[0].bookSpec.price*t[1]).toString(),o.appendChild(n)}if(o&&e){for(let t of this.saleCart.bookAndQuantityMap)a+=t[0].bookSpec.price*t[1];t.appendChild(o),e.textContent=a.toString()+" TL"}}}cartToSale(){let t=this.saleCart,e=new i.Sale;e.bookAndQuantityMap=t.bookAndQuantityMap,e.customerId=t.customerId,e.operationNumber=this.generateSaleNumber(t.customerId),e.operationDateTime=new Date,e.total=this.calculateTotal(e);for(let t of e.bookAndQuantityMap)a.stockService.increaseStock(t[0].isbn,-t[1]);this.addSaleMock(e),this.saleCart=new r.SaleCart,this.updateSaleCart()}addSaleMock(t){return n(this,void 0,void 0,(function*(){try{console.log(t.bookAndQuantityMap);const e=yield fetch(this.saleApi,{method:"POST",body:JSON.stringify({bookAndQuantity:t.bookAndQuantityMap,customerId:t.customerId,operationDateTime:t.operationDateTime,operationNumber:t.operationNumber,total:t.total}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(!e.ok)throw new Error(`Hata oluştu, hata kodu: ${e.status} `);const o=yield e.json();console.log(o),alert(o.message+" "+o.saleNumber)}catch(t){console.log("Hata Oluştu.")}}))}}},214:function(t,e,o){var n=this&&this.__awaiter||function(t,e,o,n){return new(o||(o=Promise))((function(a,i){function r(t){try{c(n.next(t))}catch(t){i(t)}}function s(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?a(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(r,s)}c((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.StockService=void 0;const a=o(72);e.StockService=class{constructor(t){this.stockApi="http://localhost:3002/api/stocks",this._stockList=t}get stockList(){return this._stockList}set stockList(t){this._stockList=t}addStock(t,e,o){try{let n=new a.Stock(t,o,e);return this.stockList.push(n),!0}catch(t){return console.error(t),!1}}increaseStock(t,e){let o=this.getStock(t);return!!o&&(o.quantity=o.quantity+e,!0)}getStock(t){let e=this.stockList.find((e=>e.isbn===t));if(e)return e}getStockQuantity(t){let e=this.getStock(t);return e?e.quantity:0}addStockMock(t){return n(this,void 0,void 0,(function*(){try{const e=yield fetch(this.stockApi,{method:"POST",body:JSON.stringify({isbn:t.isbn,quantity:t.quantity,shelfNumber:t.shelfNumber}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(e.ok){const t=yield e.json();return console.log(t),!0}throw new Error(`Hata oluştu, hata kodu: ${e.status} `)}catch(t){console.log("Hata Oluştu."+t)}}))}increaseStockMock(t){return n(this,void 0,void 0,(function*(){try{const e=yield fetch(this.stockApi+"/"+t.isbn,{method:"PUT",body:JSON.stringify({isbn:t.isbn,quantity:t.quantity,shelfNumber:t.shelfNumber}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(!e.ok)throw new Error(`Hata oluştu, hata kodu: ${e.status} `);const o=yield e.json();console.log(o),console.log(e.status)}catch(t){console.log("Hata Oluştu.")}}))}}}},e={};!function o(n){var a=e[n];if(void 0!==a)return a.exports;var i=e[n]={exports:{}};return t[n].call(i.exports,i,i.exports,o),i.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,