(()=>{"use strict";var e={221:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DataBase=void 0;const n=o(758),r=o(51);t.DataBase=class{constructor(){this._books=new Array,this._stocks=new Array,this._customers=new Array,this._sales=new Array,this._rents=new Array,this._bookSpecifications=new Array,this._cancels=new Array,this._saleCart=new r.SaleCart,this._rentCart=new n.RentCart}get getBooksList(){return this._books}get getStocksList(){return this._stocks}get getCustomersList(){return this._customers}get getSalesList(){return this._sales}get getRents(){return this._rents}get getBookSpecifications(){return this._bookSpecifications}get getCancaledSales(){return this._cancels}get getSaleCart(){return this._saleCart}get getRentCart(){return this._rentCart}set setSaleCart(e){this._saleCart=e}set setRentCart(e){this._rentCart=e}}},333:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BookPrice=void 0,t.BookPrice=class{get id(){return this._id}set id(e){this._id=e}get price(){return this._price}get startDate(){return this._startDate}get endDate(){return this._endDate}set price(e){this._price=e}set startDate(e){this._startDate=e}set endDate(e){this._endDate=e}}},934:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Book=void 0,t.Book=class{constructor(e,t,o,n,r,i){this._name=t,this._author=o,this._isbn=e,this._publishYear=n,this._pages=r,this._bookPrice=i}get id(){return this._id}set id(e){this._id=e}get isbn(){return this._isbn}get name(){return this._name}get author(){return this._author}get publishYear(){return this._publishYear}get pages(){return this._pages}get bookPrice(){return this._bookPrice}set isbn(e){this._isbn=e}set name(e){this._name=e}set author(e){this._author=e}set publishYear(e){this._publishYear=e}set pages(e){this._pages=e}set bookPrice(e){this._bookPrice=e}}},916:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Customer=void 0,t.Customer=class{constructor(e,t,o){this._name=e,this._surName=t,this._phoneNumber=o}get id(){return this._id}set id(e){this._id=e}get name(){return this._name}get surName(){return this._surName}get phoneNumber(){return this._phoneNumber}set name(e){this._name=e}set surName(e){this._surName=e}set phoneNumber(e){this._phoneNumber=e}}},767:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.OrderBookItems=void 0,t.OrderBookItems=class{constructor(e,t){this._book=e,this._quantity=t}get book(){return this._book}get quantity(){return this._quantity}set book(e){this._book=e}set quantity(e){this._quantity=e}toJSON(){return{book:this._book,quantity:this._quantity}}}},758:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.RentCart=void 0,t.RentCart=class{constructor(){this.orderBookItems=new Array}}},961:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Rent=void 0;const n=o(354);class r extends n.Sale{constructor(e,t,o,n,r,i,a){super(e,o,t,n,r),this._refundDate=i,this._refund=a}get refundDate(){return this._refundDate}get refund(){return this._refund}set refundDate(e){this._refundDate=e}set refund(e){this._refund=e}}t.Rent=r},51:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SaleCart=void 0,t.SaleCart=class{constructor(){this.orderBookItems=new Array}}},354:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Sale=void 0,t.Sale=class{constructor(e,t,o,n,r){this._orderBookItems=e,this._customerId=t,this._operationDateTime=o,this._operationNumber=n,this._total=r}get orderBookItems(){return this._orderBookItems}get customerId(){return this._customerId}get operationDateTime(){return this._operationDateTime}get operationNumber(){return this._operationNumber}get total(){return this._total}set orderBookItems(e){this._orderBookItems=e}set customerId(e){this._customerId=e}set operationDateTime(e){this._operationDateTime=e}set operationNumber(e){this._operationNumber=e}set total(e){this._total=e}}},72:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Stock=void 0,t.Stock=class{constructor(e,t,o){this._quantity=e,this._shelfNumber=t,this._book=o}get id(){return this._id}set id(e){this._id=e}get book(){return this._book}set book(e){this._book=e}get quantity(){return this._quantity}get shelfNumber(){return this._shelfNumber}set quantity(e){this._quantity=e}set shelfNumber(e){this._shelfNumber=e}}},607:function(e,t,o){var n=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))((function(r,i){function a(e){try{c(n.next(e))}catch(e){i(e)}}function s(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(a,s)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.stockService=t.saleService=t.rentService=t.cancelService=t.customerService=t.bookService=void 0;const r=o(221),i=o(934),a=o(333),s=o(916),c=o(72),l=o(946),u=o(943),d=o(709),h=o(148),m=o(478),k=o(214);function p(){return n(this,void 0,void 0,(function*(){t.bookService.bookList=yield t.bookService.getAllBooksData(),t.stockService.stockList=yield t.stockService.getAllStocksData(),t.customerService.customerList=yield t.customerService.getAllCustomersData(),console.table(t.bookService.bookList),console.table(t.stockService.stockList),console.table(t.customerService.customerList),console.log("Data intiliazed.")}))}function f(e,t){const o=document.getElementById(t),n=document.getElementById(e);o&&n&&n.addEventListener("click",(()=>{"none"===o.style.display?o.style.display="block":o.style.display="none"}))}var v;v=new r.DataBase,t.bookService=new l.BookService(v.getBooksList,v.getBookSpecifications),t.customerService=new d.CustomerService(v.getCustomersList),t.cancelService=new u.CancelService(v.getCancaledSales),t.rentService=new h.RentService(v.getRents,v.getRentCart),t.saleService=new m.SaleService(v.getSalesList,v.getSaleCart),t.stockService=new k.StockService(v.getStocksList),console.log("Services intiliazed."),p(),f("addBookMenuItem","addBookSection"),f("showBooksMenuItem","listBooksSection"),f("addCustomerMenuItem","addCustomerSection"),f("addStockMenuItem","addStockSection"),f("saleBookMenuItem","saleBookSection"),f("rentBookMenuItem","rentBookSection"),f("cancelSaleMenuItem","cancelSaleSection"),f("cancelRentMenuItem","cancelRentSection"),f("refundBookMenuItem","refundBookSection"),f("rentNow","rentBookSection");const y=document.getElementById("add-book-form");null!=y&&(y.onsubmit=e=>n(void 0,void 0,void 0,(function*(){e.preventDefault();const o=new FormData(y),n=o.get("bookTitle"),r=o.get("bookAuthor"),s=o.get("bookIsbn"),c=o.get("bookPublishYear"),l=o.get("bookPages"),u=o.get("bookPrice"),d=new a.BookPrice;d.price=u;const h=new i.Book(s,n,r,c,l,d);if(!1===t.bookService.bookList.some((e=>e.isbn===h.isbn)))return(yield t.bookService.createBook(h))?(alert(h.isbn+" numaralı kitap Ekleme İşlemi Başarı İle Tamamlanmıştır."),y.reset(),w()):alert(h.isbn+" numaralı kitap Ekleme İşlemi Sırasında Bir Hata oluştu."),!1;alert("Aynı ISBN numrasına sahip ikinci bir kitap eklenemz.")})));const b=document.getElementById("add-stock-form");b&&(b.onsubmit=e=>n(void 0,void 0,void 0,(function*(){e.preventDefault();const o=new FormData(b),n=o.get("bookIsbnForAddStock"),r=o.get("stockQuantity"),i=o.get("shelfNumber"),a=t.bookService.bookList.find((e=>e.isbn===n));if(a){const e=new c.Stock(r,i,a);(yield t.stockService.createStock(e))&&(alert(n+" isbn numaralı kitaptan, "+r+" kadar sisteme stok eklenmiştir."),yield p(),yield w())}else alert("Stok eklenmeye çalışılan kitaba ait isbn numarası hatalıdır.");return b.reset(),!1})));const g=document.getElementById("add-customer-form");g&&(g.onsubmit=e=>n(void 0,void 0,void 0,(function*(){e.preventDefault();const o=new FormData(g),n=o.get("customerName"),r=o.get("customerSurname"),i=o.get("customerPhoneNumber"),a=new s.Customer(n,r,i);return(yield t.customerService.createCustomer(a))?(alert("Müşteri Ekleme İşlemi Başarı İle Tamamlanmıştır. "),g.reset()):alert("Müşteri Ekleme İşlemi Sırasında bir hata ile karşılıldı. "),!1})));const S=document.getElementById("sale-book-form");S&&(S.onsubmit=e=>n(void 0,void 0,void 0,(function*(){e.preventDefault();const o=new FormData(S),n=o.get("isbnForSale"),r=parseInt(o.get("customerIdForSale")),i=parseInt(o.get("quantityForSale")),a=yield t.bookService.getBook(n),s=yield t.customerService.getCustomer(r);try{if(a){let e=yield t.stockService.getStockByBookId(a.id);e?e.quantity>=i?s?t.saleService.addBookToCart(a,i,r):alert(r+" numaralı müşteri kayıtlı değildir."):alert(i+" kadar kitap dükkanda mevcut değildir."):alert(`Dükkanda ${n} numaralı kitabın stoğu mevcut değildir.`)}else alert(n+" numaralı kitap yoktur.");return S.reset(),!1}catch(e){alert(e)}}))),document.getElementById("btnSale").addEventListener("click",(()=>{0===t.saleService.saleCart.orderBookItems.length?alert("Sepette ürün yok. Lütfen önce ürün ekleyiniz"):t.saleService.cartToSale()})),document.getElementById("showBooksMenuItem").addEventListener("click",(()=>{w()}));const _=document.getElementById("cancel-sale-form");_&&(_.onsubmit=e=>n(void 0,void 0,void 0,(function*(){e.preventDefault();const o=new FormData(_).get("saleNumberforCancel");!0===(yield t.saleService.isExistSale(o))?(yield t.cancelService.cancelSaleMock(o))?alert(o+" numaralı satış iptal edilmiştir."):alert(o+" numaralı satış iptal edilirken hata meydana geldi."):alert(o+" numaralı satış bulunamamıştır. Tekrar deneyiniz.")})));const C=document.getElementById("cancel-rent-form");C&&(C.onsubmit=e=>n(void 0,void 0,void 0,(function*(){e.preventDefault();const o=new FormData(C).get("rentNumberforCancel");(yield t.cancelService.cancelRentMock(o))?alert(o+" numaralı kiralama iptal edilmiştir."):alert(o+" numaralı kiralma bulunamamıştır. Tekrar deneyiniz.")})));const B=document.getElementById("rent-book-form");B&&(B.onsubmit=e=>n(void 0,void 0,void 0,(function*(){e.preventDefault();const o=new FormData(B),n=o.get("isbnForRent"),r=yield t.bookService.getBook(n),i=parseInt(o.get("customerIdForRent")),a=yield t.customerService.getCustomer(i),s=parseInt(o.get("quantityForRent"));try{if(r){const e=yield t.stockService.getStockByBookId(r.id);e?e.quantity>=s?a?t.rentService.addBookToCart(r,s,i):alert(i+" numaralı müşteri kayıtlı değildir."):alert(s+" kadar kitap dükkanda mevcut değildir."):alert(`Dükkanda ${n} numaralı kitabın stoğu mevcut değildir. Önce stok ekleyiniz`)}else alert(n+" numaralı kitap yoktur.");return B.reset(),!1}catch(e){alert(e)}}))),document.getElementById("btnRent").addEventListener("click",(()=>{0===t.rentService.rentCart.orderBookItems.length?alert("Sepette ürün yok. Lütfen önce ürün ekleyiniz"):t.rentService.cartToRent()}));const I=document.getElementById("refund-book-form");function w(){return n(this,void 0,void 0,(function*(){t.bookService.bookList=yield t.bookService.getAllBooksData(),t.stockService.stockList=yield t.stockService.getAllStocksData();const e=document.getElementById("listBooks");if(e){let o,n;for(;e.lastChild&&e.children.length>1;)e.removeChild(e.lastChild);t.bookService.bookList.forEach((r=>{o=document.createElement("div"),o.className="row-list-book",n=document.createElement("div"),n.className="column-list-book",n.textContent=r.isbn.toString(),o.appendChild(n),n=document.createElement("div"),n.className="column-list-book",n.textContent=r.name.toString(),o.appendChild(n),n=document.createElement("div"),n.className="column-list-book",n.textContent=r.author.toString(),o.appendChild(n),n=document.createElement("div"),n.className="column-list-book";let i=0;!0===t.stockService.stockList.some((e=>e.book.id===r.id))&&(i=t.stockService.stockList.find((e=>e.book.id===r.id)).quantity),n.textContent=i.toString(),o.appendChild(n),n=document.createElement("div"),n.className="column-list-book",n.textContent=r.bookPrice.price.toString()+" ₺",o.appendChild(n),e.appendChild(o)}))}}))}I&&(I.onsubmit=e=>n(void 0,void 0,void 0,(function*(){e.preventDefault();const o=new FormData(I).get("rentNumberforRefund");if(!0===(yield t.rentService.isExistRent(o))){let e=yield t.rentService.refundRent(o);e?(alert(e.operationNumber+" numaralı kiralama geri alınmıştır."),alert("Geri ödeme miktarı:"+e.refund+" ₺ .")):alert(o+" numaralı kiralama iptal edilirken hata meydana geldi.")}else alert(o+" numaralı kiralama bulunamamıştır. Tekrar deneyiniz.")})))},946:function(e,t){var o=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))((function(r,i){function a(e){try{c(n.next(e))}catch(e){i(e)}}function s(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(a,s)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.BookService=void 0,t.BookService=class{constructor(e,t){this.bookApi="http://localhost:3002/api/v1/books",this._bookList=e,this._bookSpecification=t}get bookList(){return this._bookList}get bookSpecification(){return this._bookSpecification}set bookList(e){this._bookList=e}set bookSpecification(e){this._bookSpecification=e}getBook(e){return o(this,void 0,void 0,(function*(){const t=yield fetch(this.bookApi+"/q?isbn="+e,{method:"GET",headers:{Accept:"application/json"}});return t.ok?yield t.json():null}))}getAllBooksData(){return o(this,void 0,void 0,(function*(){const e=yield fetch(this.bookApi,{method:"GET",headers:{Accept:"application/json"}});if(!e.ok)throw new Error(`Hata oluştu, hata kodu: ${e.status} `);return yield e.json()}))}createBook(e){return o(this,void 0,void 0,(function*(){try{const t=yield fetch(this.bookApi,{method:"POST",body:JSON.stringify({isbn:e.isbn,name:e.name,author:e.author,pages:e.pages,publishYear:e.publishYear,bookPriceCreateDto:{price:e.bookPrice.price}}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(t.ok){const e=yield t.json();return console.log("Rest servisinden dönen cevap =>"),console.log(e),this.bookList=yield this.getAllBooksData(),!0}throw new Error(`Hata oluştu, hata kodu: ${t.status} `)}catch(e){console.log("Hata Oluştu.")}}))}}},943:function(e,t){var o=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))((function(r,i){function a(e){try{c(n.next(e))}catch(e){i(e)}}function s(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(a,s)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.CancelService=void 0,t.CancelService=class{constructor(e){this.cancelSaleApi="http://localhost:3002/api/v1/sales",this.cancelRentApi="http://localhost:3002/api/v1/rents",this._cancelledList=e}get cancelledList(){return this._cancelledList}set cancelledList(e){this._cancelledList=e}calculateDiffHours(e,t){let o=e.getTime()-t.getTime();return Math.floor(o/1e3/60/60)}cancelSale(e){let t=this.calculateCancelSaleRefund(e);e.refund=t,this.cancelledList.push(e)}calculateCancelSaleRefund(e){let t;return t=this.calculateDiffHours(e.canceledDateTime,e.cancelType.operationDateTime)>24?.75*e.cancelType.total:e.cancelType.total,t}cancelSaleMock(e){return o(this,void 0,void 0,(function*(){try{const t=yield fetch(this.cancelSaleApi+"/"+e,{method:"DELETE",headers:{"Content-Type":"application/json",Accept:"application/json"}});if(t.ok)return console.log(t),!0;throw new Error(`Hata oluştu, hata kodu: ${t.status} `)}catch(e){console.log("Hata Oluştu.")}}))}cancelRent(e){let t=this.calculateCancelRentRefund(e);e.refund=t,this.cancelledList.push(e)}calculateCancelRentRefund(e){let t;return t=this.calculateDiffHours(e.canceledDateTime,e.cancelType.operationDateTime)>24?.75*e.cancelType.total:e.cancelType.total,t}cancelRentMock(e){return o(this,void 0,void 0,(function*(){const t=yield fetch(this.cancelRentApi+"/"+e,{method:"DELETE",headers:{"Content-Type":"application/json",Accept:"application/json"}});return!!t.ok&&(console.log(t),!0)}))}}},709:function(e,t){var o=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))((function(r,i){function a(e){try{c(n.next(e))}catch(e){i(e)}}function s(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(a,s)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.CustomerService=void 0,t.CustomerService=class{constructor(e){this.customerApi="http://localhost:3002/api/v1/customers",this._customerList=e}get customerList(){return this._customerList}set customerList(e){this._customerList=e}getAllCustomersData(){return o(this,void 0,void 0,(function*(){const e=yield fetch(this.customerApi,{method:"GET",headers:{Accept:"application/json"}});if(!e.ok)throw new Error(`Hata oluştu, hata kodu: ${e.status} `);return yield e.json()}))}createCustomer(e){return o(this,void 0,void 0,(function*(){try{const t=yield fetch(this.customerApi,{method:"POST",body:JSON.stringify({name:e.name,surName:e.surName,phoneNumber:e.phoneNumber}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(t.ok){const e=yield t.json();return console.log("Rest servisinden dönen cevap =>"),console.log(e),!0}throw new Error(`Hata oluştu, hata kodu: ${t.status} `)}catch(e){console.log("Hata Oluştu.")}}))}getCustomer(e){return o(this,void 0,void 0,(function*(){try{const t=yield fetch(this.customerApi+"/"+e,{method:"GET",headers:{Accept:"application/json"}});if(!t.ok)return null;return yield t.json()}catch(e){return e instanceof Error?console.log("error message: ",e.message):console.log("unexpected error: ",e),null}}))}}},148:function(e,t,o){var n=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))((function(r,i){function a(e){try{c(n.next(e))}catch(e){i(e)}}function s(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(a,s)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.RentService=void 0;const r=o(961),i=o(758),a=o(767),s="http://localhost:3002/api/v1/rents";t.RentService=class{constructor(e,t){this._rentList=e,this.refundPercent=.75,this._rentCart=t}get rentList(){return this._rentList}set rentList(e){this._rentList=e}get rentCart(){return this._rentCart}set rentCart(e){this._rentCart=e}calculateTotal(e){let t=0;for(let o of e.orderBookItems)t+=o.book.bookPrice.price*o.quantity;return t}calculateDiffHours(e,t){let o=e.getTime()-t.getTime();return Math.floor(o/1e3/60/60)}calculateRefund(e){e.refund=e.total*this.refundPercent}calculateRefundAmount(e){let t,o=this.calculateDiffHours(e.refundDate,e.operationDateTime)/24;if(o<=14)t=.75*e.total;else if(o<=24){let n=.75-.05*(o-14);t=e.total*n}else t=.25*e.total;return t}getRent(e){return this.rentList.find((t=>t.operationNumber===e))}addBookToCart(e,t,o){if(0===this.rentCart.orderBookItems.length)this.rentCart.customerId=o;else if(this.rentCart.orderBookItems.length>0&&this.rentCart.customerId!==o)return alert("Farklı müşteriye kitap kiralanmaya çalışılıyor. Lütfen tek müşteri için işlem yapınız"),!1;let n=new a.OrderBookItems(e,t),r=this.rentCart.orderBookItems.findIndex((t=>t.book.isbn===e.isbn));-1===r?this.rentCart.orderBookItems.push(n):this.rentCart.orderBookItems[r]=n,this.updateRentCart()}updateRentCart(){const e=document.getElementById("rentCart"),t=document.getElementById("totalRentAmountTl");if(e){let o,n,r=0;for(;e.lastChild&&e.children.length>1;)e.removeChild(e.lastChild);t.textContent="";for(let e=0;e<this.rentCart.orderBookItems.length;e++){o=document.createElement("div"),o.className="rent-cart-row";for(let e of this.rentCart.orderBookItems)n=document.createElement("div"),n.className="rent-cart-column",n.textContent=this.rentCart.customerId.toString(),o.appendChild(n),n=document.createElement("div"),n.className="rent-cart-column",n.textContent=e.book.name,o.appendChild(n),n=document.createElement("div"),n.className="rent-cart-column",n.textContent=e.quantity.toString(),o.appendChild(n),n=document.createElement("div"),n.className="rent-cart-column",n.textContent=(e.book.bookPrice.price*e.quantity).toString(),o.appendChild(n)}if(o&&t){for(let e of this.rentCart.orderBookItems)r+=e.book.bookPrice.price*e.quantity;e.appendChild(o),t.textContent=r.toString()+" TL"}}}cartToRent(){return n(this,void 0,void 0,(function*(){let e=this.rentCart,t=new r.Rent;t.orderBookItems=e.orderBookItems,t.customerId=e.customerId,t.total=this.calculateTotal(t),this.rentCart=new i.RentCart,this.updateRentCart(),this.createRent(t)}))}createRent(e){return n(this,void 0,void 0,(function*(){try{const t=yield fetch(s,{method:"POST",body:JSON.stringify({orderBookItems:Array.from(e.orderBookItems),customerId:e.customerId,total:e.total}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(!t.ok)throw new Error(`Hata oluştu, hata kodu: ${t.status} `);{const e=yield t.json();console.log("Rest apidan dönen cevap:\n"),console.log(e),alert("Kitap kiralama işlemi başarıyla gerçekleşmiştir."),alert("Fişinizi kaybetneyiniz. Fiş numaranız: "+e.operationNumber)}}catch(e){console.log("Hata Oluştu."),alert("Kitap kiralama işlemi sırasında bir hata oluştu. Lütfen tekrar deneyiniz.")}}))}refundRent(e){return n(this,void 0,void 0,(function*(){try{const t=yield fetch("http://localhost:3002/api/v1/refunds/rents/"+e,{method:"PATCH",headers:{"Content-Type":"application/json",Accept:"application/json"}});if(t.ok){const e=yield t.json();return console.log(e),e}throw new Error(`Hata oluştu, hata kodu: ${t.status} `)}catch(e){return console.log("Hata Oluştu."),null}}))}isExistRent(e){return n(this,void 0,void 0,(function*(){const t=yield fetch(s+"/"+e,{method:"GET",headers:{"Content-Type":"application/json",Accept:"application/json"}});if(console.log(t),t.ok){const e=yield t.json();return console.log("Rest apidan dönen cevap:\n"),console.log(e),!0}return!1}))}}},478:function(e,t,o){var n=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))((function(r,i){function a(e){try{c(n.next(e))}catch(e){i(e)}}function s(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(a,s)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.SaleService=void 0;const r=o(607),i=o(354),a=o(767),s=o(51);t.SaleService=class{constructor(e,t){this.saleApi="http://localhost:3002/api/v1/sales",this._saleList=e,this._saleCart=t}get saleList(){return this._saleList}set saleList(e){this._saleList=e}get saleCart(){return this._saleCart}set saleCart(e){this._saleCart=e}calculateTotal(e){let t=0;for(let o of e.orderBookItems)t+=o.book.bookPrice.price*o.quantity;return t}addBookToCart(e,t,o){if(0===this.saleCart.orderBookItems.length)this.saleCart.customerId=o;else if(this.saleCart.orderBookItems.length>0&&this.saleCart.customerId!==o)return alert("Farklı müşteriye kitap satılmaya çalışılıyor. Lütfen tek müşteri için işlem yapınız"),!1;let n=new a.OrderBookItems(e,t),r=this.saleCart.orderBookItems.findIndex((t=>t.book.isbn===e.isbn));-1===r?this.saleCart.orderBookItems.push(n):this.saleCart.orderBookItems[r]=n,this.updateSaleCart()}updateSaleCart(){const e=document.getElementById("saleCart"),t=document.getElementById("totalSaleAmountTl");if(e){let o,n,r=0;for(;e.lastChild&&e.children.length>1;)e.removeChild(e.lastChild);t.textContent="";for(let e=0;e<this.saleCart.orderBookItems.length;e++){o=document.createElement("div"),o.className="sale-cart-row";for(let e of this.saleCart.orderBookItems)n=document.createElement("div"),n.className="sale-cart-column",n.textContent=this.saleCart.customerId.toString(),o.appendChild(n),n=document.createElement("div"),n.className="sale-cart-column",n.textContent=e.book.name,o.appendChild(n),n=document.createElement("div"),n.className="sale-cart-column",n.textContent=e.quantity.toString(),o.appendChild(n),n=document.createElement("div"),n.className="sale-cart-column",n.textContent=(e.book.bookPrice.price*e.quantity).toString(),o.appendChild(n)}if(o&&t){for(let e of this.saleCart.orderBookItems)r+=e.book.bookPrice.price*e.quantity;e.appendChild(o),t.textContent=r.toString()+" TL"}}}cartToSale(){return n(this,void 0,void 0,(function*(){let e=this.saleCart,t=new i.Sale;t.orderBookItems=e.orderBookItems,t.customerId=e.customerId,t.operationDateTime=new Date,t.total=this.calculateTotal(t);for(let e of t.orderBookItems)yield r.stockService.getStockByBookId(e.book.id);let o=this.createSale(t);return this.saleCart=new s.SaleCart,this.updateSaleCart(),o}))}createSale(e){return n(this,void 0,void 0,(function*(){try{const t=yield fetch(this.saleApi,{method:"POST",body:JSON.stringify({orderBookItems:Array.from(e.orderBookItems),customerId:e.customerId,total:e.total}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(console.log(t),t.ok){const e=yield t.json();return console.log("Rest apidan dönen cevap:\n"),console.log(e),alert("Kitap satış işlemi başarıyla gerçekleşmiştir."),alert("Fişinizi kaybetmeyiniz. Fiş Numarası: "+e.operationNumber),!0}throw new Error(`Hata oluştu, hata kodu: ${t.status} `)}catch(e){console.log("Hata Oluştu.")}}))}isExistSale(e){return n(this,void 0,void 0,(function*(){const t=yield fetch(this.saleApi+"/"+e,{method:"GET",headers:{"Content-Type":"application/json",Accept:"application/json"}});if(console.log(t),t.ok){const e=yield t.json();return console.log("Rest apidan dönen cevap:\n"),console.log(e),!0}return!1}))}}},214:function(e,t){var o=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))((function(r,i){function a(e){try{c(n.next(e))}catch(e){i(e)}}function s(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(a,s)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.StockService=void 0,t.StockService=class{constructor(e){this.stockApi="http://localhost:3002/api/v1/stocks",this._stockList=e}get stockList(){return this._stockList}set stockList(e){this._stockList=e}getStockByBookId(e){return o(this,void 0,void 0,(function*(){try{const t=yield fetch(this.stockApi+"/q?bookId="+e,{method:"GET",headers:{"Content-Type":"application/json",Accept:"application/json"}});if(t.ok)return yield t.json();throw new Error(`Hata oluştu, hata kodu: ${t.status} `)}catch(e){return e instanceof Error?console.log("error message: ",e.message):console.log("unexpected error: ",e),null}}))}createStock(e){return o(this,void 0,void 0,(function*(){try{const t=yield fetch(this.stockApi,{method:"POST",body:JSON.stringify({quantity:e.quantity,shelfNumber:e.shelfNumber,book:e.book}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(t.ok){const e=yield t.json();return console.log(e),!0}throw new Error(`Hata oluştu, hata kodu: ${t.status} `)}catch(e){console.log("Hata Oluştu."+e)}}))}getAllStocksData(){return o(this,void 0,void 0,(function*(){const e=yield fetch(this.stockApi,{method:"GET",headers:{Accept:"application/json"}});if(!e.ok)throw new Error(`Hata oluştu, hata kodu: ${e.status} `);const t=yield e.json();return JSON.parse(JSON.stringify(t,null,4))}))}}}},t={};!function o(n){var r=t[n];if(void 0!==r)return r.exports;var i=t[n]={exports:{}};return e[n].call(i.exports,i,i.exports,o),i.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,