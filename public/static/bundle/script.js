(()=>{"use strict";var e={221:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DataBase=void 0;const r=o(758),n=o(51);t.DataBase=class{constructor(){this._books=new Array,this._stocks=new Array,this._customers=new Array,this._sales=new Array,this._rents=new Array,this._bookSpecifications=new Array,this._cancels=new Array,this._saleCart=new n.SaleCart,this._rentCart=new r.RentCart}get getBooksList(){return this._books}get getStocksList(){return this._stocks}get getCustomersList(){return this._customers}get getSalesList(){return this._sales}get getRents(){return this._rents}get getBookSpecifications(){return this._bookSpecifications}get getCancaledSales(){return this._cancels}get getSaleCart(){return this._saleCart}get getRentCart(){return this._rentCart}set setSaleCart(e){this._saleCart=e}set setRentCart(e){this._rentCart=e}}},333:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BookPrice=void 0,t.BookPrice=class{get id(){return this._id}set id(e){this._id=e}get price(){return this._price}get startDate(){return this._startDate}get endDate(){return this._endDate}set price(e){this._price=e}set startDate(e){this._startDate=e}set endDate(e){this._endDate=e}}},934:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Book=void 0,t.Book=class{constructor(e,t,o,r,n,i){this._name=t,this._author=o,this._isbn=e,this._publishYear=r,this._pages=n,this._bookPrice=i}get id(){return this._id}set id(e){this._id=e}get isbn(){return this._isbn}get name(){return this._name}get author(){return this._author}get publishYear(){return this._publishYear}get pages(){return this._pages}get bookPrice(){return this._bookPrice}set isbn(e){this._isbn=e}set name(e){this._name=e}set author(e){this._author=e}set publishYear(e){this._publishYear=e}set pages(e){this._pages=e}set bookPrice(e){this._bookPrice=e}}},916:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Customer=void 0,t.Customer=class{constructor(e,t,o){this._name=e,this._surName=t,this._phoneNumber=o}get id(){return this._id}set id(e){this._id=e}get name(){return this._name}get surName(){return this._surName}get phoneNumber(){return this._phoneNumber}set name(e){this._name=e}set surName(e){this._surName=e}set phoneNumber(e){this._phoneNumber=e}}},767:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.OrderBookItems=void 0,t.OrderBookItems=class{constructor(e,t){this._book=e,this._quantity=t}get book(){return this._book}get quantity(){return this._quantity}set book(e){this._book=e}set quantity(e){this._quantity=e}toJSON(){return{book:this._book,quantity:this._quantity}}}},758:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.RentCart=void 0,t.RentCart=class{constructor(){this.orderBookItems=new Array}}},961:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Rent=void 0;const r=o(354);class n extends r.Sale{constructor(e,t,o,r,n,i,a){super(e,o,t,r,n),this._refundDate=i,this._refund=a}get refundDate(){return this._refundDate}get refund(){return this._refund}set refundDate(e){this._refundDate=e}set refund(e){this._refund=e}}t.Rent=n},51:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SaleCart=void 0,t.SaleCart=class{constructor(){this.orderBookItems=new Array}}},354:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Sale=void 0,t.Sale=class{constructor(e,t,o,r,n){this._orderBookItems=e,this._customerId=t,this._operationDateTime=o,this._operationNumber=r,this._total=n}get orderBookItems(){return this._orderBookItems}get customerId(){return this._customerId}get operationDateTime(){return this._operationDateTime}get operationNumber(){return this._operationNumber}get total(){return this._total}set orderBookItems(e){this._orderBookItems=e}set customerId(e){this._customerId=e}set operationDateTime(e){this._operationDateTime=e}set operationNumber(e){this._operationNumber=e}set total(e){this._total=e}}},72:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Stock=void 0,t.Stock=class{constructor(e,t,o){this._quantity=e,this._shelfNumber=t,this._book=o}get id(){return this._id}set id(e){this._id=e}get book(){return this._book}set book(e){this._book=e}get quantity(){return this._quantity}get shelfNumber(){return this._shelfNumber}set quantity(e){this._quantity=e}set shelfNumber(e){this._shelfNumber=e}}},607:function(e,t,o){var r=this&&this.__awaiter||function(e,t,o,r){return new(o||(o=Promise))((function(n,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.stockService=t.saleService=t.rentService=t.cancelService=t.customerService=t.bookService=void 0;const n=o(221),i=o(934),a=o(333),s=o(916),c=o(961),l=o(767),u=o(72),d=o(946),h=o(943),m=o(709),k=o(148),p=o(478),f=o(214);function v(){return r(this,void 0,void 0,(function*(){t.bookService.bookList=yield t.bookService.getAllBooksData(),t.stockService.stockList=yield t.stockService.getAllStocksData(),t.customerService.customerList=yield t.customerService.getAllCustomersData(),console.table(t.bookService.bookList),console.table(t.stockService.stockList),console.table(t.customerService.customerList),console.log("Data intiliazed.")}))}function y(e,t){const o=document.getElementById(t),r=document.getElementById(e);o&&r&&r.addEventListener("click",(()=>{"none"===o.style.display?o.style.display="block":o.style.display="none"}))}var b;b=new n.DataBase,t.bookService=new d.BookService(b.getBooksList,b.getBookSpecifications),t.customerService=new m.CustomerService(b.getCustomersList),t.cancelService=new h.CancelService(b.getCancaledSales),t.rentService=new k.RentService(b.getRents,b.getRentCart),t.saleService=new p.SaleService(b.getSalesList,b.getSaleCart),t.stockService=new f.StockService(b.getStocksList),console.log("Services intiliazed."),v(),y("addBookMenuItem","addBookSection"),y("showBooksMenuItem","listBooksSection"),y("addCustomerMenuItem","addCustomerSection"),y("addStockMenuItem","addStockSection"),y("saleBookMenuItem","saleBookSection"),y("rentBookMenuItem","rentBookSection"),y("cancelSaleMenuItem","cancelSaleSection"),y("cancelRentMenuItem","cancelRentSection"),y("refundBookMenuItem","refundBookSection"),y("rentNow","rentBookSection");const g=document.getElementById("add-book-form");null!=g&&(g.onsubmit=e=>r(void 0,void 0,void 0,(function*(){e.preventDefault();const o=new FormData(g),r=o.get("bookTitle"),n=o.get("bookAuthor"),s=o.get("bookIsbn"),c=o.get("bookPublishYear"),l=o.get("bookPages"),u=o.get("bookPrice"),d=new a.BookPrice;d.price=u;const h=new i.Book(s,r,n,c,l,d);if(!1===t.bookService.bookList.some((e=>e.isbn===h.isbn)))return(yield t.bookService.createBook(h))?(alert(h.isbn+" numaralı kitap Ekleme İşlemi Başarı İle Tamamlanmıştır."),g.reset(),D()):alert(h.isbn+" numaralı kitap Ekleme İşlemi Sırasında Bir Hata oluştu."),!1;alert("Aynı ISBN numrasına sahip ikinci bir kitap eklenemz.")})));const S=document.getElementById("add-stock-form");S&&(S.onsubmit=e=>r(void 0,void 0,void 0,(function*(){e.preventDefault();const o=new FormData(S),r=o.get("bookIsbnForAddStock"),n=o.get("stockQuantity"),i=o.get("shelfNumber"),a=t.bookService.bookList.find((e=>e.isbn===r));if(a){const e=new u.Stock(n,i,a);(yield t.stockService.createStock(e))&&(alert(r+" isbn numaralı kitaptan, "+n+" kadar sisteme stok eklenmiştir."),yield v(),yield D())}else alert("Stok eklenmeye çalışılan kitaba ait isbn numarası hatalıdır.");return S.reset(),!1})));const _=document.getElementById("add-customer-form");_&&(_.onsubmit=e=>r(void 0,void 0,void 0,(function*(){e.preventDefault();const o=new FormData(_),r=o.get("customerName"),n=o.get("customerSurname"),i=o.get("customerPhoneNumber"),a=new s.Customer(r,n,i);return(yield t.customerService.createCustomer(a))?(alert("Müşteri Ekleme İşlemi Başarı İle Tamamlanmıştır. "),_.reset()):alert("Müşteri Ekleme İşlemi Sırasında bir hata ile karşılıldı. "),!1})));const C=document.getElementById("sale-book-form");C&&(C.onsubmit=e=>r(void 0,void 0,void 0,(function*(){e.preventDefault();const o=new FormData(C),r=o.get("isbnForSale"),n=yield t.bookService.getBook(r),i=parseInt(o.get("customerIdForSale")),a=yield t.customerService.getCustomer(i),s=parseInt(o.get("quantityForSale"));try{if(n){let e=yield t.stockService.getStockByBookId(n.id);e?e.quantity>=s?a?t.saleService.addBookToCart(n,s,i):alert(i+" numaralı müşteri kayıtlı değildir."):alert(s+" kadar kitap dükkanda mevcut değildir."):alert(`Dükkanda ${r} numaralı kitabın stoğu mevcut değildir.`)}else alert(r+" numaralı kitap yoktur.");return C.reset(),!1}catch(e){alert(e)}}))),document.getElementById("btnSale").addEventListener("click",(()=>{0===t.saleService.saleCart.orderBookItems.length?alert("Sepette ürün yok. Lütfen önce ürün ekleyiniz"):t.saleService.cartToSale()})),document.getElementById("showBooksMenuItem").addEventListener("click",(()=>{D()}));const B=document.getElementById("cancel-sale-form");B&&(B.onsubmit=e=>r(void 0,void 0,void 0,(function*(){e.preventDefault();const o=new FormData(B).get("saleNumberforCancel");!0===(yield t.saleService.isExistSale(o))?(yield t.cancelService.cancelSaleMock(o))?alert(o+" numaralı satış iptal edilmiştir."):alert(o+" numaralı satış iptal edilirken hata meydana geldi."):alert(o+" numaralı satış bulunamamıştır. Tekrar deneyiniz.")})));const I=document.getElementById("cancel-rent-form");I&&(I.onsubmit=e=>r(void 0,void 0,void 0,(function*(){e.preventDefault();const o=new FormData(I).get("rentNumberforCancel");(yield t.cancelService.cancelRentMock(o))?alert(o+" numaralı kiralama iptal edilmiştir."):alert(o+" numaralı kiralma bulunamamıştır. Tekrar deneyiniz.")})));const w=document.getElementById("rent-book-form");w&&(w.onsubmit=e=>r(void 0,void 0,void 0,(function*(){e.preventDefault();const o=new FormData(w),r=o.get("isbnForRent"),n=yield t.bookService.getBook(r),i=parseInt(o.get("customerIdForRent")),a=yield t.customerService.getCustomer(i),s=parseInt(o.get("quantityForRent"));try{if(n){const e=yield t.stockService.getStockByBookId(n.id);e?e.quantity>=s?a?t.rentService.addBookToCart(n,s,i):alert(i+" numaralı müşteri kayıtlı değildir."):alert(s+" kadar kitap dükkanda mevcut değildir."):alert(`Dükkanda ${r} numaralı kitabın stoğu mevcut değildir. Önce stok ekleyiniz`)}else alert(r+" numaralı kitap yoktur.");return w.reset(),!1}catch(e){alert(e)}}))),document.getElementById("btnRent").addEventListener("click",(()=>{0===t.rentService.rentCart.orderBookItems.length?alert("Sepette ürün yok. Lütfen önce ürün ekleyiniz"):t.rentService.cartToRent()}));const E=document.getElementById("refund-book-form");function D(){return r(this,void 0,void 0,(function*(){t.bookService.bookList=yield t.bookService.getAllBooksData(),t.stockService.stockList=yield t.stockService.getAllStocksData();const e=document.getElementById("listBooks");if(e){let o,r;for(;e.lastChild&&e.children.length>1;)e.removeChild(e.lastChild);t.bookService.bookList.forEach((n=>{o=document.createElement("div"),o.className="row-list-book",r=document.createElement("div"),r.className="column-list-book",r.textContent=n.isbn.toString(),o.appendChild(r),r=document.createElement("div"),r.className="column-list-book",r.textContent=n.name.toString(),o.appendChild(r),r=document.createElement("div"),r.className="column-list-book",r.textContent=n.author.toString(),o.appendChild(r),r=document.createElement("div"),r.className="column-list-book";let i=0;!0===t.stockService.stockList.some((e=>e.book.id===n.id))&&(i=t.stockService.stockList.find((e=>e.book.id===n.id)).quantity),r.textContent=i.toString(),o.appendChild(r),r=document.createElement("div"),r.className="column-list-book",r.textContent=n.bookPrice.price.toString()+" ₺",o.appendChild(r),e.appendChild(o)}))}}))}E&&(E.onsubmit=e=>r(void 0,void 0,void 0,(function*(){let o=new Array;o.push(new l.OrderBookItems(yield t.bookService.getBook("123-45"),3));let r=new Date;r.setDate(r.getDate()+23);let n=new c.Rent(o,new Date,1,"R021122163045",123,r,0);n.refund=t.rentService.calculateRefundAmount(n),t.rentService.rentList.push(n),e.preventDefault();const i=new FormData(E).get("rentNumberforRefund");let a=t.rentService.getRent(i);if(a){let e=yield t.rentService.refundRent(a);e?(alert(a.operationNumber+" numaralı kiralama geri alınmıştır."),alert("Geri ödeme miktarı:"+e+" ₺ .")):alert(a.operationNumber+" numaralı kiralama iptal edilirken hata meydana geldi.")}else alert(i+" numaralı kiralama bulunamamıştır. Tekrar deneyiniz.")})))},946:function(e,t){var o=this&&this.__awaiter||function(e,t,o,r){return new(o||(o=Promise))((function(n,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.BookService=void 0,t.BookService=class{constructor(e,t){this.bookApi="http://localhost:3002/api/v1/books",this._bookList=e,this._bookSpecification=t}get bookList(){return this._bookList}get bookSpecification(){return this._bookSpecification}set bookList(e){this._bookList=e}set bookSpecification(e){this._bookSpecification=e}getBook(e){return o(this,void 0,void 0,(function*(){const t=yield fetch(this.bookApi+"/q?isbn="+e,{method:"GET",headers:{Accept:"application/json"}});if(!t.ok)throw new Error(`Hata oluştu, hata kodu: ${t.status} `);return yield t.json()}))}getAllBooksData(){return o(this,void 0,void 0,(function*(){const e=yield fetch(this.bookApi,{method:"GET",headers:{Accept:"application/json"}});if(!e.ok)throw new Error(`Hata oluştu, hata kodu: ${e.status} `);return yield e.json()}))}createBook(e){return o(this,void 0,void 0,(function*(){try{const t=yield fetch(this.bookApi,{method:"POST",body:JSON.stringify({isbn:e.isbn,name:e.name,author:e.author,pages:e.pages,publishYear:e.publishYear,bookPriceCreateDto:{price:e.bookPrice.price}}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(t.ok){const e=yield t.json();return console.log("Rest servisinden dönen cevap =>"),console.log(e),this.bookList=yield this.getAllBooksData(),!0}throw new Error(`Hata oluştu, hata kodu: ${t.status} `)}catch(e){console.log("Hata Oluştu.")}}))}}},943:function(e,t){var o=this&&this.__awaiter||function(e,t,o,r){return new(o||(o=Promise))((function(n,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.CancelService=void 0,t.CancelService=class{constructor(e){this.cancelSaleApi="http://localhost:3002/api/v1/sales",this.cancelRentApi="http://localhost:3002/api/v1/rents",this._cancelledList=e}get cancelledList(){return this._cancelledList}set cancelledList(e){this._cancelledList=e}calculateDiffHours(e,t){let o=e.getTime()-t.getTime();return Math.floor(o/1e3/60/60)}cancelSale(e){let t=this.calculateCancelSaleRefund(e);e.refund=t,this.cancelledList.push(e)}calculateCancelSaleRefund(e){let t;return t=this.calculateDiffHours(e.canceledDateTime,e.cancelType.operationDateTime)>24?.75*e.cancelType.total:e.cancelType.total,t}cancelSaleMock(e){return o(this,void 0,void 0,(function*(){try{const t=yield fetch(this.cancelSaleApi+"/"+e,{method:"DELETE",headers:{"Content-Type":"application/json",Accept:"application/json"}});if(t.ok)return console.log(t),!0;throw new Error(`Hata oluştu, hata kodu: ${t.status} `)}catch(e){console.log("Hata Oluştu.")}}))}cancelRent(e){let t=this.calculateCancelRentRefund(e);e.refund=t,this.cancelledList.push(e)}calculateCancelRentRefund(e){let t;return t=this.calculateDiffHours(e.canceledDateTime,e.cancelType.operationDateTime)>24?.75*e.cancelType.total:e.cancelType.total,t}cancelRentMock(e){return o(this,void 0,void 0,(function*(){const t=yield fetch(this.cancelRentApi+"/"+e,{method:"DELETE",headers:{"Content-Type":"application/json",Accept:"application/json"}});return!!t.ok&&(console.log(t),!0)}))}}},709:function(e,t){var o=this&&this.__awaiter||function(e,t,o,r){return new(o||(o=Promise))((function(n,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.CustomerService=void 0,t.CustomerService=class{constructor(e){this.customerApi="http://localhost:3002/api/v1/customers",this._customerList=e}get customerList(){return this._customerList}set customerList(e){this._customerList=e}getAllCustomersData(){return o(this,void 0,void 0,(function*(){const e=yield fetch(this.customerApi,{method:"GET",headers:{Accept:"application/json"}});if(!e.ok)throw new Error(`Hata oluştu, hata kodu: ${e.status} `);return yield e.json()}))}createCustomer(e){return o(this,void 0,void 0,(function*(){try{const t=yield fetch(this.customerApi,{method:"POST",body:JSON.stringify({name:e.name,surName:e.surName,phoneNumber:e.phoneNumber}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(t.ok){const e=yield t.json();return console.log("Rest servisinden dönen cevap =>"),console.log(e),!0}throw new Error(`Hata oluştu, hata kodu: ${t.status} `)}catch(e){console.log("Hata Oluştu.")}}))}getCustomer(e){return o(this,void 0,void 0,(function*(){try{const t=yield fetch(this.customerApi+"/"+e,{method:"GET",headers:{Accept:"application/json"}});if(!t.ok)throw alert(`Error! status: ${t.body}`),new Error(`Error! status: ${t.status}`);return yield t.json()}catch(e){return e instanceof Error?console.log("error message: ",e.message):console.log("unexpected error: ",e),null}}))}}},148:function(e,t,o){var r=this&&this.__awaiter||function(e,t,o,r){return new(o||(o=Promise))((function(n,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.RentService=void 0;const n=o(961),i=o(758),a=o(767);t.RentService=class{constructor(e,t){this.rentApi="http://localhost:3002/api/v1/rents",this._rentList=e,this.refundPercent=.75,this._rentCart=t}get rentList(){return this._rentList}set rentList(e){this._rentList=e}get rentCart(){return this._rentCart}set rentCart(e){this._rentCart=e}calculateTotal(e){let t=0;for(let o of e.orderBookItems)t+=o.book.bookPrice.price*o.quantity;return t}calculateDiffHours(e,t){let o=e.getTime()-t.getTime();return Math.floor(o/1e3/60/60)}calculateRefund(e){e.refund=e.total*this.refundPercent}calculateRefundAmount(e){let t,o=this.calculateDiffHours(e.refundDate,e.operationDateTime)/24;if(o<=14)t=.75*e.total;else if(o<=24){let r=.75-.05*(o-14);t=e.total*r}else t=.25*e.total;return t}getRent(e){return this.rentList.find((t=>t.operationNumber===e))}addBookToCart(e,t,o){if(0===this.rentCart.orderBookItems.length)this.rentCart.customerId=o;else if(this.rentCart.orderBookItems.length>0&&this.rentCart.customerId!==o)return alert("Farklı müşteriye kitap kiralanmaya çalışılıyor. Lütfen tek müşteri için işlem yapınız"),!1;let r=new a.OrderBookItems(e,t),n=this.rentCart.orderBookItems.findIndex((t=>t.book.isbn===e.isbn));-1===n?this.rentCart.orderBookItems.push(r):this.rentCart.orderBookItems[n]=r,this.updateRentCart()}updateRentCart(){const e=document.getElementById("rentCart"),t=document.getElementById("totalRentAmountTl");if(e){let o,r,n=0;for(;e.lastChild&&e.children.length>1;)e.removeChild(e.lastChild);t.textContent="";for(let e=0;e<this.rentCart.orderBookItems.length;e++){o=document.createElement("div"),o.className="rent-cart-row";for(let e of this.rentCart.orderBookItems)r=document.createElement("div"),r.className="rent-cart-column",r.textContent=this.rentCart.customerId.toString(),o.appendChild(r),r=document.createElement("div"),r.className="rent-cart-column",r.textContent=e.book.name,o.appendChild(r),r=document.createElement("div"),r.className="rent-cart-column",r.textContent=e.quantity.toString(),o.appendChild(r),r=document.createElement("div"),r.className="rent-cart-column",r.textContent=(e.book.bookPrice.price*e.quantity).toString(),o.appendChild(r)}if(o&&t){for(let e of this.rentCart.orderBookItems)n+=e.book.bookPrice.price*e.quantity;e.appendChild(o),t.textContent=n.toString()+" TL"}}}cartToRent(){return r(this,void 0,void 0,(function*(){let e=this.rentCart,t=new n.Rent;t.orderBookItems=e.orderBookItems,t.customerId=e.customerId,t.total=this.calculateTotal(t),this.rentCart=new i.RentCart,this.updateRentCart(),this.createRent(t)}))}createRent(e){return r(this,void 0,void 0,(function*(){try{const t=yield fetch(this.rentApi,{method:"POST",body:JSON.stringify({orderBookItems:Array.from(e.orderBookItems),customerId:e.customerId,total:e.total}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(!t.ok)throw new Error(`Hata oluştu, hata kodu: ${t.status} `);{const e=yield t.json();console.log("Rest apidan dönen cevap:\n"),console.log(e),alert("Kitap kiralama işlemi başarıyla gerçekleşmiştir."),alert("Fişinizi kaybetneyiniz. Fiş numaranız: "+e.operationNumber)}}catch(e){console.log("Hata Oluştu."),alert("Kitap kiralama işlemi sırasında bir hata oluştu. Lütfen tekrar deneyiniz.")}}))}refundRent(e){return r(this,void 0,void 0,(function*(){try{const t=yield fetch(this.rentApi+"/"+e.operationNumber,{method:"PATCH",body:JSON.stringify({refundDate:e.refundDate,refund:e.refund}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(t.ok){const o=yield t.json();return console.log(o),e.refund}throw new Error(`Hata oluştu, hata kodu: ${t.status} `)}catch(e){console.log("Hata Oluştu.")}}))}}},478:function(e,t,o){var r=this&&this.__awaiter||function(e,t,o,r){return new(o||(o=Promise))((function(n,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.SaleService=void 0;const n=o(607),i=o(354),a=o(767),s=o(51);t.SaleService=class{constructor(e,t){this.saleApi="http://localhost:3002/api/v1/sales",this._saleList=e,this._saleCart=t}get saleList(){return this._saleList}set saleList(e){this._saleList=e}get saleCart(){return this._saleCart}set saleCart(e){this._saleCart=e}calculateTotal(e){let t=0;for(let o of e.orderBookItems)t+=o.book.bookPrice.price*o.quantity;return t}addBookToCart(e,t,o){if(0===this.saleCart.orderBookItems.length)this.saleCart.customerId=o;else if(this.saleCart.orderBookItems.length>0&&this.saleCart.customerId!==o)return alert("Farklı müşteriye kitap satılmaya çalışılıyor. Lütfen tek müşteri için işlem yapınız"),!1;let r=new a.OrderBookItems(e,t),n=this.saleCart.orderBookItems.findIndex((t=>t.book.isbn===e.isbn));-1===n?this.saleCart.orderBookItems.push(r):this.saleCart.orderBookItems[n]=r,this.updateSaleCart()}updateSaleCart(){const e=document.getElementById("saleCart"),t=document.getElementById("totalSaleAmountTl");if(e){let o,r,n=0;for(;e.lastChild&&e.children.length>1;)e.removeChild(e.lastChild);t.textContent="";for(let e=0;e<this.saleCart.orderBookItems.length;e++){o=document.createElement("div"),o.className="sale-cart-row";for(let e of this.saleCart.orderBookItems)r=document.createElement("div"),r.className="sale-cart-column",r.textContent=this.saleCart.customerId.toString(),o.appendChild(r),r=document.createElement("div"),r.className="sale-cart-column",r.textContent=e.book.name,o.appendChild(r),r=document.createElement("div"),r.className="sale-cart-column",r.textContent=e.quantity.toString(),o.appendChild(r),r=document.createElement("div"),r.className="sale-cart-column",r.textContent=(e.book.bookPrice.price*e.quantity).toString(),o.appendChild(r)}if(o&&t){for(let e of this.saleCart.orderBookItems)n+=e.book.bookPrice.price*e.quantity;e.appendChild(o),t.textContent=n.toString()+" TL"}}}cartToSale(){return r(this,void 0,void 0,(function*(){let e=this.saleCart,t=new i.Sale;t.orderBookItems=e.orderBookItems,t.customerId=e.customerId,t.operationDateTime=new Date,t.total=this.calculateTotal(t);for(let e of t.orderBookItems)yield n.stockService.getStockByBookId(e.book.id);let o=this.createSale(t);return this.saleCart=new s.SaleCart,this.updateSaleCart(),o}))}createSale(e){return r(this,void 0,void 0,(function*(){try{const t=yield fetch(this.saleApi,{method:"POST",body:JSON.stringify({orderBookItems:Array.from(e.orderBookItems),customerId:e.customerId,total:e.total}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(console.log(t),t.ok){const e=yield t.json();return console.log("Rest apidan dönen cevap:\n"),console.log(e),alert("Kitap satış işlemi başarıyla gerçekleşmiştir."),alert("Fişinizi kaybetmeyiniz. Fiş Numarası: "+e.operationNumber),!0}throw new Error(`Hata oluştu, hata kodu: ${t.status} `)}catch(e){console.log("Hata Oluştu.")}}))}isExistSale(e){return r(this,void 0,void 0,(function*(){const t=yield fetch(this.saleApi+"/"+e,{method:"GET",headers:{"Content-Type":"application/json",Accept:"application/json"}});if(console.log(t),t.ok){const e=yield t.json();return console.log("Rest apidan dönen cevap:\n"),console.log(e),!0}return!1}))}}},214:function(e,t){var o=this&&this.__awaiter||function(e,t,o,r){return new(o||(o=Promise))((function(n,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.StockService=void 0,t.StockService=class{constructor(e){this.stockApi="http://localhost:3002/api/v1/stocks",this._stockList=e}get stockList(){return this._stockList}set stockList(e){this._stockList=e}getStockByBookId(e){return o(this,void 0,void 0,(function*(){try{const t=yield fetch(this.stockApi+"/q?bookId="+e,{method:"GET",headers:{"Content-Type":"application/json",Accept:"application/json"}});if(t.ok)return yield t.json();throw new Error(`Hata oluştu, hata kodu: ${t.status} `)}catch(e){return e instanceof Error?console.log("error message: ",e.message):console.log("unexpected error: ",e),null}}))}createStock(e){return o(this,void 0,void 0,(function*(){try{const t=yield fetch(this.stockApi,{method:"POST",body:JSON.stringify({quantity:e.quantity,shelfNumber:e.shelfNumber,book:e.book}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(t.ok){const e=yield t.json();return console.log(e),!0}throw new Error(`Hata oluştu, hata kodu: ${t.status} `)}catch(e){console.log("Hata Oluştu."+e)}}))}getAllStocksData(){return o(this,void 0,void 0,(function*(){const e=yield fetch(this.stockApi,{method:"GET",headers:{Accept:"application/json"}});if(!e.ok)throw new Error(`Hata oluştu, hata kodu: ${e.status} `);const t=yield e.json();return JSON.parse(JSON.stringify(t,null,4))}))}}}},t={};!function o(r){var n=t[r];if(void 0!==n)return n.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,o),i.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,