(()=>{"use strict";var e={221:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DataBase=void 0;const s=a(51);t.DataBase=class{constructor(){this._books=new Array,this._stocks=new Array,this._customers=new Array,this._sales=new Array,this._rents=new Array,this._bookSpecifications=new Array,this._cancelSales=new Array,this._saleCart=new s.SaleCart}get getBooksList(){return this._books}get getStocksList(){return this._stocks}get getCustomersList(){return this._customers}get getSalesList(){return this._sales}get getRents(){return this._rents}get getBookSpecifications(){return this._bookSpecifications}get getCancaledSales(){return this._cancelSales}get getSaleCart(){return this._saleCart}set setSaleCart(e){this._saleCart=e}}},39:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BookSpecification=void 0,t.BookSpecification=class{constructor(e,t,a,s){this._isbn=e,this._price=t,this._startDate=a,this._endDate=s}get isbn(){return this._isbn}get price(){return this._price}get startDate(){return this._startDate}get endDate(){return this._endDate}set isbn(e){this._isbn=e}set price(e){this._price=e}set startDate(e){this._startDate=e}set endDate(e){this._endDate=e}}},934:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Book=void 0,t.Book=class{constructor(e,t,a,s,o,r){this._name=t,this._author=a,this._isbn=e,this._publishYear=s,this._pages=o,this._bookSpec=r}get isbn(){return this._isbn}get name(){return this._name}get author(){return this._author}get publishYear(){return this._publishYear}get pages(){return this._pages}get bookSpec(){return this._bookSpec}set isbn(e){this._isbn=e}set name(e){this._name=e}set author(e){this._author=e}set publishYear(e){this._publishYear=e}set pages(e){this._pages=e}set bookSpec(e){this._bookSpec=e}}},916:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Customer=void 0,t.Customer=class{constructor(e,t,a,s){this._id=e,this._name=t,this._surName=a,this._phoneNumber=s}get id(){return this._id}get name(){return this._name}get surName(){return this._surName}get phoneNumber(){return this._phoneNumber}set id(e){this._id=e}set name(e){this._name=e}set surName(e){this._surName=e}set phoneNumber(e){this._phoneNumber=e}}},51:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SaleCart=void 0,t.SaleCart=class{constructor(){this.bookAndQuantityMap=new Map}}},354:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Sale=void 0,t.Sale=class{constructor(e,t,a,s,o){this._bookAndQuantityMap=new Map,this._bookAndQuantityMap=e,this._operationDateTime=t,this._customerId=a,this._operationNumber=s,this._total=o}get bookAndQuantityMap(){return this._bookAndQuantityMap}get operationDateTime(){return this._operationDateTime}get customerId(){return this._customerId}get operationNumber(){return this._operationNumber}get total(){return this._total}set bookAndQuantityMap(e){this._bookAndQuantityMap=e}set operationDateTime(e){this._operationDateTime=e}set customerId(e){this._customerId=e}set operationNumber(e){this._operationNumber=e}set total(e){this._total=e}}},72:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Stock=void 0,t.Stock=class{constructor(e,t,a){this._isbn=e,this._quantity=t,this._shelfNumber=a}get isbn(){return this._isbn}get quantity(){return this._quantity}get shelfNumber(){return this._shelfNumber}set isbn(e){this._isbn=e}set quantity(e){this._quantity=e}set shelfNumber(e){this._shelfNumber=e}}},607:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.stockService=t.saleService=t.rentService=t.cancelSaleService=t.customerService=t.bookService=void 0;const s=a(221),o=a(934),r=a(39),i=a(916),n=a(72),c=a(946),l=a(609),u=a(709),d=a(148),h=a(478),m=a(214);let S=new s.DataBase;function g(e,t){const a=document.getElementById(t),s=document.getElementById(e);a&&s&&s.addEventListener("click",(()=>{"none"===a.style.display?a.style.display="block":a.style.display="none"}))}!function(e){t.bookService=new c.BookService(e),t.customerService=new u.CustomerService(e),t.cancelSaleService=new l.CancelSaleService(e),t.rentService=new d.RentService(e),t.saleService=new h.SaleService(e),t.stockService=new m.StockService(e),console.log("Services intiliazed."),t.bookService.addBook(new o.Book("123-45","Neredeyiz","Mehmet Ercan","2021",109,new r.BookSpecification("123-45",25.99,new Date,new Date))),t.bookService.addBook(new o.Book("123-46","Neredeyiz 2","Mehmet Ercan","2022",179,new r.BookSpecification("123-46",29.99,new Date,new Date))),t.customerService.addCustomer(new i.Customer(1,"","","")),t.customerService.addCustomer(new i.Customer(2,"","","")),t.stockService.addStock("123-45","A45-52",10),t.stockService.addStock("123-46","A45-52",10),console.log("Data loaded.")}(S),g("addBookMenuItem","addBookSection"),g("bookCardsMenuItem","listBooksSection"),g("addCustomerMenuItem","addCustomerSection"),g("addStockMenuItem","addStockSection"),g("saleBookMenuItem","saleBookSection");const k=document.getElementById("add-book-form");null!=k&&(k.onsubmit=()=>{const e=new FormData(k),a=e.get("bookTitle"),s=e.get("bookAuthor"),i=e.get("bookIsbn"),n=e.get("bookPublishYear"),c=e.get("bookPages"),l=e.get("bookPrice"),u=new Date,d=new Date("Dec 31, 9999 23:59:59"),h=new r.BookSpecification(i,l,u,d),m=new o.Book(i,a,s,n,c,h);return t.bookService.addBook(m),alert("Kitap Ekleme İşlemi Başarı İle Tamamlanmıştır."),k.reset(),!1});const p=document.getElementById("add-customer-form");p&&(p.onsubmit=()=>{const e=new FormData(p),a=e.get("customerName"),s=e.get("customerSurname"),o=e.get("customerPhoneNumber"),r=new i.Customer(t.customerService.getNewCustomerId(),a,s,o);return t.customerService.addCustomer(r),alert("Müşteri Ekleme İşlemi Başarı İle Tamamlanmıştır. "),p.reset(),!1});const _=document.getElementById("add-stock-form");_&&(_.onsubmit=()=>{const e=new FormData(_),a=e.get("bookIsbnForAddStock"),s=e.get("stockQuantity"),o=e.get("shelfNumber");return new n.Stock(a,s,o),S.getBooksList.some((e=>e.isbn==a))?(t.stockService.increaseStock(a,s),alert(a+" isbn numaralı kitaptan, "+s+" kadar sisteme stok eklenmiştir.")):alert("Stok eklenmeye çalışılan kitap, kayıtlı değildir. Lütfen önce kitap ekleyiniz"),_.reset(),!1});const b=document.getElementById("sale-book-form");b&&(b.onsubmit=()=>{const e=new FormData(b),a=e.get("isbnForSale"),s=t.bookService.getBook(a),o=parseInt(e.get("customerIdForSale")),r=t.customerService.isValidCustomer(o),i=parseInt(e.get("quantityForSale")),n=t.stockService.getStock(a);try{return s?n.quantity>=i?r?t.saleService.addBookToCart(s,i,o):alert(o+" numaralı müşteri kayıtlı değildir."):alert(i+" kadar kitap dükkanda mevcut değildir."):alert(a+" numaralı kitap yoktur."),b.reset(),!1}catch(e){alert(e)}}),document.getElementById("btnBuy").addEventListener("click",(()=>{0===t.saleService.dataBase.getSaleCart.bookAndQuantityMap.size?alert("Sepette ürün yok. Lütfen önce ürün ekleyiniz"):t.saleService.cartToSale()}))},946:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BookService=void 0,t.BookService=class{constructor(e){this._dataBase=e}get dataBase(){return this._dataBase}set dataBase(e){this._dataBase=e}getBook(e){return this.dataBase.getBooksList.find((t=>t.isbn===e))}addBook(e){try{this.dataBase.getBooksList.push(e),this.dataBase.getBookSpecifications.push(e.bookSpec)}catch(e){console.log("Kitap eklenirken bir hata meydana geldi.")}}isValidBook(e){const t=this.getBook(e);return this.dataBase.getBooksList.includes(t)}}},609:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CancelSaleService=void 0,t.CancelSaleService=class{constructor(e){this._dataBase=e}get dataBase(){return this._dataBase}set dataBase(e){this._dataBase=e}cancelSale(e){this.dataBase.getCancaledSales.push(e);let t=this.calculateRefund(e);e.refund=t}calculateRefund(e){let t;return t=this.calculateDiffHours(e.canceledDateTime,e.sale.operationDateTime)>24?.75*e.sale.total:e.sale.total,t}calculateDiffHours(e,t){let a=e.getTime()-t.getTime();return Math.floor(a/1e3/60/60)}}},709:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CustomerService=void 0,t.CustomerService=class{constructor(e){this._dataBase=e}get dataBase(){return this._dataBase}set dataBase(e){this._dataBase=e}addCustomer(e){this.dataBase.getCustomersList.push(e)}getNewCustomerId(){let e=0;return this.dataBase.getCustomersList.length>0&&(e=this.dataBase.getCustomersList.at(this.dataBase.getCustomersList.length-1).id),e+=1,e}getCustomerInfo(e){return this.dataBase.getCustomersList.find((t=>t.id===e))||void 0}isValidCustomer(e){return!!this.dataBase.getCustomersList.some((t=>t.id===e))}}},148:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.RentService=void 0,t.RentService=class{constructor(e){this._dataBase=e,this.refundPercent=.75}get dataBase(){return this._dataBase}set dataBase(e){this._dataBase=e}addRent(e){this.dataBase.getRents.push(e)}calculateTotal(e){e.bookAndQuantityMap;let t=0;for(let a of e.bookAndQuantityMap)t+=a[0].bookSpec.price*a[1];return t}generateRentNumber(e){let t=new Date;return"R"+t.getDay().toString+t.getMonth().toString+t.getFullYear().toString+t.getHours().toString+t.getMinutes().toString+t.getSeconds().toString+e.toString}calculateRefund(e){e.refund=e.total*this.refundPercent}}},478:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SaleService=void 0;const s=a(607),o=a(354),r=a(51);t.SaleService=class{constructor(e){this._dataBase=e}get dataBase(){return this._dataBase}set dataBase(e){this._dataBase=e}addSale(e){this.dataBase.getSalesList.push(e)}calculateTotal(e){let t=0;for(let a of e.bookAndQuantityMap.entries())t+=a[0].bookSpec.price*a[1];return t}generateSaleNumber(e){let t=new Date;return"S"+t.getDay().toString()+t.getMonth().toString()+t.getFullYear().toString()+t.getHours().toString()+t.getMinutes().toString()+t.getSeconds().toString()+e.toString()}getSale(e){let t=this.dataBase.getSalesList.find((t=>t.operationNumber===e));if(t)return t;throw new Error}removeSale(e){let t=this.dataBase.getSalesList.indexOf(e);this.dataBase.getSalesList.splice(t,1)}addBookToCart(e,t,a){if(0===this.dataBase.getSaleCart.bookAndQuantityMap.size)this.dataBase.getSaleCart.customerId=a;else if(this.dataBase.getSaleCart.bookAndQuantityMap.size>0&&this.dataBase.getSaleCart.customerId!==a)return alert("Farklı müşteriye kitap satılmaya çalışılıyor. Lütfen tek müşteri için işlem yapınız"),!1;this.dataBase.getSaleCart.bookAndQuantityMap.set(e,t),this.updateSaleCart()}updateSaleCart(){const e=document.getElementById("saleCart"),t=document.getElementById("totalAmountTl");if(e){let a,s,o=0;for(;e.lastChild&&e.children.length>1;)e.removeChild(e.lastChild);for(let e=0;e<this.dataBase.getSaleCart.bookAndQuantityMap.size;e++){a=document.createElement("div"),a.className="row";for(let e of this.dataBase.getSaleCart.bookAndQuantityMap.entries())s=document.createElement("div"),s.className="column",s.textContent=this.dataBase.getSaleCart.customerId.toString(),a.appendChild(s),s=document.createElement("div"),s.className="column",s.textContent=e[0].name,a.appendChild(s),s=document.createElement("div"),s.className="column",s.textContent=e[1].toString(),a.appendChild(s),s=document.createElement("div"),s.className="column",s.textContent=(e[0].bookSpec.price*e[1]).toString(),a.appendChild(s)}if(a&&t){for(let e of this.dataBase.getSaleCart.bookAndQuantityMap)o+=e[0].bookSpec.price*e[1];e.appendChild(a),t.textContent=o.toString()+" TL"}}}cartToSale(){let e=this.dataBase.getSaleCart,t=new o.Sale;t.bookAndQuantityMap=e.bookAndQuantityMap,t.customerId=e.customerId,t.operationNumber=this.generateSaleNumber(e.customerId),t.operationDateTime=new Date,t.total=this.calculateTotal(t);for(let e of t.bookAndQuantityMap)s.stockService.increaseStock(e[0].isbn,-e[1]);this.addSale(t),this.dataBase.setSaleCart=new r.SaleCart,this.updateSaleCart(),console.log(t.operationNumber),alert("Satış gerçekleşmiştir. Fiş Numaranız: "+t.operationNumber+"\nFişinizi kaybetmeyiniz. ")}}},214:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.StockService=void 0;const s=a(72);t.StockService=class{constructor(e){this._dataBase=e}get dataBase(){return this._dataBase}set dataBase(e){this._dataBase=e}addStock(e,t,a){try{let o=new s.Stock(e,a,t);return this.dataBase.getStocksList.push(o),!0}catch(e){return console.error(e),!1}}increaseStock(e,t){let a=this.getStock(e);return!!a&&(a.quantity=a.quantity+t,!0)}getStock(e){let t=this.dataBase.getStocksList.find((t=>t.isbn===e));if(t)return t;throw new Error("")}}}},t={};!function a(s){var o=t[s];if(void 0!==o)return o.exports;var r=t[s]={exports:{}};return e[s](r,r.exports,a),r.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,